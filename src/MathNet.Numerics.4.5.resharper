<Configuration>
  <CodeStyleSettings>
    <ExternalPath IsNull="False">
    </ExternalPath>
    <Sharing>SOLUTION</Sharing>
    <AgentSmithCSharpStyleSettings version="1">
      <CodeStyleSettings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <CustomDictionaries>
          <Dictionaries>
            <CustomDictionary>
              <Name>en-US</Name>
              <CaseSensitive>false</CaseSensitive>
              <UserWords>Wikipedia
Cholesky
Bluestein
</UserWords>
            </CustomDictionary>
          </Dictionaries>
        </CustomDictionaries>
        <StringsDictionary>en-US</StringsDictionary>
        <IdentifierDictionary>en-US</IdentifierDictionary>
        <LastSelectedCustomDictionary>en-US</LastSelectedCustomDictionary>
        <CommentsSettings>
          <DictionaryName>en-US</DictionaryName>
          <CommentMatch>
            <Match>
              <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
              <Declaration>Any</Declaration>
              <IsReadOnly>Maybe</IsReadOnly>
              <IsStatic>Maybe</IsStatic>
              <ParamDirection>Any</ParamDirection>
            </Match>
          </CommentMatch>
          <CommentNotMatch />
          <SuppressIfBaseHasComment>false</SuppressIfBaseHasComment>
          <MaxLineLength>80</MaxLineLength>
        </CommentsSettings>
        <NamingConventionSettings>
          <Rules>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>EnumerationMember</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Classes, Enumerations, Enumeration values should be named in Pascal</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Property</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Event</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Non private properties, methods, events should be in pascal.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Property</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Event</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Private properties, methods, events should be in pascal.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Field</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Fields should be underscore camel.</Description>
              <MustHavePrefixes>
                <string>_</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Variable</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Variable should be declared in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Parameter</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Function parameters should be in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Namespace</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Namespaces should be in Pascal.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>true</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Constants should be in capital.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>UpperCase</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Any</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Acronyms should not have more than 2 characters.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>MatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>^(?&gt;(XML|SQL|[A-Z]{0,2})[A-Z]?([^A-Z]|$)|[^A-Z]+)*$</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Any</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Field</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>None</AccessLevel>
                  <Declaration>Namespace</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Names should not have underscore character</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>NotMatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>(?&lt;remove&gt;_)</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <MarkedWithAttribute>NUnit.Framework.TestFixtureAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>TestFixtures should end with Test.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>Test</string>
              </MustNotHavePrefixes>
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Test</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute>NUnit.Framework.TestAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Test methods should start with Test.</Description>
              <MustHavePrefixes>
                <string>Test</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>Test</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Enumerations should not end with Enum.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>Enum</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>EnumerationMember</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Do not name enumerations reserved.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>NotMatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>(?&lt;remove&gt;(reserved|Reserved))</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Event</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Event should not have Before or After prefix.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>Before</string>
                <string>After</string>
              </MustNotHavePrefixes>
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Flags enums should have plural names</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>s</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>true</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Enums that are not flags should not have plural names</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>s</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Attribute</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Attribute should end with Attribute.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Attribute</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.EventArgs</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>EventArgs should end with EventArgs.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>EventArgs</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Exception</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Exceptions should end with Exception.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Exception</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Stack</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Stack should end with Collection or Stack.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
                <string>Stack</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.ICollection</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.IEnumerable</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.ICollection</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Stack</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Queue</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Collections should end with Collection.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.IDictionary</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.IDictionary</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Dictionary should end with Dictionary.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Dictionary</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Queue</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Queue should end with Collection or Queue.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
                <string>Queue</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Interface</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Interfaces should be in Pascal and start with I.</Description>
              <MustHavePrefixes>
                <string>I</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes />
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
          </Rules>
          <Exclusions />
        </NamingConventionSettings>
        <IdentifiersToSpellCheck>
          <Match>
            <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
            <Declaration>Any</Declaration>
            <IsReadOnly>Maybe</IsReadOnly>
            <IsStatic>Maybe</IsStatic>
            <ParamDirection>Any</ParamDirection>
          </Match>
        </IdentifiersToSpellCheck>
        <IdentifiersNotToSpellCheck />
        <PatternsToIgnore>
          <string>(?#email)\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</string>
          <string>(?#url)http(s)?://([\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=]*)?</string>
        </PatternsToIgnore>
      </CodeStyleSettings>
    </AgentSmithCSharpStyleSettings>
    <CSharp>
      <FormatSettings>
        <ANONYMOUS_METHOD_DECLARATION_BRACES>NEXT_LINE</ANONYMOUS_METHOD_DECLARATION_BRACES>
        <CASE_BLOCK_BRACES>NEXT_LINE</CASE_BLOCK_BRACES>
        <FORCE_FIXED_BRACES_STYLE>ALWAYS_ADD</FORCE_FIXED_BRACES_STYLE>
        <FORCE_FOR_BRACES_STYLE>ALWAYS_ADD</FORCE_FOR_BRACES_STYLE>
        <FORCE_FOREACH_BRACES_STYLE>ALWAYS_ADD</FORCE_FOREACH_BRACES_STYLE>
        <FORCE_IFELSE_BRACES_STYLE>ALWAYS_ADD</FORCE_IFELSE_BRACES_STYLE>
        <FORCE_USING_BRACES_STYLE>ALWAYS_ADD</FORCE_USING_BRACES_STYLE>
        <FORCE_WHILE_BRACES_STYLE>ALWAYS_ADD</FORCE_WHILE_BRACES_STYLE>
        <INDENT_SIZE>4</INDENT_SIZE>
        <INITIALIZER_BRACES>NEXT_LINE</INITIALIZER_BRACES>
        <MODIFIERS_ORDER IsNull="False">
          <Item>public</Item>
          <Item>protected</Item>
          <Item>internal</Item>
          <Item>private</Item>
          <Item>new</Item>
          <Item>abstract</Item>
          <Item>virtual</Item>
          <Item>override</Item>
          <Item>sealed</Item>
          <Item>static</Item>
          <Item>readonly</Item>
          <Item>extern</Item>
          <Item>unsafe</Item>
          <Item>volatile</Item>
        </MODIFIERS_ORDER>
        <PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE>False</PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE>
        <SPACE_AROUND_MULTIPLICATIVE_OP>True</SPACE_AROUND_MULTIPLICATIVE_OP>
        <SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>True</SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>
      </FormatSettings>
      <UsingsSettings />
      <Naming2>
        <ExceptionName IsNull="False">
        </ExceptionName>
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
        <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
        <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
        <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="StaticReadonly" />
        <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="NotPublicStaticFields" />
        <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="NotPublicInstanceFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      </Naming2>
    </CSharp>
    <VB>
      <FormatSettings>
        <INDENT_SIZE>4</INDENT_SIZE>
      </FormatSettings>
      <ImportsSettings />
      <Naming2 />
    </VB>
    <GenerateMemberBody />
    <Naming2>
      <ExceptionName IsNull="False">
      </ExceptionName>
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="StaticReadonly" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
      <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
      <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="NotPublicStaticFields" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="NotPublicInstanceFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      <Abbreviation Text="QR" />
      <Abbreviation Text="FFT" />
      <Abbreviation Text="LU" />
      <Abbreviation Text="DC" />
    </Naming2>
  </CodeStyleSettings>
  <SharedSolutionTemplateManager>
    <FileTemplates>
      <Template uid="63c1d656-1b75-445c-a591-213f22b5a340" shortcut="" description="Math.NET Class" text="// &lt;copyright file=&quot;$FILE$&quot; company=&quot;Math.NET&quot;&gt;&#xD;&#xA;// Math.NET Numerics, part of the Math.NET Project&#xD;&#xA;// http://mathnet.opensourcedotnet.info&#xD;&#xA;//&#xD;&#xA;// Copyright (c) $YEAR$ Math.NET&#xD;&#xA;//&#xD;&#xA;// Permission is hereby granted, free of charge, to any person&#xD;&#xA;// obtaining a copy of this software and associated documentation&#xD;&#xA;// files (the &quot;Software&quot;), to deal in the Software without&#xD;&#xA;// restriction, including without limitation the rights to use,&#xD;&#xA;// copy, modify, merge, publish, distribute, sublicense, and/or sell&#xD;&#xA;// copies of the Software, and to permit persons to whom the&#xD;&#xA;// Software is furnished to do so, subject to the following&#xD;&#xA;// conditions:&#xD;&#xA;//&#xD;&#xA;// The above copyright notice and this permission notice shall be&#xD;&#xA;// included in all copies or substantial portions of the Software.&#xD;&#xA;//&#xD;&#xA;// THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,&#xD;&#xA;// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES&#xD;&#xA;// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND&#xD;&#xA;// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT&#xD;&#xA;// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,&#xD;&#xA;// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING&#xD;&#xA;// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR&#xD;&#xA;// OTHER DEALINGS IN THE SOFTWARE.&#xD;&#xA;// &lt;/copyright&gt;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;  public class $CLASS$ {$END$}&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <ProjectLanguageContext language="CSharp" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="FILE" expression="getFileName()" initialRange="0" />
          <Variable name="YEAR" expression="getCurrentDate(&quot;yyyy&quot;)" initialRange="-1" />
          <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="0" />
          <Variable name="CLASS" expression="getFileNameWithoutExtension()" initialRange="0" />
        </Variables>
        <CustomProperties>
          <Property key="FileName" value="Class" />
          <Property key="Extension" value="cs" />
          <Property key="ValidateFileName" value="False" />
        </CustomProperties>
      </Template>
    </FileTemplates>
  </SharedSolutionTemplateManager>
</Configuration>
// Implementation file for parser generated by fsyacc
#light "off"
module Microsoft.FSharp.Compiler.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Compiler
open Internal.Utilities.Text.Lexing
open Internal.Utilities.Text.Parsing.ParseHelpers
# 1 "..\pars.mly"

// (c) Microsoft Corporation. All rights reserved

open Internal.Utilities
open Internal.Utilities.Pervasives

open Microsoft.FSharp.Compiler.AbstractIL
open Microsoft.FSharp.Compiler.AbstractIL.Internal
open Microsoft.FSharp.Compiler.AbstractIL.Internal.Library
open Microsoft.FSharp.Compiler
open Internal.Utilities.Text.Parsing

open System
open Microsoft.FSharp.Compiler.Range
open Microsoft.FSharp.Compiler.Ast
open Microsoft.FSharp.Compiler.Lib
open Microsoft.FSharp.Compiler.PrettyNaming
open Microsoft.FSharp.Compiler.ErrorLogger

let mk_optional m xopt = 
    match xopt with 
    | None -> mksyn_lid_get m Ast.lib_MFCore_path "None"
    | Some x  -> Expr_app(ExprAtomicFlag.NonAtomic, mksyn_lid_get m Ast.lib_MFCore_path "Some",x,m)

let mk_Do (vis,strict,expr,m) = 
    if isSome vis then errorR(Error("Visibility declarations are not permitted on 'do' bindings",m));
    Binding (None,
             (if strict then DoBinding else StandaloneExpression),
             false,false,[],emptyPreXmlDoc,SynInfo.emptyValSynData,
             (if strict then Pat_const(Const_unit,m) else Pat_wild m),
             BindingRhs([],None,expr),m,NoSequencePointAtDoBinding)

let mk_Def_expr (e,m) = 
    let spExpr = if IsControlFlowExpression e then NoSequencePointAtDoBinding else SequencePointAtBinding (range_of_synexpr e) in
    Def_expr(spExpr,e,m)

let addAttribs attrs p =  Pat_attrib(p,attrs,range_of_synpat p)

let computeOverloadQualifier attrs = 
  let attrs = 
      attrs |> List.choose (fun attr -> 
          match attr with 
          | (Attr(lid,(Expr_const(Const_string (s,_),_) | Expr_paren(Expr_const(Const_string (s,_),_),_)),_,_)) ->
              begin match List.frontAndBack lid with 
              | (_,id) when id.idText = "OverloadID" or id.idText = "OverloadIDAttribute" -> Some(s)
              | _ -> None
              end
          | _ -> None) in
  match attrs with 
  | [x] -> Some x
  | [] -> None
  | _ -> failwith "Multiple OverloadID attributes"

(* error recovery*)
let arbExpr(parseState) = Expr_arb(lhs(parseState))

let mksyn_anon_constraint ty m = Type_anon_constraint(ty,m) 

(* This function is called by the generated parser code. Returning initiates error recovery *)
let parse_error_rich = Some (fun (ctxt: ParseErrorContext<_>) -> 
    errorR(SyntaxError(box(ctxt), GetLexerRange (GetParserLexbuf ctxt.ParseState))))

let reportParseErrorAt m s = errorR(Error(s,m))

let reportParseWarningAt m s = warning(Error(s,m))

let raiseParseErrorAt m s = 
    reportParseErrorAt m s; 
    // This initiates error recovery
    raise RecoverableParseError 

let checkEndOfFileError t = 
  match t with 
  | AT_ifdef_skip(_,_,m) -> reportParseErrorAt m "end of file in #if section begun at or after here"
  | AT_string (_,m) ->  reportParseErrorAt m "end of file in string begun at or before here"
  | AT_vstring (_,m) ->  reportParseErrorAt m "end of file in verbatim string begun at or before here"
  | AT_comment (_,_,m) ->  reportParseErrorAt m "end of file in comment begun at or before here"
  | AT_tokenized_comment (_,_,m) ->  reportParseErrorAt m "end of file in comment begun at or before here"
  | AT_comment_string (_,_,m) -> reportParseErrorAt m "end of file in string embedded in comment begun at or before here"
  | AT_comment_vstring (_,_,m) -> reportParseErrorAt m "end of file in verbatim string embedded in comment begun at or before here"
  | AT_camlonly (_,m) -> reportParseErrorAt m "end of file in IF-OCAML section begun at or before here" 
  | AT_endline(ENDL_skip(_,_,m)) -> reportParseErrorAt m "end of file in directive begun at or before here"
  | AT_endline(ENDL_token(stack))
  | AT_token(stack) -> 
      match stack with 
      | [] -> ()
      | (_,m) :: _  -> reportParseErrorAt m "no #endif found for #if or #else" 

type BindingSet = BindingSetPreAttrs of range * bool * bool * (SynAttributes -> access option -> SynAttributes * SynBinding list)

let mkClassMemberLocalBindings(isStatic,wholem,attrs,vis,BindingSetPreAttrs(_,isRec,isUse,declsPreAttrs)) = 
   let ignoredFreeAttrs,decls = declsPreAttrs attrs vis in
   if nonNil ignoredFreeAttrs then warning(Error("attributes have been ignored in this construct",wholem));
   if isUse then errorR(Error("'use' bindings are not permitted in implicit class constructors",wholem));
   ClassMemberDefn_let_bindings (decls,isStatic,isRec,wholem)

let mkLocalBindings (wholem,BindingSetPreAttrs(_,isRec,isUse,declsPreAttrs),body) = 
   let ignoredFreeAttrs,decls = declsPreAttrs [] None in 
   if nonNil ignoredFreeAttrs then warning(Error("attributes have been ignored in this construct",wholem));
   Expr_let (isRec,isUse,decls,body,wholem) 

let mkDefnBindings (wholem,BindingSetPreAttrs(_,isRec,isUse,declsPreAttrs),attrs,vis,attrsm) = 
    if isUse then errorR(Error("'use' bindings are not permitted in modules",wholem));
    let freeAttrs,decls = declsPreAttrs attrs vis in 
    let letDecls = [ Def_let (isRec,decls,wholem) ] in 
    let attrDecls = if nonNil freeAttrs then [ Def_attributes (freeAttrs,attrsm) ] else [] in 
    attrDecls @ letDecls

let id_of_pat m p = 
    match p with 
    | Pat_as (Pat_wild _,id,false,_,_) -> id 
    | _ -> raiseParseErrorAt m "an integer for loop must use a simple identifier"

let checkForMultipleAugmentations m a1 a2 = 
    if nonNil a1 && nonNil a2 then raiseParseErrorAt m "at most one 'with' augmentation is permitted";
    a1 @ a2

let grabXmlDoc(parseState,elemIdx) = 
    LexbufLocalXmlDocStore.GrabXML(GetParserLexbuf parseState,rhs parseState elemIdx)



# 131 "pars.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | HASH_IF of (range * string * Ast.lexcont)
  | HASH_ELSE of (range * string * Ast.lexcont)
  | HASH_ENDIF of (range * string * Ast.lexcont)
  | COMMENT of (Ast.lexcont)
  | WHITESPACE of (Ast.lexcont)
  | HASH_LINE of (Ast.lexcont)
  | HASH_LIGHT of (Ast.lexcont)
  | INACTIVECODE of (Ast.lexcont)
  | LINE_COMMENT of (Ast.lexcont)
  | STRING_TEXT of (Ast.lexcont)
  | EOF of (Ast.lexcont)
  | LEX_FAILURE of (string)
  | ODUMMY of (token)
  | OINTERFACE_MEMBER
  | OBLOCKEND
  | ORIGHT_BLOCK_END
  | ODECLEND
  | OEND
  | OBLOCKSEP
  | OBLOCKBEGIN
  | ORESET
  | OFUN
  | OFUNCTION
  | OWITH
  | OELSE
  | OTHEN
  | ODO_BANG
  | ODO
  | OBINDER of (string)
  | OLET of (bool)
  | HIGH_PRECEDENCE_TYAPP
  | HIGH_PRECEDENCE_APP
  | EXTERN
  | VOID
  | PUBLIC
  | PRIVATE
  | INTERNAL
  | STATIC
  | MEMBER
  | CLASS
  | VIRTUAL
  | ABSTRACT
  | OVERRIDE
  | DEFAULT
  | CONSTRUCTOR
  | INHERIT
  | GREATER_RBRACK
  | STRUCT
  | SIG
  | BAR
  | RBRACK
  | RBRACE
  | MINUS
  | DOLLAR
  | LBRACE_LESS
  | BAR_RBRACK
  | GREATER_RBRACE
  | UNDERSCORE
  | SEMICOLON_SEMICOLON
  | LARROW
  | EQUALS
  | LBRACK
  | LBRACK_BAR
  | LBRACK_LESS
  | LBRACE
  | QMARK
  | QMARK_QMARK
  | DOT
  | COLON
  | COLON_COLON
  | COLON_GREATER
  | COLON_QMARK_GREATER
  | COLON_QMARK
  | COLON_EQUALS
  | SEMICOLON
  | WHEN
  | WHILE
  | WITH
  | HASH
  | AMP
  | AMP_AMP
  | QUOTE
  | LPAREN
  | RPAREN
  | STAR
  | COMMA
  | RARROW
  | RARROW2
  | GREATER_DOT
  | GREATER_BAR_RBRACK
  | LPAREN_STAR_RPAREN
  | OPEN
  | OR
  | REC
  | THEN
  | TO
  | TRUE
  | TRY
  | TYPE
  | VAL
  | INLINE
  | INTERFACE
  | INSTANCE
  | LAZY
  | MATCH
  | METHOD
  | MUTABLE
  | NEW
  | OF
  | EXCEPTION
  | FALSE
  | FOR
  | FUN
  | FUNCTION
  | IF
  | IN
  | FINALLY
  | DO_BANG
  | AND
  | AS
  | ASSERT
  | ASR
  | BEGIN
  | DO
  | DONE
  | DOWNTO
  | ELSE
  | ELIF
  | END
  | DOT_DOT
  | BAR_BAR
  | LESS
  | GREATER
  | UPCAST
  | DOWNCAST
  | NULL
  | RESERVED
  | MODULE
  | NAMESPACE
  | DELEGATE
  | CONSTRAINT
  | BASE
  | LQUOTE of (string * bool)
  | RQUOTE of (string * bool)
  | RQUOTE_DOT of (string * bool)
  | SPLICE_SYMBOL of (string)
  | PERCENT_OP of (string)
  | BINDER of (string)
  | LET of (bool)
  | YIELD of (bool)
  | YIELD_BANG of (bool)
  | BIGNUM of ((string * string))
  | DECIMAL of (System.Decimal)
  | CHAR of (char)
  | IEEE64 of (double)
  | IEEE32 of (single)
  | NATIVEINT of (int64)
  | UNATIVEINT of (uint64)
  | UINT64 of (uint64)
  | UINT32 of (uint32)
  | UINT16 of (uint16)
  | UINT8 of (byte)
  | INT64 of (int64 * bool)
  | INT32 of (int32 * bool)
  | INT32_DOT_DOT of (int32 * bool)
  | INT16 of (int16 * bool)
  | INT8 of (sbyte * bool)
  | FUNKY_OPERATOR_NAME of (string)
  | ADJACENT_PREFIX_PLUS_MINUS_OP of (string)
  | PLUS_MINUS_OP of (string)
  | INFIX_AMP_OP of (string)
  | INFIX_STAR_DIV_MOD_OP of (string)
  | PREFIX_OP of (string)
  | INFIX_BAR_OP of (string)
  | INFIX_AT_HAT_OP of (string)
  | INFIX_COMPARE_OP of (string)
  | INFIX_STAR_STAR_OP of (string)
  | IDENT of (string)
  | STRING of (string)
  | BYTEARRAY of (byte[])
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_HASH_IF
    | TOKEN_HASH_ELSE
    | TOKEN_HASH_ENDIF
    | TOKEN_COMMENT
    | TOKEN_WHITESPACE
    | TOKEN_HASH_LINE
    | TOKEN_HASH_LIGHT
    | TOKEN_INACTIVECODE
    | TOKEN_LINE_COMMENT
    | TOKEN_STRING_TEXT
    | TOKEN_EOF
    | TOKEN_LEX_FAILURE
    | TOKEN_ODUMMY
    | TOKEN_OINTERFACE_MEMBER
    | TOKEN_OBLOCKEND
    | TOKEN_ORIGHT_BLOCK_END
    | TOKEN_ODECLEND
    | TOKEN_OEND
    | TOKEN_OBLOCKSEP
    | TOKEN_OBLOCKBEGIN
    | TOKEN_ORESET
    | TOKEN_OFUN
    | TOKEN_OFUNCTION
    | TOKEN_OWITH
    | TOKEN_OELSE
    | TOKEN_OTHEN
    | TOKEN_ODO_BANG
    | TOKEN_ODO
    | TOKEN_OBINDER
    | TOKEN_OLET
    | TOKEN_HIGH_PRECEDENCE_TYAPP
    | TOKEN_HIGH_PRECEDENCE_APP
    | TOKEN_EXTERN
    | TOKEN_VOID
    | TOKEN_PUBLIC
    | TOKEN_PRIVATE
    | TOKEN_INTERNAL
    | TOKEN_STATIC
    | TOKEN_MEMBER
    | TOKEN_CLASS
    | TOKEN_VIRTUAL
    | TOKEN_ABSTRACT
    | TOKEN_OVERRIDE
    | TOKEN_DEFAULT
    | TOKEN_CONSTRUCTOR
    | TOKEN_INHERIT
    | TOKEN_GREATER_RBRACK
    | TOKEN_STRUCT
    | TOKEN_SIG
    | TOKEN_BAR
    | TOKEN_RBRACK
    | TOKEN_RBRACE
    | TOKEN_MINUS
    | TOKEN_DOLLAR
    | TOKEN_LBRACE_LESS
    | TOKEN_BAR_RBRACK
    | TOKEN_GREATER_RBRACE
    | TOKEN_UNDERSCORE
    | TOKEN_SEMICOLON_SEMICOLON
    | TOKEN_LARROW
    | TOKEN_EQUALS
    | TOKEN_LBRACK
    | TOKEN_LBRACK_BAR
    | TOKEN_LBRACK_LESS
    | TOKEN_LBRACE
    | TOKEN_QMARK
    | TOKEN_QMARK_QMARK
    | TOKEN_DOT
    | TOKEN_COLON
    | TOKEN_COLON_COLON
    | TOKEN_COLON_GREATER
    | TOKEN_COLON_QMARK_GREATER
    | TOKEN_COLON_QMARK
    | TOKEN_COLON_EQUALS
    | TOKEN_SEMICOLON
    | TOKEN_WHEN
    | TOKEN_WHILE
    | TOKEN_WITH
    | TOKEN_HASH
    | TOKEN_AMP
    | TOKEN_AMP_AMP
    | TOKEN_QUOTE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_STAR
    | TOKEN_COMMA
    | TOKEN_RARROW
    | TOKEN_RARROW2
    | TOKEN_GREATER_DOT
    | TOKEN_GREATER_BAR_RBRACK
    | TOKEN_LPAREN_STAR_RPAREN
    | TOKEN_OPEN
    | TOKEN_OR
    | TOKEN_REC
    | TOKEN_THEN
    | TOKEN_TO
    | TOKEN_TRUE
    | TOKEN_TRY
    | TOKEN_TYPE
    | TOKEN_VAL
    | TOKEN_INLINE
    | TOKEN_INTERFACE
    | TOKEN_INSTANCE
    | TOKEN_LAZY
    | TOKEN_MATCH
    | TOKEN_METHOD
    | TOKEN_MUTABLE
    | TOKEN_NEW
    | TOKEN_OF
    | TOKEN_EXCEPTION
    | TOKEN_FALSE
    | TOKEN_FOR
    | TOKEN_FUN
    | TOKEN_FUNCTION
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_FINALLY
    | TOKEN_DO_BANG
    | TOKEN_AND
    | TOKEN_AS
    | TOKEN_ASSERT
    | TOKEN_ASR
    | TOKEN_BEGIN
    | TOKEN_DO
    | TOKEN_DONE
    | TOKEN_DOWNTO
    | TOKEN_ELSE
    | TOKEN_ELIF
    | TOKEN_END
    | TOKEN_DOT_DOT
    | TOKEN_BAR_BAR
    | TOKEN_LESS
    | TOKEN_GREATER
    | TOKEN_UPCAST
    | TOKEN_DOWNCAST
    | TOKEN_NULL
    | TOKEN_RESERVED
    | TOKEN_MODULE
    | TOKEN_NAMESPACE
    | TOKEN_DELEGATE
    | TOKEN_CONSTRAINT
    | TOKEN_BASE
    | TOKEN_LQUOTE
    | TOKEN_RQUOTE
    | TOKEN_RQUOTE_DOT
    | TOKEN_SPLICE_SYMBOL
    | TOKEN_PERCENT_OP
    | TOKEN_BINDER
    | TOKEN_LET
    | TOKEN_YIELD
    | TOKEN_YIELD_BANG
    | TOKEN_BIGNUM
    | TOKEN_DECIMAL
    | TOKEN_CHAR
    | TOKEN_IEEE64
    | TOKEN_IEEE32
    | TOKEN_NATIVEINT
    | TOKEN_UNATIVEINT
    | TOKEN_UINT64
    | TOKEN_UINT32
    | TOKEN_UINT16
    | TOKEN_UINT8
    | TOKEN_INT64
    | TOKEN_INT32
    | TOKEN_INT32_DOT_DOT
    | TOKEN_INT16
    | TOKEN_INT8
    | TOKEN_FUNKY_OPERATOR_NAME
    | TOKEN_ADJACENT_PREFIX_PLUS_MINUS_OP
    | TOKEN_PLUS_MINUS_OP
    | TOKEN_INFIX_AMP_OP
    | TOKEN_INFIX_STAR_DIV_MOD_OP
    | TOKEN_PREFIX_OP
    | TOKEN_INFIX_BAR_OP
    | TOKEN_INFIX_AT_HAT_OP
    | TOKEN_INFIX_COMPARE_OP
    | TOKEN_INFIX_STAR_STAR_OP
    | TOKEN_IDENT
    | TOKEN_STRING
    | TOKEN_BYTEARRAY
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startsignatureFile
    | NONTERM__startimplementationFile
    | NONTERM__startinteraction
    | NONTERM_interaction
    | NONTERM_hashDirective
    | NONTERM_hashDirectiveArg
    | NONTERM_hashDirectiveArgs
    | NONTERM_interactiveTerminator
    | NONTERM_interactiveItemsTerminator
    | NONTERM_interactiveModuleDefns
    | NONTERM_interactiveExpr
    | NONTERM_interactiveHash
    | NONTERM_signatureFile
    | NONTERM_implementationFile
    | NONTERM_moduleIntro
    | NONTERM_namespaceIntro
    | NONTERM_fileNamespaceSpecs
    | NONTERM_fileNamespaceSpecList
    | NONTERM_fileNamespaceSpec
    | NONTERM_fileNamespaceImpls
    | NONTERM_fileNamespaceImplList
    | NONTERM_fileNamespaceImpl
    | NONTERM_fileModuleSpec
    | NONTERM_fileModuleImpl
    | NONTERM_moduleSpfnsPossiblyEmpty
    | NONTERM_moduleSpfns
    | NONTERM_moduleDefnsOrExprPossiblyEmpty
    | NONTERM_moduleDefnsOrExpr
    | NONTERM_moduleDefns
    | NONTERM_moduleDefnOrDirective
    | NONTERM_moduleDefn
    | NONTERM_namedModuleAbbrevBlock
    | NONTERM_namedModuleDefnBlock
    | NONTERM_wrappedNamedModuleDefn
    | NONTERM_opt_signature
    | NONTERM_tyconDefnAugmentation
    | NONTERM_moduleSpfn
    | NONTERM_valSpfn
    | NONTERM_opt_literalValue
    | NONTERM_moduleSpecBlock
    | NONTERM_opt_attributes
    | NONTERM_attributes
    | NONTERM_attributeList
    | NONTERM_attributeListElements
    | NONTERM_attribute
    | NONTERM_attributeTarget
    | NONTERM_tyconSpfns
    | NONTERM_tyconSpfn_list
    | NONTERM_tyconSpfn
    | NONTERM_tyconSpfnRhsBlock
    | NONTERM_tyconSpfnRhs
    | NONTERM_tyconClassSpfn
    | NONTERM_classSpfnBlockKindUnspecified
    | NONTERM_classSpfnBlock
    | NONTERM_classSpfnMembers
    | NONTERM_memberFlags
    | NONTERM_memberSpecFlags
    | NONTERM_classMemberSpfnGetSet
    | NONTERM_classMemberSpfnGetSetElements
    | NONTERM_classMemberSpfn
    | NONTERM_typeNameInfo
    | NONTERM_tyconDefnList
    | NONTERM_tyconDefn
    | NONTERM_tyconDefnRhsBlock
    | NONTERM_tyconDefnRhs
    | NONTERM_tyconClassDefn
    | NONTERM_classDefnBlockKindUnspecified
    | NONTERM_classDefnBlock
    | NONTERM_classDefnMembers
    | NONTERM_classDefnMemberGetSet
    | NONTERM_classDefnMemberGetSetElements
    | NONTERM_classDefnMemberGetSetElement
    | NONTERM_memberCore
    | NONTERM_abstractMemberFlags
    | NONTERM_classDefnMember
    | NONTERM_atomicPatternLongIdent
    | NONTERM_opt_access
    | NONTERM_access
    | NONTERM_opt_decl_visibility
    | NONTERM_opt_interfaceImplDefn
    | NONTERM_opt_classDefn
    | NONTERM_opt_classSpfn
    | NONTERM_inheritsDefn
    | NONTERM_optAsSpec
    | NONTERM_asSpec
    | NONTERM_optBaseSpec
    | NONTERM_baseSpec
    | NONTERM_objectImplementationBlock
    | NONTERM_objectImplementationMembers
    | NONTERM_objectImplementationMember
    | NONTERM_memberOrOverride
    | NONTERM_tyconDefnOrSpfnSimpleRepr
    | NONTERM_braceFieldDeclList
    | NONTERM_inlineAssemblyTyconRepr
    | NONTERM_classOrInterfaceOrStruct
    | NONTERM_interfaceMember
    | NONTERM_tyconNameAndTyparDecls
    | NONTERM_prefixTyparDecls
    | NONTERM_prefixTyparDeclList
    | NONTERM_typarDecl
    | NONTERM_postfixTyparDecls
    | NONTERM_explicitValTyparDeclsCore
    | NONTERM_explicitValTyparDecls
    | NONTERM_opt_explicitValTyparDecls
    | NONTERM_opt_explicitValTyparDecls2
    | NONTERM_opt_typeConstraints
    | NONTERM_typeConstraints
    | NONTERM_typeConstraint
    | NONTERM_unionRepr
    | NONTERM_barAndgrabXmlDoc
    | NONTERM_attrUnionCaseDecls
    | NONTERM_attrUnionCaseDecl
    | NONTERM_unionCaseName
    | NONTERM_firstUnionCaseDeclOfMany
    | NONTERM_firstUnionCaseDecl
    | NONTERM_unionCaseRepr
    | NONTERM_recdFieldDeclList
    | NONTERM_recdFieldDecl
    | NONTERM_fieldDecl
    | NONTERM_exconDefn
    | NONTERM_exconSpfn
    | NONTERM_exceptionAndGrabDoc
    | NONTERM_exconCore
    | NONTERM_exconIntro
    | NONTERM_exconRepr
    | NONTERM_openDecl
    | NONTERM_defnBindings
    | NONTERM_doBinding
    | NONTERM_hardwhiteLetBindings
    | NONTERM_hardwhiteDoBinding
    | NONTERM_classDefnBindings
    | NONTERM_hardwhiteDefnBindingsTerminator
    | NONTERM_cPrototype
    | NONTERM_cArgs
    | NONTERM_cMoreArgs
    | NONTERM_cArg
    | NONTERM_cType
    | NONTERM_cRetType
    | NONTERM_localBindings
    | NONTERM_more_localBindings
    | NONTERM_attr_localBinding
    | NONTERM_localBinding
    | NONTERM_typedExprWithStaticOptimizationsBlock
    | NONTERM_typedExprWithStaticOptimizations
    | NONTERM_opt_staticOptimizations
    | NONTERM_staticOptimization
    | NONTERM_staticOptimizationConditions
    | NONTERM_staticOptimizationCondition
    | NONTERM_rawconstant
    | NONTERM_constant
    | NONTERM_bindingPattern
    | NONTERM_simplePattern
    | NONTERM_simplePatternCommaList
    | NONTERM_simplePatterns
    | NONTERM_headBindingPattern
    | NONTERM_tuplePatternElements
    | NONTERM_conjPatternElements
    | NONTERM_constrPattern
    | NONTERM_atomicPatterns
    | NONTERM_atomicPattern
    | NONTERM_parenPatternBody
    | NONTERM_parenPattern
    | NONTERM_tupleParenPatternElements
    | NONTERM_conjParenPatternElements
    | NONTERM_recordPatternElements
    | NONTERM_recordPatternElementsAux
    | NONTERM_recordPatternElement
    | NONTERM_listPatternElements
    | NONTERM_typedSeqExprBlock
    | NONTERM_declExprBlock
    | NONTERM_typedSeqExprBlockR
    | NONTERM_typedSeqExpr
    | NONTERM_seqExpr
    | NONTERM_recover
    | NONTERM_declExpr
    | NONTERM_dynamicArg
    | NONTERM_monadicWhenCondition
    | NONTERM_withClauses
    | NONTERM_withPatternClauses
    | NONTERM_patternAndGuard
    | NONTERM_patternClauses
    | NONTERM_patternGuard
    | NONTERM_patternResult
    | NONTERM_ifExprCases
    | NONTERM_ifExprThen
    | NONTERM_ifExprElifs
    | NONTERM_tupleExpr
    | NONTERM_minusExpr
    | NONTERM_appExpr
    | NONTERM_argExpr
    | NONTERM_atomicExpr
    | NONTERM_atomicExprQualification
    | NONTERM_optRange
    | NONTERM_atomicExprAfterType
    | NONTERM_beginEndExpr
    | NONTERM_quoteExpr
    | NONTERM_arrayExpr
    | NONTERM_parenExpr
    | NONTERM_parenExprBody
    | NONTERM_staticallyKnownHeadTypars
    | NONTERM_braceExpr
    | NONTERM_braceExprBody
    | NONTERM_listExprElements
    | NONTERM_monadicExprInitial
    | NONTERM_rangeSequenceExpr
    | NONTERM_monadicSingleLineQualifiersThenArrowThenExprR
    | NONTERM_forLoopBinder
    | NONTERM_forLoopRange
    | NONTERM_inlineAssemblyExpr
    | NONTERM_opt_curriedArgExprs
    | NONTERM_opt_atomicExprAfterType
    | NONTERM_opt_inlineAssemblyTypeArg
    | NONTERM_opt_inlineAssemblyReturnTypes
    | NONTERM_recdExpr
    | NONTERM_recdExprBindings
    | NONTERM_objExpr
    | NONTERM_objExprBaseCall
    | NONTERM_opt_objExprBindings
    | NONTERM_objExprBindings
    | NONTERM_objExprInterfaces
    | NONTERM_opt_objExprInterfaces
    | NONTERM_objExprInterface
    | NONTERM_direction
    | NONTERM_anonLambdaExpr
    | NONTERM_anonMatchingExpr
    | NONTERM_typeWithTypeConstraints
    | NONTERM_topTypeWithTypeConstraints
    | NONTERM_opt_topReturnTypeWithTypeConstraints
    | NONTERM_topType
    | NONTERM_topTupleType
    | NONTERM_topTupleTypeElements
    | NONTERM_topAppType
    | NONTERM_polyType
    | NONTERM_typ
    | NONTERM_tupleType
    | NONTERM_tupleOrQuotTypeElements
    | NONTERM_tupleTypeElements
    | NONTERM_appTypeCon
    | NONTERM_appTypeConPower
    | NONTERM_appType
    | NONTERM_arrayTypeSuffix
    | NONTERM_appTypePrexifArguments
    | NONTERM_typeListElements
    | NONTERM_powerType
    | NONTERM_atomType
    | NONTERM_typeArgs
    | NONTERM_typeArgsActual
    | NONTERM_measurearg
    | NONTERM_measureatom
    | NONTERM_measurepower
    | NONTERM_measureseq
    | NONTERM_measure
    | NONTERM_typar
    | NONTERM_staticallyKnownHeadTypar
    | NONTERM_ident
    | NONTERM_path
    | NONTERM_opname
    | NONTERM_operatorName
    | NONTERM_barName
    | NONTERM_barNames
    | NONTERM_identop
    | NONTERM_pathop
    | NONTERM_nameop
    | NONTERM_top_sep
    | NONTERM_top_seps
    | NONTERM_itop_sep
    | NONTERM_itop_seps
    | NONTERM_opt_itop_seps
    | NONTERM_opt_top_seps
    | NONTERM_seps
    | NONTERM_decl_end
    | NONTERM_opt_decl_end
    | NONTERM_opt_ODECLEND
    | NONTERM_deprecated_opt_equals
    | NONTERM_opt_OBLOCKSEP
    | NONTERM_opt_seps
    | NONTERM_opt_rec
    | NONTERM_opt_bar
    | NONTERM_opt_inline
    | NONTERM_opt_mutable
    | NONTERM_do_or_odo
    | NONTERM_done_term
    | NONTERM_structOrBegin
    | NONTERM_sigOrBegin
    | NONTERM_colonOrEquals
    | NONTERM_opt_HASH
    | NONTERM_opt_HIGH_PRECEDENCE_APP
    | NONTERM_opt_HIGH_PRECEDENCE_TYAPP

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | HASH_IF _ -> 0 
  | HASH_ELSE _ -> 1 
  | HASH_ENDIF _ -> 2 
  | COMMENT _ -> 3 
  | WHITESPACE _ -> 4 
  | HASH_LINE _ -> 5 
  | HASH_LIGHT _ -> 6 
  | INACTIVECODE _ -> 7 
  | LINE_COMMENT _ -> 8 
  | STRING_TEXT _ -> 9 
  | EOF _ -> 10 
  | LEX_FAILURE _ -> 11 
  | ODUMMY _ -> 12 
  | OINTERFACE_MEMBER  -> 13 
  | OBLOCKEND  -> 14 
  | ORIGHT_BLOCK_END  -> 15 
  | ODECLEND  -> 16 
  | OEND  -> 17 
  | OBLOCKSEP  -> 18 
  | OBLOCKBEGIN  -> 19 
  | ORESET  -> 20 
  | OFUN  -> 21 
  | OFUNCTION  -> 22 
  | OWITH  -> 23 
  | OELSE  -> 24 
  | OTHEN  -> 25 
  | ODO_BANG  -> 26 
  | ODO  -> 27 
  | OBINDER _ -> 28 
  | OLET _ -> 29 
  | HIGH_PRECEDENCE_TYAPP  -> 30 
  | HIGH_PRECEDENCE_APP  -> 31 
  | EXTERN  -> 32 
  | VOID  -> 33 
  | PUBLIC  -> 34 
  | PRIVATE  -> 35 
  | INTERNAL  -> 36 
  | STATIC  -> 37 
  | MEMBER  -> 38 
  | CLASS  -> 39 
  | VIRTUAL  -> 40 
  | ABSTRACT  -> 41 
  | OVERRIDE  -> 42 
  | DEFAULT  -> 43 
  | CONSTRUCTOR  -> 44 
  | INHERIT  -> 45 
  | GREATER_RBRACK  -> 46 
  | STRUCT  -> 47 
  | SIG  -> 48 
  | BAR  -> 49 
  | RBRACK  -> 50 
  | RBRACE  -> 51 
  | MINUS  -> 52 
  | DOLLAR  -> 53 
  | LBRACE_LESS  -> 54 
  | BAR_RBRACK  -> 55 
  | GREATER_RBRACE  -> 56 
  | UNDERSCORE  -> 57 
  | SEMICOLON_SEMICOLON  -> 58 
  | LARROW  -> 59 
  | EQUALS  -> 60 
  | LBRACK  -> 61 
  | LBRACK_BAR  -> 62 
  | LBRACK_LESS  -> 63 
  | LBRACE  -> 64 
  | QMARK  -> 65 
  | QMARK_QMARK  -> 66 
  | DOT  -> 67 
  | COLON  -> 68 
  | COLON_COLON  -> 69 
  | COLON_GREATER  -> 70 
  | COLON_QMARK_GREATER  -> 71 
  | COLON_QMARK  -> 72 
  | COLON_EQUALS  -> 73 
  | SEMICOLON  -> 74 
  | WHEN  -> 75 
  | WHILE  -> 76 
  | WITH  -> 77 
  | HASH  -> 78 
  | AMP  -> 79 
  | AMP_AMP  -> 80 
  | QUOTE  -> 81 
  | LPAREN  -> 82 
  | RPAREN  -> 83 
  | STAR  -> 84 
  | COMMA  -> 85 
  | RARROW  -> 86 
  | RARROW2  -> 87 
  | GREATER_DOT  -> 88 
  | GREATER_BAR_RBRACK  -> 89 
  | LPAREN_STAR_RPAREN  -> 90 
  | OPEN  -> 91 
  | OR  -> 92 
  | REC  -> 93 
  | THEN  -> 94 
  | TO  -> 95 
  | TRUE  -> 96 
  | TRY  -> 97 
  | TYPE  -> 98 
  | VAL  -> 99 
  | INLINE  -> 100 
  | INTERFACE  -> 101 
  | INSTANCE  -> 102 
  | LAZY  -> 103 
  | MATCH  -> 104 
  | METHOD  -> 105 
  | MUTABLE  -> 106 
  | NEW  -> 107 
  | OF  -> 108 
  | EXCEPTION  -> 109 
  | FALSE  -> 110 
  | FOR  -> 111 
  | FUN  -> 112 
  | FUNCTION  -> 113 
  | IF  -> 114 
  | IN  -> 115 
  | FINALLY  -> 116 
  | DO_BANG  -> 117 
  | AND  -> 118 
  | AS  -> 119 
  | ASSERT  -> 120 
  | ASR  -> 121 
  | BEGIN  -> 122 
  | DO  -> 123 
  | DONE  -> 124 
  | DOWNTO  -> 125 
  | ELSE  -> 126 
  | ELIF  -> 127 
  | END  -> 128 
  | DOT_DOT  -> 129 
  | BAR_BAR  -> 130 
  | LESS  -> 131 
  | GREATER  -> 132 
  | UPCAST  -> 133 
  | DOWNCAST  -> 134 
  | NULL  -> 135 
  | RESERVED  -> 136 
  | MODULE  -> 137 
  | NAMESPACE  -> 138 
  | DELEGATE  -> 139 
  | CONSTRAINT  -> 140 
  | BASE  -> 141 
  | LQUOTE _ -> 142 
  | RQUOTE _ -> 143 
  | RQUOTE_DOT _ -> 144 
  | SPLICE_SYMBOL _ -> 145 
  | PERCENT_OP _ -> 146 
  | BINDER _ -> 147 
  | LET _ -> 148 
  | YIELD _ -> 149 
  | YIELD_BANG _ -> 150 
  | BIGNUM _ -> 151 
  | DECIMAL _ -> 152 
  | CHAR _ -> 153 
  | IEEE64 _ -> 154 
  | IEEE32 _ -> 155 
  | NATIVEINT _ -> 156 
  | UNATIVEINT _ -> 157 
  | UINT64 _ -> 158 
  | UINT32 _ -> 159 
  | UINT16 _ -> 160 
  | UINT8 _ -> 161 
  | INT64 _ -> 162 
  | INT32 _ -> 163 
  | INT32_DOT_DOT _ -> 164 
  | INT16 _ -> 165 
  | INT8 _ -> 166 
  | FUNKY_OPERATOR_NAME _ -> 167 
  | ADJACENT_PREFIX_PLUS_MINUS_OP _ -> 168 
  | PLUS_MINUS_OP _ -> 169 
  | INFIX_AMP_OP _ -> 170 
  | INFIX_STAR_DIV_MOD_OP _ -> 171 
  | PREFIX_OP _ -> 172 
  | INFIX_BAR_OP _ -> 173 
  | INFIX_AT_HAT_OP _ -> 174 
  | INFIX_COMPARE_OP _ -> 175 
  | INFIX_STAR_STAR_OP _ -> 176 
  | IDENT _ -> 177 
  | STRING _ -> 178 
  | BYTEARRAY _ -> 179 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_HASH_IF 
  | 1 -> TOKEN_HASH_ELSE 
  | 2 -> TOKEN_HASH_ENDIF 
  | 3 -> TOKEN_COMMENT 
  | 4 -> TOKEN_WHITESPACE 
  | 5 -> TOKEN_HASH_LINE 
  | 6 -> TOKEN_HASH_LIGHT 
  | 7 -> TOKEN_INACTIVECODE 
  | 8 -> TOKEN_LINE_COMMENT 
  | 9 -> TOKEN_STRING_TEXT 
  | 10 -> TOKEN_EOF 
  | 11 -> TOKEN_LEX_FAILURE 
  | 12 -> TOKEN_ODUMMY 
  | 13 -> TOKEN_OINTERFACE_MEMBER 
  | 14 -> TOKEN_OBLOCKEND 
  | 15 -> TOKEN_ORIGHT_BLOCK_END 
  | 16 -> TOKEN_ODECLEND 
  | 17 -> TOKEN_OEND 
  | 18 -> TOKEN_OBLOCKSEP 
  | 19 -> TOKEN_OBLOCKBEGIN 
  | 20 -> TOKEN_ORESET 
  | 21 -> TOKEN_OFUN 
  | 22 -> TOKEN_OFUNCTION 
  | 23 -> TOKEN_OWITH 
  | 24 -> TOKEN_OELSE 
  | 25 -> TOKEN_OTHEN 
  | 26 -> TOKEN_ODO_BANG 
  | 27 -> TOKEN_ODO 
  | 28 -> TOKEN_OBINDER 
  | 29 -> TOKEN_OLET 
  | 30 -> TOKEN_HIGH_PRECEDENCE_TYAPP 
  | 31 -> TOKEN_HIGH_PRECEDENCE_APP 
  | 32 -> TOKEN_EXTERN 
  | 33 -> TOKEN_VOID 
  | 34 -> TOKEN_PUBLIC 
  | 35 -> TOKEN_PRIVATE 
  | 36 -> TOKEN_INTERNAL 
  | 37 -> TOKEN_STATIC 
  | 38 -> TOKEN_MEMBER 
  | 39 -> TOKEN_CLASS 
  | 40 -> TOKEN_VIRTUAL 
  | 41 -> TOKEN_ABSTRACT 
  | 42 -> TOKEN_OVERRIDE 
  | 43 -> TOKEN_DEFAULT 
  | 44 -> TOKEN_CONSTRUCTOR 
  | 45 -> TOKEN_INHERIT 
  | 46 -> TOKEN_GREATER_RBRACK 
  | 47 -> TOKEN_STRUCT 
  | 48 -> TOKEN_SIG 
  | 49 -> TOKEN_BAR 
  | 50 -> TOKEN_RBRACK 
  | 51 -> TOKEN_RBRACE 
  | 52 -> TOKEN_MINUS 
  | 53 -> TOKEN_DOLLAR 
  | 54 -> TOKEN_LBRACE_LESS 
  | 55 -> TOKEN_BAR_RBRACK 
  | 56 -> TOKEN_GREATER_RBRACE 
  | 57 -> TOKEN_UNDERSCORE 
  | 58 -> TOKEN_SEMICOLON_SEMICOLON 
  | 59 -> TOKEN_LARROW 
  | 60 -> TOKEN_EQUALS 
  | 61 -> TOKEN_LBRACK 
  | 62 -> TOKEN_LBRACK_BAR 
  | 63 -> TOKEN_LBRACK_LESS 
  | 64 -> TOKEN_LBRACE 
  | 65 -> TOKEN_QMARK 
  | 66 -> TOKEN_QMARK_QMARK 
  | 67 -> TOKEN_DOT 
  | 68 -> TOKEN_COLON 
  | 69 -> TOKEN_COLON_COLON 
  | 70 -> TOKEN_COLON_GREATER 
  | 71 -> TOKEN_COLON_QMARK_GREATER 
  | 72 -> TOKEN_COLON_QMARK 
  | 73 -> TOKEN_COLON_EQUALS 
  | 74 -> TOKEN_SEMICOLON 
  | 75 -> TOKEN_WHEN 
  | 76 -> TOKEN_WHILE 
  | 77 -> TOKEN_WITH 
  | 78 -> TOKEN_HASH 
  | 79 -> TOKEN_AMP 
  | 80 -> TOKEN_AMP_AMP 
  | 81 -> TOKEN_QUOTE 
  | 82 -> TOKEN_LPAREN 
  | 83 -> TOKEN_RPAREN 
  | 84 -> TOKEN_STAR 
  | 85 -> TOKEN_COMMA 
  | 86 -> TOKEN_RARROW 
  | 87 -> TOKEN_RARROW2 
  | 88 -> TOKEN_GREATER_DOT 
  | 89 -> TOKEN_GREATER_BAR_RBRACK 
  | 90 -> TOKEN_LPAREN_STAR_RPAREN 
  | 91 -> TOKEN_OPEN 
  | 92 -> TOKEN_OR 
  | 93 -> TOKEN_REC 
  | 94 -> TOKEN_THEN 
  | 95 -> TOKEN_TO 
  | 96 -> TOKEN_TRUE 
  | 97 -> TOKEN_TRY 
  | 98 -> TOKEN_TYPE 
  | 99 -> TOKEN_VAL 
  | 100 -> TOKEN_INLINE 
  | 101 -> TOKEN_INTERFACE 
  | 102 -> TOKEN_INSTANCE 
  | 103 -> TOKEN_LAZY 
  | 104 -> TOKEN_MATCH 
  | 105 -> TOKEN_METHOD 
  | 106 -> TOKEN_MUTABLE 
  | 107 -> TOKEN_NEW 
  | 108 -> TOKEN_OF 
  | 109 -> TOKEN_EXCEPTION 
  | 110 -> TOKEN_FALSE 
  | 111 -> TOKEN_FOR 
  | 112 -> TOKEN_FUN 
  | 113 -> TOKEN_FUNCTION 
  | 114 -> TOKEN_IF 
  | 115 -> TOKEN_IN 
  | 116 -> TOKEN_FINALLY 
  | 117 -> TOKEN_DO_BANG 
  | 118 -> TOKEN_AND 
  | 119 -> TOKEN_AS 
  | 120 -> TOKEN_ASSERT 
  | 121 -> TOKEN_ASR 
  | 122 -> TOKEN_BEGIN 
  | 123 -> TOKEN_DO 
  | 124 -> TOKEN_DONE 
  | 125 -> TOKEN_DOWNTO 
  | 126 -> TOKEN_ELSE 
  | 127 -> TOKEN_ELIF 
  | 128 -> TOKEN_END 
  | 129 -> TOKEN_DOT_DOT 
  | 130 -> TOKEN_BAR_BAR 
  | 131 -> TOKEN_LESS 
  | 132 -> TOKEN_GREATER 
  | 133 -> TOKEN_UPCAST 
  | 134 -> TOKEN_DOWNCAST 
  | 135 -> TOKEN_NULL 
  | 136 -> TOKEN_RESERVED 
  | 137 -> TOKEN_MODULE 
  | 138 -> TOKEN_NAMESPACE 
  | 139 -> TOKEN_DELEGATE 
  | 140 -> TOKEN_CONSTRAINT 
  | 141 -> TOKEN_BASE 
  | 142 -> TOKEN_LQUOTE 
  | 143 -> TOKEN_RQUOTE 
  | 144 -> TOKEN_RQUOTE_DOT 
  | 145 -> TOKEN_SPLICE_SYMBOL 
  | 146 -> TOKEN_PERCENT_OP 
  | 147 -> TOKEN_BINDER 
  | 148 -> TOKEN_LET 
  | 149 -> TOKEN_YIELD 
  | 150 -> TOKEN_YIELD_BANG 
  | 151 -> TOKEN_BIGNUM 
  | 152 -> TOKEN_DECIMAL 
  | 153 -> TOKEN_CHAR 
  | 154 -> TOKEN_IEEE64 
  | 155 -> TOKEN_IEEE32 
  | 156 -> TOKEN_NATIVEINT 
  | 157 -> TOKEN_UNATIVEINT 
  | 158 -> TOKEN_UINT64 
  | 159 -> TOKEN_UINT32 
  | 160 -> TOKEN_UINT16 
  | 161 -> TOKEN_UINT8 
  | 162 -> TOKEN_INT64 
  | 163 -> TOKEN_INT32 
  | 164 -> TOKEN_INT32_DOT_DOT 
  | 165 -> TOKEN_INT16 
  | 166 -> TOKEN_INT8 
  | 167 -> TOKEN_FUNKY_OPERATOR_NAME 
  | 168 -> TOKEN_ADJACENT_PREFIX_PLUS_MINUS_OP 
  | 169 -> TOKEN_PLUS_MINUS_OP 
  | 170 -> TOKEN_INFIX_AMP_OP 
  | 171 -> TOKEN_INFIX_STAR_DIV_MOD_OP 
  | 172 -> TOKEN_PREFIX_OP 
  | 173 -> TOKEN_INFIX_BAR_OP 
  | 174 -> TOKEN_INFIX_AT_HAT_OP 
  | 175 -> TOKEN_INFIX_COMPARE_OP 
  | 176 -> TOKEN_INFIX_STAR_STAR_OP 
  | 177 -> TOKEN_IDENT 
  | 178 -> TOKEN_STRING 
  | 179 -> TOKEN_BYTEARRAY 
  | 182 -> TOKEN_end_of_input
  | 180 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startsignatureFile 
    | 1 -> NONTERM__startimplementationFile 
    | 2 -> NONTERM__startinteraction 
    | 3 -> NONTERM_interaction 
    | 4 -> NONTERM_interaction 
    | 5 -> NONTERM_interaction 
    | 6 -> NONTERM_hashDirective 
    | 7 -> NONTERM_hashDirectiveArg 
    | 8 -> NONTERM_hashDirectiveArgs 
    | 9 -> NONTERM_hashDirectiveArgs 
    | 10 -> NONTERM_interactiveTerminator 
    | 11 -> NONTERM_interactiveTerminator 
    | 12 -> NONTERM_interactiveItemsTerminator 
    | 13 -> NONTERM_interactiveItemsTerminator 
    | 14 -> NONTERM_interactiveItemsTerminator 
    | 15 -> NONTERM_interactiveItemsTerminator 
    | 16 -> NONTERM_interactiveItemsTerminator 
    | 17 -> NONTERM_interactiveItemsTerminator 
    | 18 -> NONTERM_interactiveItemsTerminator 
    | 19 -> NONTERM_interactiveModuleDefns 
    | 20 -> NONTERM_interactiveModuleDefns 
    | 21 -> NONTERM_interactiveExpr 
    | 22 -> NONTERM_interactiveHash 
    | 23 -> NONTERM_signatureFile 
    | 24 -> NONTERM_signatureFile 
    | 25 -> NONTERM_signatureFile 
    | 26 -> NONTERM_implementationFile 
    | 27 -> NONTERM_implementationFile 
    | 28 -> NONTERM_implementationFile 
    | 29 -> NONTERM_moduleIntro 
    | 30 -> NONTERM_namespaceIntro 
    | 31 -> NONTERM_fileNamespaceSpecs 
    | 32 -> NONTERM_fileNamespaceSpecs 
    | 33 -> NONTERM_fileNamespaceSpecList 
    | 34 -> NONTERM_fileNamespaceSpecList 
    | 35 -> NONTERM_fileNamespaceSpec 
    | 36 -> NONTERM_fileNamespaceImpls 
    | 37 -> NONTERM_fileNamespaceImpls 
    | 38 -> NONTERM_fileNamespaceImplList 
    | 39 -> NONTERM_fileNamespaceImplList 
    | 40 -> NONTERM_fileNamespaceImpl 
    | 41 -> NONTERM_fileModuleSpec 
    | 42 -> NONTERM_fileModuleSpec 
    | 43 -> NONTERM_fileModuleImpl 
    | 44 -> NONTERM_fileModuleImpl 
    | 45 -> NONTERM_moduleSpfnsPossiblyEmpty 
    | 46 -> NONTERM_moduleSpfnsPossiblyEmpty 
    | 47 -> NONTERM_moduleSpfnsPossiblyEmpty 
    | 48 -> NONTERM_moduleSpfns 
    | 49 -> NONTERM_moduleSpfns 
    | 50 -> NONTERM_moduleSpfns 
    | 51 -> NONTERM_moduleDefnsOrExprPossiblyEmpty 
    | 52 -> NONTERM_moduleDefnsOrExprPossiblyEmpty 
    | 53 -> NONTERM_moduleDefnsOrExpr 
    | 54 -> NONTERM_moduleDefnsOrExpr 
    | 55 -> NONTERM_moduleDefnsOrExpr 
    | 56 -> NONTERM_moduleDefnsOrExpr 
    | 57 -> NONTERM_moduleDefnsOrExpr 
    | 58 -> NONTERM_moduleDefns 
    | 59 -> NONTERM_moduleDefns 
    | 60 -> NONTERM_moduleDefns 
    | 61 -> NONTERM_moduleDefns 
    | 62 -> NONTERM_moduleDefns 
    | 63 -> NONTERM_moduleDefnOrDirective 
    | 64 -> NONTERM_moduleDefnOrDirective 
    | 65 -> NONTERM_moduleDefn 
    | 66 -> NONTERM_moduleDefn 
    | 67 -> NONTERM_moduleDefn 
    | 68 -> NONTERM_moduleDefn 
    | 69 -> NONTERM_moduleDefn 
    | 70 -> NONTERM_moduleDefn 
    | 71 -> NONTERM_moduleDefn 
    | 72 -> NONTERM_moduleDefn 
    | 73 -> NONTERM_namedModuleAbbrevBlock 
    | 74 -> NONTERM_namedModuleAbbrevBlock 
    | 75 -> NONTERM_namedModuleDefnBlock 
    | 76 -> NONTERM_namedModuleDefnBlock 
    | 77 -> NONTERM_namedModuleDefnBlock 
    | 78 -> NONTERM_namedModuleDefnBlock 
    | 79 -> NONTERM_namedModuleDefnBlock 
    | 80 -> NONTERM_namedModuleDefnBlock 
    | 81 -> NONTERM_wrappedNamedModuleDefn 
    | 82 -> NONTERM_wrappedNamedModuleDefn 
    | 83 -> NONTERM_wrappedNamedModuleDefn 
    | 84 -> NONTERM_opt_signature 
    | 85 -> NONTERM_opt_signature 
    | 86 -> NONTERM_opt_signature 
    | 87 -> NONTERM_tyconDefnAugmentation 
    | 88 -> NONTERM_moduleSpfn 
    | 89 -> NONTERM_moduleSpfn 
    | 90 -> NONTERM_moduleSpfn 
    | 91 -> NONTERM_moduleSpfn 
    | 92 -> NONTERM_moduleSpfn 
    | 93 -> NONTERM_moduleSpfn 
    | 94 -> NONTERM_moduleSpfn 
    | 95 -> NONTERM_valSpfn 
    | 96 -> NONTERM_opt_literalValue 
    | 97 -> NONTERM_opt_literalValue 
    | 98 -> NONTERM_moduleSpecBlock 
    | 99 -> NONTERM_moduleSpecBlock 
    | 100 -> NONTERM_moduleSpecBlock 
    | 101 -> NONTERM_opt_attributes 
    | 102 -> NONTERM_opt_attributes 
    | 103 -> NONTERM_attributes 
    | 104 -> NONTERM_attributes 
    | 105 -> NONTERM_attributeList 
    | 106 -> NONTERM_attributeListElements 
    | 107 -> NONTERM_attributeListElements 
    | 108 -> NONTERM_attribute 
    | 109 -> NONTERM_attribute 
    | 110 -> NONTERM_attributeTarget 
    | 111 -> NONTERM_attributeTarget 
    | 112 -> NONTERM_attributeTarget 
    | 113 -> NONTERM_attributeTarget 
    | 114 -> NONTERM_tyconSpfns 
    | 115 -> NONTERM_tyconSpfn_list 
    | 116 -> NONTERM_tyconSpfn_list 
    | 117 -> NONTERM_tyconSpfn 
    | 118 -> NONTERM_tyconSpfn 
    | 119 -> NONTERM_tyconSpfnRhsBlock 
    | 120 -> NONTERM_tyconSpfnRhsBlock 
    | 121 -> NONTERM_tyconSpfnRhs 
    | 122 -> NONTERM_tyconSpfnRhs 
    | 123 -> NONTERM_tyconSpfnRhs 
    | 124 -> NONTERM_tyconClassSpfn 
    | 125 -> NONTERM_tyconClassSpfn 
    | 126 -> NONTERM_tyconClassSpfn 
    | 127 -> NONTERM_tyconClassSpfn 
    | 128 -> NONTERM_classSpfnBlockKindUnspecified 
    | 129 -> NONTERM_classSpfnBlockKindUnspecified 
    | 130 -> NONTERM_classSpfnBlockKindUnspecified 
    | 131 -> NONTERM_classSpfnBlockKindUnspecified 
    | 132 -> NONTERM_classSpfnBlock 
    | 133 -> NONTERM_classSpfnBlock 
    | 134 -> NONTERM_classSpfnBlock 
    | 135 -> NONTERM_classSpfnMembers 
    | 136 -> NONTERM_classSpfnMembers 
    | 137 -> NONTERM_memberFlags 
    | 138 -> NONTERM_memberFlags 
    | 139 -> NONTERM_memberFlags 
    | 140 -> NONTERM_memberFlags 
    | 141 -> NONTERM_memberFlags 
    | 142 -> NONTERM_memberFlags 
    | 143 -> NONTERM_memberSpecFlags 
    | 144 -> NONTERM_memberSpecFlags 
    | 145 -> NONTERM_memberSpecFlags 
    | 146 -> NONTERM_classMemberSpfnGetSet 
    | 147 -> NONTERM_classMemberSpfnGetSet 
    | 148 -> NONTERM_classMemberSpfnGetSet 
    | 149 -> NONTERM_classMemberSpfnGetSet 
    | 150 -> NONTERM_classMemberSpfnGetSetElements 
    | 151 -> NONTERM_classMemberSpfnGetSetElements 
    | 152 -> NONTERM_classMemberSpfn 
    | 153 -> NONTERM_classMemberSpfn 
    | 154 -> NONTERM_classMemberSpfn 
    | 155 -> NONTERM_classMemberSpfn 
    | 156 -> NONTERM_classMemberSpfn 
    | 157 -> NONTERM_classMemberSpfn 
    | 158 -> NONTERM_classMemberSpfn 
    | 159 -> NONTERM_typeNameInfo 
    | 160 -> NONTERM_tyconDefnList 
    | 161 -> NONTERM_tyconDefnList 
    | 162 -> NONTERM_tyconDefn 
    | 163 -> NONTERM_tyconDefn 
    | 164 -> NONTERM_tyconDefn 
    | 165 -> NONTERM_tyconDefnRhsBlock 
    | 166 -> NONTERM_tyconDefnRhsBlock 
    | 167 -> NONTERM_tyconDefnRhs 
    | 168 -> NONTERM_tyconDefnRhs 
    | 169 -> NONTERM_tyconDefnRhs 
    | 170 -> NONTERM_tyconClassDefn 
    | 171 -> NONTERM_tyconClassDefn 
    | 172 -> NONTERM_tyconClassDefn 
    | 173 -> NONTERM_tyconClassDefn 
    | 174 -> NONTERM_classDefnBlockKindUnspecified 
    | 175 -> NONTERM_classDefnBlockKindUnspecified 
    | 176 -> NONTERM_classDefnBlock 
    | 177 -> NONTERM_classDefnBlock 
    | 178 -> NONTERM_classDefnBlock 
    | 179 -> NONTERM_classDefnMembers 
    | 180 -> NONTERM_classDefnMembers 
    | 181 -> NONTERM_classDefnMembers 
    | 182 -> NONTERM_classDefnMemberGetSet 
    | 183 -> NONTERM_classDefnMemberGetSet 
    | 184 -> NONTERM_classDefnMemberGetSet 
    | 185 -> NONTERM_classDefnMemberGetSetElements 
    | 186 -> NONTERM_classDefnMemberGetSetElements 
    | 187 -> NONTERM_classDefnMemberGetSetElement 
    | 188 -> NONTERM_memberCore 
    | 189 -> NONTERM_memberCore 
    | 190 -> NONTERM_abstractMemberFlags 
    | 191 -> NONTERM_abstractMemberFlags 
    | 192 -> NONTERM_classDefnMember 
    | 193 -> NONTERM_classDefnMember 
    | 194 -> NONTERM_classDefnMember 
    | 195 -> NONTERM_classDefnMember 
    | 196 -> NONTERM_classDefnMember 
    | 197 -> NONTERM_classDefnMember 
    | 198 -> NONTERM_classDefnMember 
    | 199 -> NONTERM_classDefnMember 
    | 200 -> NONTERM_classDefnMember 
    | 201 -> NONTERM_classDefnMember 
    | 202 -> NONTERM_atomicPatternLongIdent 
    | 203 -> NONTERM_atomicPatternLongIdent 
    | 204 -> NONTERM_opt_access 
    | 205 -> NONTERM_opt_access 
    | 206 -> NONTERM_access 
    | 207 -> NONTERM_access 
    | 208 -> NONTERM_access 
    | 209 -> NONTERM_opt_decl_visibility 
    | 210 -> NONTERM_opt_decl_visibility 
    | 211 -> NONTERM_opt_interfaceImplDefn 
    | 212 -> NONTERM_opt_interfaceImplDefn 
    | 213 -> NONTERM_opt_classDefn 
    | 214 -> NONTERM_opt_classDefn 
    | 215 -> NONTERM_opt_classSpfn 
    | 216 -> NONTERM_opt_classSpfn 
    | 217 -> NONTERM_inheritsDefn 
    | 218 -> NONTERM_inheritsDefn 
    | 219 -> NONTERM_optAsSpec 
    | 220 -> NONTERM_optAsSpec 
    | 221 -> NONTERM_asSpec 
    | 222 -> NONTERM_optBaseSpec 
    | 223 -> NONTERM_optBaseSpec 
    | 224 -> NONTERM_baseSpec 
    | 225 -> NONTERM_baseSpec 
    | 226 -> NONTERM_objectImplementationBlock 
    | 227 -> NONTERM_objectImplementationBlock 
    | 228 -> NONTERM_objectImplementationBlock 
    | 229 -> NONTERM_objectImplementationMembers 
    | 230 -> NONTERM_objectImplementationMembers 
    | 231 -> NONTERM_objectImplementationMember 
    | 232 -> NONTERM_objectImplementationMember 
    | 233 -> NONTERM_memberOrOverride 
    | 234 -> NONTERM_memberOrOverride 
    | 235 -> NONTERM_tyconDefnOrSpfnSimpleRepr 
    | 236 -> NONTERM_tyconDefnOrSpfnSimpleRepr 
    | 237 -> NONTERM_tyconDefnOrSpfnSimpleRepr 
    | 238 -> NONTERM_tyconDefnOrSpfnSimpleRepr 
    | 239 -> NONTERM_braceFieldDeclList 
    | 240 -> NONTERM_braceFieldDeclList 
    | 241 -> NONTERM_braceFieldDeclList 
    | 242 -> NONTERM_inlineAssemblyTyconRepr 
    | 243 -> NONTERM_classOrInterfaceOrStruct 
    | 244 -> NONTERM_classOrInterfaceOrStruct 
    | 245 -> NONTERM_classOrInterfaceOrStruct 
    | 246 -> NONTERM_interfaceMember 
    | 247 -> NONTERM_interfaceMember 
    | 248 -> NONTERM_tyconNameAndTyparDecls 
    | 249 -> NONTERM_tyconNameAndTyparDecls 
    | 250 -> NONTERM_tyconNameAndTyparDecls 
    | 251 -> NONTERM_prefixTyparDecls 
    | 252 -> NONTERM_prefixTyparDecls 
    | 253 -> NONTERM_prefixTyparDeclList 
    | 254 -> NONTERM_prefixTyparDeclList 
    | 255 -> NONTERM_typarDecl 
    | 256 -> NONTERM_postfixTyparDecls 
    | 257 -> NONTERM_explicitValTyparDeclsCore 
    | 258 -> NONTERM_explicitValTyparDeclsCore 
    | 259 -> NONTERM_explicitValTyparDeclsCore 
    | 260 -> NONTERM_explicitValTyparDeclsCore 
    | 261 -> NONTERM_explicitValTyparDecls 
    | 262 -> NONTERM_opt_explicitValTyparDecls 
    | 263 -> NONTERM_opt_explicitValTyparDecls 
    | 264 -> NONTERM_opt_explicitValTyparDecls2 
    | 265 -> NONTERM_opt_explicitValTyparDecls2 
    | 266 -> NONTERM_opt_typeConstraints 
    | 267 -> NONTERM_opt_typeConstraints 
    | 268 -> NONTERM_typeConstraints 
    | 269 -> NONTERM_typeConstraints 
    | 270 -> NONTERM_typeConstraint 
    | 271 -> NONTERM_typeConstraint 
    | 272 -> NONTERM_typeConstraint 
    | 273 -> NONTERM_typeConstraint 
    | 274 -> NONTERM_typeConstraint 
    | 275 -> NONTERM_typeConstraint 
    | 276 -> NONTERM_typeConstraint 
    | 277 -> NONTERM_typeConstraint 
    | 278 -> NONTERM_typeConstraint 
    | 279 -> NONTERM_unionRepr 
    | 280 -> NONTERM_unionRepr 
    | 281 -> NONTERM_unionRepr 
    | 282 -> NONTERM_barAndgrabXmlDoc 
    | 283 -> NONTERM_attrUnionCaseDecls 
    | 284 -> NONTERM_attrUnionCaseDecls 
    | 285 -> NONTERM_attrUnionCaseDecl 
    | 286 -> NONTERM_attrUnionCaseDecl 
    | 287 -> NONTERM_attrUnionCaseDecl 
    | 288 -> NONTERM_attrUnionCaseDecl 
    | 289 -> NONTERM_unionCaseName 
    | 290 -> NONTERM_unionCaseName 
    | 291 -> NONTERM_unionCaseName 
    | 292 -> NONTERM_firstUnionCaseDeclOfMany 
    | 293 -> NONTERM_firstUnionCaseDeclOfMany 
    | 294 -> NONTERM_firstUnionCaseDeclOfMany 
    | 295 -> NONTERM_firstUnionCaseDecl 
    | 296 -> NONTERM_firstUnionCaseDecl 
    | 297 -> NONTERM_unionCaseRepr 
    | 298 -> NONTERM_unionCaseRepr 
    | 299 -> NONTERM_unionCaseRepr 
    | 300 -> NONTERM_recdFieldDeclList 
    | 301 -> NONTERM_recdFieldDeclList 
    | 302 -> NONTERM_recdFieldDecl 
    | 303 -> NONTERM_fieldDecl 
    | 304 -> NONTERM_exconDefn 
    | 305 -> NONTERM_exconSpfn 
    | 306 -> NONTERM_exceptionAndGrabDoc 
    | 307 -> NONTERM_exconCore 
    | 308 -> NONTERM_exconIntro 
    | 309 -> NONTERM_exconIntro 
    | 310 -> NONTERM_exconRepr 
    | 311 -> NONTERM_exconRepr 
    | 312 -> NONTERM_openDecl 
    | 313 -> NONTERM_defnBindings 
    | 314 -> NONTERM_defnBindings 
    | 315 -> NONTERM_doBinding 
    | 316 -> NONTERM_hardwhiteLetBindings 
    | 317 -> NONTERM_hardwhiteDoBinding 
    | 318 -> NONTERM_classDefnBindings 
    | 319 -> NONTERM_classDefnBindings 
    | 320 -> NONTERM_classDefnBindings 
    | 321 -> NONTERM_classDefnBindings 
    | 322 -> NONTERM_hardwhiteDefnBindingsTerminator 
    | 323 -> NONTERM_hardwhiteDefnBindingsTerminator 
    | 324 -> NONTERM_cPrototype 
    | 325 -> NONTERM_cArgs 
    | 326 -> NONTERM_cArgs 
    | 327 -> NONTERM_cArgs 
    | 328 -> NONTERM_cMoreArgs 
    | 329 -> NONTERM_cMoreArgs 
    | 330 -> NONTERM_cArg 
    | 331 -> NONTERM_cArg 
    | 332 -> NONTERM_cType 
    | 333 -> NONTERM_cType 
    | 334 -> NONTERM_cType 
    | 335 -> NONTERM_cType 
    | 336 -> NONTERM_cType 
    | 337 -> NONTERM_cRetType 
    | 338 -> NONTERM_cRetType 
    | 339 -> NONTERM_localBindings 
    | 340 -> NONTERM_more_localBindings 
    | 341 -> NONTERM_more_localBindings 
    | 342 -> NONTERM_attr_localBinding 
    | 343 -> NONTERM_attr_localBinding 
    | 344 -> NONTERM_attr_localBinding 
    | 345 -> NONTERM_localBinding 
    | 346 -> NONTERM_localBinding 
    | 347 -> NONTERM_typedExprWithStaticOptimizationsBlock 
    | 348 -> NONTERM_typedExprWithStaticOptimizationsBlock 
    | 349 -> NONTERM_typedExprWithStaticOptimizationsBlock 
    | 350 -> NONTERM_typedExprWithStaticOptimizations 
    | 351 -> NONTERM_opt_staticOptimizations 
    | 352 -> NONTERM_opt_staticOptimizations 
    | 353 -> NONTERM_staticOptimization 
    | 354 -> NONTERM_staticOptimizationConditions 
    | 355 -> NONTERM_staticOptimizationConditions 
    | 356 -> NONTERM_staticOptimizationCondition 
    | 357 -> NONTERM_staticOptimizationCondition 
    | 358 -> NONTERM_rawconstant 
    | 359 -> NONTERM_rawconstant 
    | 360 -> NONTERM_rawconstant 
    | 361 -> NONTERM_rawconstant 
    | 362 -> NONTERM_rawconstant 
    | 363 -> NONTERM_rawconstant 
    | 364 -> NONTERM_rawconstant 
    | 365 -> NONTERM_rawconstant 
    | 366 -> NONTERM_rawconstant 
    | 367 -> NONTERM_rawconstant 
    | 368 -> NONTERM_rawconstant 
    | 369 -> NONTERM_rawconstant 
    | 370 -> NONTERM_rawconstant 
    | 371 -> NONTERM_rawconstant 
    | 372 -> NONTERM_rawconstant 
    | 373 -> NONTERM_rawconstant 
    | 374 -> NONTERM_rawconstant 
    | 375 -> NONTERM_constant 
    | 376 -> NONTERM_constant 
    | 377 -> NONTERM_bindingPattern 
    | 378 -> NONTERM_simplePattern 
    | 379 -> NONTERM_simplePattern 
    | 380 -> NONTERM_simplePattern 
    | 381 -> NONTERM_simplePattern 
    | 382 -> NONTERM_simplePatternCommaList 
    | 383 -> NONTERM_simplePatternCommaList 
    | 384 -> NONTERM_simplePatterns 
    | 385 -> NONTERM_simplePatterns 
    | 386 -> NONTERM_simplePatterns 
    | 387 -> NONTERM_simplePatterns 
    | 388 -> NONTERM_simplePatterns 
    | 389 -> NONTERM_headBindingPattern 
    | 390 -> NONTERM_headBindingPattern 
    | 391 -> NONTERM_headBindingPattern 
    | 392 -> NONTERM_headBindingPattern 
    | 393 -> NONTERM_headBindingPattern 
    | 394 -> NONTERM_headBindingPattern 
    | 395 -> NONTERM_tuplePatternElements 
    | 396 -> NONTERM_tuplePatternElements 
    | 397 -> NONTERM_conjPatternElements 
    | 398 -> NONTERM_conjPatternElements 
    | 399 -> NONTERM_constrPattern 
    | 400 -> NONTERM_constrPattern 
    | 401 -> NONTERM_constrPattern 
    | 402 -> NONTERM_constrPattern 
    | 403 -> NONTERM_constrPattern 
    | 404 -> NONTERM_atomicPatterns 
    | 405 -> NONTERM_atomicPatterns 
    | 406 -> NONTERM_atomicPatterns 
    | 407 -> NONTERM_atomicPattern 
    | 408 -> NONTERM_atomicPattern 
    | 409 -> NONTERM_atomicPattern 
    | 410 -> NONTERM_atomicPattern 
    | 411 -> NONTERM_atomicPattern 
    | 412 -> NONTERM_atomicPattern 
    | 413 -> NONTERM_atomicPattern 
    | 414 -> NONTERM_atomicPattern 
    | 415 -> NONTERM_atomicPattern 
    | 416 -> NONTERM_atomicPattern 
    | 417 -> NONTERM_atomicPattern 
    | 418 -> NONTERM_atomicPattern 
    | 419 -> NONTERM_atomicPattern 
    | 420 -> NONTERM_atomicPattern 
    | 421 -> NONTERM_atomicPattern 
    | 422 -> NONTERM_atomicPattern 
    | 423 -> NONTERM_parenPatternBody 
    | 424 -> NONTERM_parenPatternBody 
    | 425 -> NONTERM_parenPattern 
    | 426 -> NONTERM_parenPattern 
    | 427 -> NONTERM_parenPattern 
    | 428 -> NONTERM_parenPattern 
    | 429 -> NONTERM_parenPattern 
    | 430 -> NONTERM_parenPattern 
    | 431 -> NONTERM_parenPattern 
    | 432 -> NONTERM_parenPattern 
    | 433 -> NONTERM_parenPattern 
    | 434 -> NONTERM_tupleParenPatternElements 
    | 435 -> NONTERM_tupleParenPatternElements 
    | 436 -> NONTERM_conjParenPatternElements 
    | 437 -> NONTERM_conjParenPatternElements 
    | 438 -> NONTERM_recordPatternElements 
    | 439 -> NONTERM_recordPatternElementsAux 
    | 440 -> NONTERM_recordPatternElementsAux 
    | 441 -> NONTERM_recordPatternElement 
    | 442 -> NONTERM_listPatternElements 
    | 443 -> NONTERM_listPatternElements 
    | 444 -> NONTERM_listPatternElements 
    | 445 -> NONTERM_typedSeqExprBlock 
    | 446 -> NONTERM_typedSeqExprBlock 
    | 447 -> NONTERM_typedSeqExprBlock 
    | 448 -> NONTERM_declExprBlock 
    | 449 -> NONTERM_declExprBlock 
    | 450 -> NONTERM_typedSeqExprBlockR 
    | 451 -> NONTERM_typedSeqExprBlockR 
    | 452 -> NONTERM_typedSeqExpr 
    | 453 -> NONTERM_typedSeqExpr 
    | 454 -> NONTERM_typedSeqExpr 
    | 455 -> NONTERM_typedSeqExpr 
    | 456 -> NONTERM_typedSeqExpr 
    | 457 -> NONTERM_seqExpr 
    | 458 -> NONTERM_seqExpr 
    | 459 -> NONTERM_seqExpr 
    | 460 -> NONTERM_seqExpr 
    | 461 -> NONTERM_seqExpr 
    | 462 -> NONTERM_recover 
    | 463 -> NONTERM_recover 
    | 464 -> NONTERM_declExpr 
    | 465 -> NONTERM_declExpr 
    | 466 -> NONTERM_declExpr 
    | 467 -> NONTERM_declExpr 
    | 468 -> NONTERM_declExpr 
    | 469 -> NONTERM_declExpr 
    | 470 -> NONTERM_declExpr 
    | 471 -> NONTERM_declExpr 
    | 472 -> NONTERM_declExpr 
    | 473 -> NONTERM_declExpr 
    | 474 -> NONTERM_declExpr 
    | 475 -> NONTERM_declExpr 
    | 476 -> NONTERM_declExpr 
    | 477 -> NONTERM_declExpr 
    | 478 -> NONTERM_declExpr 
    | 479 -> NONTERM_declExpr 
    | 480 -> NONTERM_declExpr 
    | 481 -> NONTERM_declExpr 
    | 482 -> NONTERM_declExpr 
    | 483 -> NONTERM_declExpr 
    | 484 -> NONTERM_declExpr 
    | 485 -> NONTERM_declExpr 
    | 486 -> NONTERM_declExpr 
    | 487 -> NONTERM_declExpr 
    | 488 -> NONTERM_declExpr 
    | 489 -> NONTERM_declExpr 
    | 490 -> NONTERM_declExpr 
    | 491 -> NONTERM_declExpr 
    | 492 -> NONTERM_declExpr 
    | 493 -> NONTERM_declExpr 
    | 494 -> NONTERM_declExpr 
    | 495 -> NONTERM_declExpr 
    | 496 -> NONTERM_declExpr 
    | 497 -> NONTERM_declExpr 
    | 498 -> NONTERM_declExpr 
    | 499 -> NONTERM_declExpr 
    | 500 -> NONTERM_declExpr 
    | 501 -> NONTERM_declExpr 
    | 502 -> NONTERM_declExpr 
    | 503 -> NONTERM_declExpr 
    | 504 -> NONTERM_declExpr 
    | 505 -> NONTERM_declExpr 
    | 506 -> NONTERM_declExpr 
    | 507 -> NONTERM_declExpr 
    | 508 -> NONTERM_declExpr 
    | 509 -> NONTERM_declExpr 
    | 510 -> NONTERM_declExpr 
    | 511 -> NONTERM_declExpr 
    | 512 -> NONTERM_declExpr 
    | 513 -> NONTERM_declExpr 
    | 514 -> NONTERM_declExpr 
    | 515 -> NONTERM_declExpr 
    | 516 -> NONTERM_declExpr 
    | 517 -> NONTERM_declExpr 
    | 518 -> NONTERM_declExpr 
    | 519 -> NONTERM_declExpr 
    | 520 -> NONTERM_declExpr 
    | 521 -> NONTERM_declExpr 
    | 522 -> NONTERM_declExpr 
    | 523 -> NONTERM_declExpr 
    | 524 -> NONTERM_declExpr 
    | 525 -> NONTERM_declExpr 
    | 526 -> NONTERM_declExpr 
    | 527 -> NONTERM_declExpr 
    | 528 -> NONTERM_declExpr 
    | 529 -> NONTERM_declExpr 
    | 530 -> NONTERM_dynamicArg 
    | 531 -> NONTERM_dynamicArg 
    | 532 -> NONTERM_monadicWhenCondition 
    | 533 -> NONTERM_withClauses 
    | 534 -> NONTERM_withClauses 
    | 535 -> NONTERM_withClauses 
    | 536 -> NONTERM_withPatternClauses 
    | 537 -> NONTERM_withPatternClauses 
    | 538 -> NONTERM_withPatternClauses 
    | 539 -> NONTERM_withPatternClauses 
    | 540 -> NONTERM_patternAndGuard 
    | 541 -> NONTERM_patternClauses 
    | 542 -> NONTERM_patternClauses 
    | 543 -> NONTERM_patternClauses 
    | 544 -> NONTERM_patternClauses 
    | 545 -> NONTERM_patternGuard 
    | 546 -> NONTERM_patternGuard 
    | 547 -> NONTERM_patternResult 
    | 548 -> NONTERM_ifExprCases 
    | 549 -> NONTERM_ifExprThen 
    | 550 -> NONTERM_ifExprThen 
    | 551 -> NONTERM_ifExprThen 
    | 552 -> NONTERM_ifExprElifs 
    | 553 -> NONTERM_ifExprElifs 
    | 554 -> NONTERM_ifExprElifs 
    | 555 -> NONTERM_ifExprElifs 
    | 556 -> NONTERM_ifExprElifs 
    | 557 -> NONTERM_tupleExpr 
    | 558 -> NONTERM_tupleExpr 
    | 559 -> NONTERM_minusExpr 
    | 560 -> NONTERM_minusExpr 
    | 561 -> NONTERM_minusExpr 
    | 562 -> NONTERM_minusExpr 
    | 563 -> NONTERM_minusExpr 
    | 564 -> NONTERM_minusExpr 
    | 565 -> NONTERM_minusExpr 
    | 566 -> NONTERM_minusExpr 
    | 567 -> NONTERM_minusExpr 
    | 568 -> NONTERM_minusExpr 
    | 569 -> NONTERM_minusExpr 
    | 570 -> NONTERM_minusExpr 
    | 571 -> NONTERM_appExpr 
    | 572 -> NONTERM_appExpr 
    | 573 -> NONTERM_argExpr 
    | 574 -> NONTERM_argExpr 
    | 575 -> NONTERM_atomicExpr 
    | 576 -> NONTERM_atomicExpr 
    | 577 -> NONTERM_atomicExpr 
    | 578 -> NONTERM_atomicExpr 
    | 579 -> NONTERM_atomicExpr 
    | 580 -> NONTERM_atomicExpr 
    | 581 -> NONTERM_atomicExpr 
    | 582 -> NONTERM_atomicExpr 
    | 583 -> NONTERM_atomicExpr 
    | 584 -> NONTERM_atomicExpr 
    | 585 -> NONTERM_atomicExpr 
    | 586 -> NONTERM_atomicExpr 
    | 587 -> NONTERM_atomicExprQualification 
    | 588 -> NONTERM_atomicExprQualification 
    | 589 -> NONTERM_atomicExprQualification 
    | 590 -> NONTERM_atomicExprQualification 
    | 591 -> NONTERM_atomicExprQualification 
    | 592 -> NONTERM_atomicExprQualification 
    | 593 -> NONTERM_atomicExprQualification 
    | 594 -> NONTERM_atomicExprQualification 
    | 595 -> NONTERM_atomicExprQualification 
    | 596 -> NONTERM_atomicExprQualification 
    | 597 -> NONTERM_optRange 
    | 598 -> NONTERM_optRange 
    | 599 -> NONTERM_optRange 
    | 600 -> NONTERM_optRange 
    | 601 -> NONTERM_atomicExprAfterType 
    | 602 -> NONTERM_atomicExprAfterType 
    | 603 -> NONTERM_atomicExprAfterType 
    | 604 -> NONTERM_atomicExprAfterType 
    | 605 -> NONTERM_atomicExprAfterType 
    | 606 -> NONTERM_atomicExprAfterType 
    | 607 -> NONTERM_atomicExprAfterType 
    | 608 -> NONTERM_atomicExprAfterType 
    | 609 -> NONTERM_atomicExprAfterType 
    | 610 -> NONTERM_beginEndExpr 
    | 611 -> NONTERM_beginEndExpr 
    | 612 -> NONTERM_beginEndExpr 
    | 613 -> NONTERM_beginEndExpr 
    | 614 -> NONTERM_quoteExpr 
    | 615 -> NONTERM_quoteExpr 
    | 616 -> NONTERM_quoteExpr 
    | 617 -> NONTERM_arrayExpr 
    | 618 -> NONTERM_arrayExpr 
    | 619 -> NONTERM_arrayExpr 
    | 620 -> NONTERM_parenExpr 
    | 621 -> NONTERM_parenExpr 
    | 622 -> NONTERM_parenExpr 
    | 623 -> NONTERM_parenExpr 
    | 624 -> NONTERM_parenExprBody 
    | 625 -> NONTERM_parenExprBody 
    | 626 -> NONTERM_parenExprBody 
    | 627 -> NONTERM_parenExprBody 
    | 628 -> NONTERM_parenExprBody 
    | 629 -> NONTERM_staticallyKnownHeadTypars 
    | 630 -> NONTERM_staticallyKnownHeadTypars 
    | 631 -> NONTERM_braceExpr 
    | 632 -> NONTERM_braceExpr 
    | 633 -> NONTERM_braceExpr 
    | 634 -> NONTERM_braceExprBody 
    | 635 -> NONTERM_braceExprBody 
    | 636 -> NONTERM_braceExprBody 
    | 637 -> NONTERM_listExprElements 
    | 638 -> NONTERM_listExprElements 
    | 639 -> NONTERM_monadicExprInitial 
    | 640 -> NONTERM_monadicExprInitial 
    | 641 -> NONTERM_rangeSequenceExpr 
    | 642 -> NONTERM_rangeSequenceExpr 
    | 643 -> NONTERM_rangeSequenceExpr 
    | 644 -> NONTERM_monadicSingleLineQualifiersThenArrowThenExprR 
    | 645 -> NONTERM_monadicSingleLineQualifiersThenArrowThenExprR 
    | 646 -> NONTERM_monadicSingleLineQualifiersThenArrowThenExprR 
    | 647 -> NONTERM_monadicSingleLineQualifiersThenArrowThenExprR 
    | 648 -> NONTERM_forLoopBinder 
    | 649 -> NONTERM_forLoopBinder 
    | 650 -> NONTERM_forLoopBinder 
    | 651 -> NONTERM_forLoopRange 
    | 652 -> NONTERM_inlineAssemblyExpr 
    | 653 -> NONTERM_opt_curriedArgExprs 
    | 654 -> NONTERM_opt_curriedArgExprs 
    | 655 -> NONTERM_opt_atomicExprAfterType 
    | 656 -> NONTERM_opt_atomicExprAfterType 
    | 657 -> NONTERM_opt_inlineAssemblyTypeArg 
    | 658 -> NONTERM_opt_inlineAssemblyTypeArg 
    | 659 -> NONTERM_opt_inlineAssemblyReturnTypes 
    | 660 -> NONTERM_opt_inlineAssemblyReturnTypes 
    | 661 -> NONTERM_opt_inlineAssemblyReturnTypes 
    | 662 -> NONTERM_recdExpr 
    | 663 -> NONTERM_recdExpr 
    | 664 -> NONTERM_recdExpr 
    | 665 -> NONTERM_recdExpr 
    | 666 -> NONTERM_recdExpr 
    | 667 -> NONTERM_recdExprBindings 
    | 668 -> NONTERM_recdExprBindings 
    | 669 -> NONTERM_objExpr 
    | 670 -> NONTERM_objExpr 
    | 671 -> NONTERM_objExpr 
    | 672 -> NONTERM_objExprBaseCall 
    | 673 -> NONTERM_objExprBaseCall 
    | 674 -> NONTERM_objExprBaseCall 
    | 675 -> NONTERM_opt_objExprBindings 
    | 676 -> NONTERM_opt_objExprBindings 
    | 677 -> NONTERM_objExprBindings 
    | 678 -> NONTERM_objExprBindings 
    | 679 -> NONTERM_objExprBindings 
    | 680 -> NONTERM_objExprInterfaces 
    | 681 -> NONTERM_opt_objExprInterfaces 
    | 682 -> NONTERM_opt_objExprInterfaces 
    | 683 -> NONTERM_opt_objExprInterfaces 
    | 684 -> NONTERM_objExprInterface 
    | 685 -> NONTERM_direction 
    | 686 -> NONTERM_direction 
    | 687 -> NONTERM_anonLambdaExpr 
    | 688 -> NONTERM_anonLambdaExpr 
    | 689 -> NONTERM_anonLambdaExpr 
    | 690 -> NONTERM_anonLambdaExpr 
    | 691 -> NONTERM_anonLambdaExpr 
    | 692 -> NONTERM_anonMatchingExpr 
    | 693 -> NONTERM_anonMatchingExpr 
    | 694 -> NONTERM_anonMatchingExpr 
    | 695 -> NONTERM_typeWithTypeConstraints 
    | 696 -> NONTERM_typeWithTypeConstraints 
    | 697 -> NONTERM_topTypeWithTypeConstraints 
    | 698 -> NONTERM_topTypeWithTypeConstraints 
    | 699 -> NONTERM_opt_topReturnTypeWithTypeConstraints 
    | 700 -> NONTERM_opt_topReturnTypeWithTypeConstraints 
    | 701 -> NONTERM_topType 
    | 702 -> NONTERM_topType 
    | 703 -> NONTERM_topTupleType 
    | 704 -> NONTERM_topTupleType 
    | 705 -> NONTERM_topTupleTypeElements 
    | 706 -> NONTERM_topTupleTypeElements 
    | 707 -> NONTERM_topAppType 
    | 708 -> NONTERM_topAppType 
    | 709 -> NONTERM_topAppType 
    | 710 -> NONTERM_topAppType 
    | 711 -> NONTERM_topAppType 
    | 712 -> NONTERM_topAppType 
    | 713 -> NONTERM_polyType 
    | 714 -> NONTERM_polyType 
    | 715 -> NONTERM_typ 
    | 716 -> NONTERM_typ 
    | 717 -> NONTERM_tupleType 
    | 718 -> NONTERM_tupleType 
    | 719 -> NONTERM_tupleType 
    | 720 -> NONTERM_tupleType 
    | 721 -> NONTERM_tupleOrQuotTypeElements 
    | 722 -> NONTERM_tupleOrQuotTypeElements 
    | 723 -> NONTERM_tupleOrQuotTypeElements 
    | 724 -> NONTERM_tupleTypeElements 
    | 725 -> NONTERM_tupleTypeElements 
    | 726 -> NONTERM_appTypeCon 
    | 727 -> NONTERM_appTypeCon 
    | 728 -> NONTERM_appTypeConPower 
    | 729 -> NONTERM_appTypeConPower 
    | 730 -> NONTERM_appType 
    | 731 -> NONTERM_appType 
    | 732 -> NONTERM_appType 
    | 733 -> NONTERM_appType 
    | 734 -> NONTERM_appType 
    | 735 -> NONTERM_appType 
    | 736 -> NONTERM_appType 
    | 737 -> NONTERM_appType 
    | 738 -> NONTERM_arrayTypeSuffix 
    | 739 -> NONTERM_arrayTypeSuffix 
    | 740 -> NONTERM_arrayTypeSuffix 
    | 741 -> NONTERM_arrayTypeSuffix 
    | 742 -> NONTERM_appTypePrexifArguments 
    | 743 -> NONTERM_typeListElements 
    | 744 -> NONTERM_typeListElements 
    | 745 -> NONTERM_powerType 
    | 746 -> NONTERM_powerType 
    | 747 -> NONTERM_powerType 
    | 748 -> NONTERM_atomType 
    | 749 -> NONTERM_atomType 
    | 750 -> NONTERM_atomType 
    | 751 -> NONTERM_atomType 
    | 752 -> NONTERM_atomType 
    | 753 -> NONTERM_atomType 
    | 754 -> NONTERM_atomType 
    | 755 -> NONTERM_atomType 
    | 756 -> NONTERM_atomType 
    | 757 -> NONTERM_atomType 
    | 758 -> NONTERM_typeArgs 
    | 759 -> NONTERM_typeArgs 
    | 760 -> NONTERM_typeArgsActual 
    | 761 -> NONTERM_typeArgsActual 
    | 762 -> NONTERM_typeArgsActual 
    | 763 -> NONTERM_measurearg 
    | 764 -> NONTERM_measurearg 
    | 765 -> NONTERM_measureatom 
    | 766 -> NONTERM_measureatom 
    | 767 -> NONTERM_measureatom 
    | 768 -> NONTERM_measurepower 
    | 769 -> NONTERM_measurepower 
    | 770 -> NONTERM_measurepower 
    | 771 -> NONTERM_measurepower 
    | 772 -> NONTERM_measureseq 
    | 773 -> NONTERM_measureseq 
    | 774 -> NONTERM_measure 
    | 775 -> NONTERM_measure 
    | 776 -> NONTERM_measure 
    | 777 -> NONTERM_measure 
    | 778 -> NONTERM_typar 
    | 779 -> NONTERM_typar 
    | 780 -> NONTERM_staticallyKnownHeadTypar 
    | 781 -> NONTERM_ident 
    | 782 -> NONTERM_path 
    | 783 -> NONTERM_path 
    | 784 -> NONTERM_path 
    | 785 -> NONTERM_opname 
    | 786 -> NONTERM_opname 
    | 787 -> NONTERM_opname 
    | 788 -> NONTERM_opname 
    | 789 -> NONTERM_operatorName 
    | 790 -> NONTERM_operatorName 
    | 791 -> NONTERM_operatorName 
    | 792 -> NONTERM_operatorName 
    | 793 -> NONTERM_operatorName 
    | 794 -> NONTERM_operatorName 
    | 795 -> NONTERM_operatorName 
    | 796 -> NONTERM_operatorName 
    | 797 -> NONTERM_operatorName 
    | 798 -> NONTERM_operatorName 
    | 799 -> NONTERM_operatorName 
    | 800 -> NONTERM_operatorName 
    | 801 -> NONTERM_operatorName 
    | 802 -> NONTERM_operatorName 
    | 803 -> NONTERM_operatorName 
    | 804 -> NONTERM_operatorName 
    | 805 -> NONTERM_operatorName 
    | 806 -> NONTERM_operatorName 
    | 807 -> NONTERM_operatorName 
    | 808 -> NONTERM_operatorName 
    | 809 -> NONTERM_operatorName 
    | 810 -> NONTERM_operatorName 
    | 811 -> NONTERM_operatorName 
    | 812 -> NONTERM_operatorName 
    | 813 -> NONTERM_operatorName 
    | 814 -> NONTERM_operatorName 
    | 815 -> NONTERM_operatorName 
    | 816 -> NONTERM_barName 
    | 817 -> NONTERM_barNames 
    | 818 -> NONTERM_barNames 
    | 819 -> NONTERM_identop 
    | 820 -> NONTERM_identop 
    | 821 -> NONTERM_pathop 
    | 822 -> NONTERM_pathop 
    | 823 -> NONTERM_pathop 
    | 824 -> NONTERM_pathop 
    | 825 -> NONTERM_nameop 
    | 826 -> NONTERM_top_sep 
    | 827 -> NONTERM_top_sep 
    | 828 -> NONTERM_top_sep 
    | 829 -> NONTERM_top_seps 
    | 830 -> NONTERM_top_seps 
    | 831 -> NONTERM_itop_sep 
    | 832 -> NONTERM_itop_sep 
    | 833 -> NONTERM_itop_seps 
    | 834 -> NONTERM_itop_seps 
    | 835 -> NONTERM_opt_itop_seps 
    | 836 -> NONTERM_opt_itop_seps 
    | 837 -> NONTERM_opt_top_seps 
    | 838 -> NONTERM_opt_top_seps 
    | 839 -> NONTERM_seps 
    | 840 -> NONTERM_seps 
    | 841 -> NONTERM_seps 
    | 842 -> NONTERM_seps 
    | 843 -> NONTERM_decl_end 
    | 844 -> NONTERM_decl_end 
    | 845 -> NONTERM_decl_end 
    | 846 -> NONTERM_opt_decl_end 
    | 847 -> NONTERM_opt_decl_end 
    | 848 -> NONTERM_opt_decl_end 
    | 849 -> NONTERM_opt_decl_end 
    | 850 -> NONTERM_opt_ODECLEND 
    | 851 -> NONTERM_opt_ODECLEND 
    | 852 -> NONTERM_deprecated_opt_equals 
    | 853 -> NONTERM_deprecated_opt_equals 
    | 854 -> NONTERM_opt_OBLOCKSEP 
    | 855 -> NONTERM_opt_OBLOCKSEP 
    | 856 -> NONTERM_opt_seps 
    | 857 -> NONTERM_opt_seps 
    | 858 -> NONTERM_opt_rec 
    | 859 -> NONTERM_opt_rec 
    | 860 -> NONTERM_opt_bar 
    | 861 -> NONTERM_opt_bar 
    | 862 -> NONTERM_opt_inline 
    | 863 -> NONTERM_opt_inline 
    | 864 -> NONTERM_opt_mutable 
    | 865 -> NONTERM_opt_mutable 
    | 866 -> NONTERM_do_or_odo 
    | 867 -> NONTERM_do_or_odo 
    | 868 -> NONTERM_done_term 
    | 869 -> NONTERM_done_term 
    | 870 -> NONTERM_structOrBegin 
    | 871 -> NONTERM_structOrBegin 
    | 872 -> NONTERM_sigOrBegin 
    | 873 -> NONTERM_sigOrBegin 
    | 874 -> NONTERM_colonOrEquals 
    | 875 -> NONTERM_colonOrEquals 
    | 876 -> NONTERM_opt_HASH 
    | 877 -> NONTERM_opt_HIGH_PRECEDENCE_APP 
    | 878 -> NONTERM_opt_HIGH_PRECEDENCE_APP 
    | 879 -> NONTERM_opt_HIGH_PRECEDENCE_TYAPP 
    | 880 -> NONTERM_opt_HIGH_PRECEDENCE_TYAPP 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 182 
let _fsyacc_tagOfErrorTerminal = 180

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | HASH_IF _ -> "HASH_IF" 
  | HASH_ELSE _ -> "HASH_ELSE" 
  | HASH_ENDIF _ -> "HASH_ENDIF" 
  | COMMENT _ -> "COMMENT" 
  | WHITESPACE _ -> "WHITESPACE" 
  | HASH_LINE _ -> "HASH_LINE" 
  | HASH_LIGHT _ -> "HASH_LIGHT" 
  | INACTIVECODE _ -> "INACTIVECODE" 
  | LINE_COMMENT _ -> "LINE_COMMENT" 
  | STRING_TEXT _ -> "STRING_TEXT" 
  | EOF _ -> "EOF" 
  | LEX_FAILURE _ -> "LEX_FAILURE" 
  | ODUMMY _ -> "ODUMMY" 
  | OINTERFACE_MEMBER  -> "OINTERFACE_MEMBER" 
  | OBLOCKEND  -> "OBLOCKEND" 
  | ORIGHT_BLOCK_END  -> "ORIGHT_BLOCK_END" 
  | ODECLEND  -> "ODECLEND" 
  | OEND  -> "OEND" 
  | OBLOCKSEP  -> "OBLOCKSEP" 
  | OBLOCKBEGIN  -> "OBLOCKBEGIN" 
  | ORESET  -> "ORESET" 
  | OFUN  -> "OFUN" 
  | OFUNCTION  -> "OFUNCTION" 
  | OWITH  -> "OWITH" 
  | OELSE  -> "OELSE" 
  | OTHEN  -> "OTHEN" 
  | ODO_BANG  -> "ODO_BANG" 
  | ODO  -> "ODO" 
  | OBINDER _ -> "OBINDER" 
  | OLET _ -> "OLET" 
  | HIGH_PRECEDENCE_TYAPP  -> "HIGH_PRECEDENCE_TYAPP" 
  | HIGH_PRECEDENCE_APP  -> "HIGH_PRECEDENCE_APP" 
  | EXTERN  -> "EXTERN" 
  | VOID  -> "VOID" 
  | PUBLIC  -> "PUBLIC" 
  | PRIVATE  -> "PRIVATE" 
  | INTERNAL  -> "INTERNAL" 
  | STATIC  -> "STATIC" 
  | MEMBER  -> "MEMBER" 
  | CLASS  -> "CLASS" 
  | VIRTUAL  -> "VIRTUAL" 
  | ABSTRACT  -> "ABSTRACT" 
  | OVERRIDE  -> "OVERRIDE" 
  | DEFAULT  -> "DEFAULT" 
  | CONSTRUCTOR  -> "CONSTRUCTOR" 
  | INHERIT  -> "INHERIT" 
  | GREATER_RBRACK  -> "GREATER_RBRACK" 
  | STRUCT  -> "STRUCT" 
  | SIG  -> "SIG" 
  | BAR  -> "BAR" 
  | RBRACK  -> "RBRACK" 
  | RBRACE  -> "RBRACE" 
  | MINUS  -> "MINUS" 
  | DOLLAR  -> "DOLLAR" 
  | LBRACE_LESS  -> "LBRACE_LESS" 
  | BAR_RBRACK  -> "BAR_RBRACK" 
  | GREATER_RBRACE  -> "GREATER_RBRACE" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | SEMICOLON_SEMICOLON  -> "SEMICOLON_SEMICOLON" 
  | LARROW  -> "LARROW" 
  | EQUALS  -> "EQUALS" 
  | LBRACK  -> "LBRACK" 
  | LBRACK_BAR  -> "LBRACK_BAR" 
  | LBRACK_LESS  -> "LBRACK_LESS" 
  | LBRACE  -> "LBRACE" 
  | QMARK  -> "QMARK" 
  | QMARK_QMARK  -> "QMARK_QMARK" 
  | DOT  -> "DOT" 
  | COLON  -> "COLON" 
  | COLON_COLON  -> "COLON_COLON" 
  | COLON_GREATER  -> "COLON_GREATER" 
  | COLON_QMARK_GREATER  -> "COLON_QMARK_GREATER" 
  | COLON_QMARK  -> "COLON_QMARK" 
  | COLON_EQUALS  -> "COLON_EQUALS" 
  | SEMICOLON  -> "SEMICOLON" 
  | WHEN  -> "WHEN" 
  | WHILE  -> "WHILE" 
  | WITH  -> "WITH" 
  | HASH  -> "HASH" 
  | AMP  -> "AMP" 
  | AMP_AMP  -> "AMP_AMP" 
  | QUOTE  -> "QUOTE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | STAR  -> "STAR" 
  | COMMA  -> "COMMA" 
  | RARROW  -> "RARROW" 
  | RARROW2  -> "RARROW2" 
  | GREATER_DOT  -> "GREATER_DOT" 
  | GREATER_BAR_RBRACK  -> "GREATER_BAR_RBRACK" 
  | LPAREN_STAR_RPAREN  -> "LPAREN_STAR_RPAREN" 
  | OPEN  -> "OPEN" 
  | OR  -> "OR" 
  | REC  -> "REC" 
  | THEN  -> "THEN" 
  | TO  -> "TO" 
  | TRUE  -> "TRUE" 
  | TRY  -> "TRY" 
  | TYPE  -> "TYPE" 
  | VAL  -> "VAL" 
  | INLINE  -> "INLINE" 
  | INTERFACE  -> "INTERFACE" 
  | INSTANCE  -> "INSTANCE" 
  | LAZY  -> "LAZY" 
  | MATCH  -> "MATCH" 
  | METHOD  -> "METHOD" 
  | MUTABLE  -> "MUTABLE" 
  | NEW  -> "NEW" 
  | OF  -> "OF" 
  | EXCEPTION  -> "EXCEPTION" 
  | FALSE  -> "FALSE" 
  | FOR  -> "FOR" 
  | FUN  -> "FUN" 
  | FUNCTION  -> "FUNCTION" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | FINALLY  -> "FINALLY" 
  | DO_BANG  -> "DO_BANG" 
  | AND  -> "AND" 
  | AS  -> "AS" 
  | ASSERT  -> "ASSERT" 
  | ASR  -> "ASR" 
  | BEGIN  -> "BEGIN" 
  | DO  -> "DO" 
  | DONE  -> "DONE" 
  | DOWNTO  -> "DOWNTO" 
  | ELSE  -> "ELSE" 
  | ELIF  -> "ELIF" 
  | END  -> "END" 
  | DOT_DOT  -> "DOT_DOT" 
  | BAR_BAR  -> "BAR_BAR" 
  | LESS  -> "LESS" 
  | GREATER  -> "GREATER" 
  | UPCAST  -> "UPCAST" 
  | DOWNCAST  -> "DOWNCAST" 
  | NULL  -> "NULL" 
  | RESERVED  -> "RESERVED" 
  | MODULE  -> "MODULE" 
  | NAMESPACE  -> "NAMESPACE" 
  | DELEGATE  -> "DELEGATE" 
  | CONSTRAINT  -> "CONSTRAINT" 
  | BASE  -> "BASE" 
  | LQUOTE _ -> "LQUOTE" 
  | RQUOTE _ -> "RQUOTE" 
  | RQUOTE_DOT _ -> "RQUOTE_DOT" 
  | SPLICE_SYMBOL _ -> "SPLICE_SYMBOL" 
  | PERCENT_OP _ -> "PERCENT_OP" 
  | BINDER _ -> "BINDER" 
  | LET _ -> "LET" 
  | YIELD _ -> "YIELD" 
  | YIELD_BANG _ -> "YIELD_BANG" 
  | BIGNUM _ -> "BIGNUM" 
  | DECIMAL _ -> "DECIMAL" 
  | CHAR _ -> "CHAR" 
  | IEEE64 _ -> "IEEE64" 
  | IEEE32 _ -> "IEEE32" 
  | NATIVEINT _ -> "NATIVEINT" 
  | UNATIVEINT _ -> "UNATIVEINT" 
  | UINT64 _ -> "UINT64" 
  | UINT32 _ -> "UINT32" 
  | UINT16 _ -> "UINT16" 
  | UINT8 _ -> "UINT8" 
  | INT64 _ -> "INT64" 
  | INT32 _ -> "INT32" 
  | INT32_DOT_DOT _ -> "INT32_DOT_DOT" 
  | INT16 _ -> "INT16" 
  | INT8 _ -> "INT8" 
  | FUNKY_OPERATOR_NAME _ -> "FUNKY_OPERATOR_NAME" 
  | ADJACENT_PREFIX_PLUS_MINUS_OP _ -> "ADJACENT_PREFIX_PLUS_MINUS_OP" 
  | PLUS_MINUS_OP _ -> "PLUS_MINUS_OP" 
  | INFIX_AMP_OP _ -> "INFIX_AMP_OP" 
  | INFIX_STAR_DIV_MOD_OP _ -> "INFIX_STAR_DIV_MOD_OP" 
  | PREFIX_OP _ -> "PREFIX_OP" 
  | INFIX_BAR_OP _ -> "INFIX_BAR_OP" 
  | INFIX_AT_HAT_OP _ -> "INFIX_AT_HAT_OP" 
  | INFIX_COMPARE_OP _ -> "INFIX_COMPARE_OP" 
  | INFIX_STAR_STAR_OP _ -> "INFIX_STAR_STAR_OP" 
  | IDENT _ -> "IDENT" 
  | STRING _ -> "STRING" 
  | BYTEARRAY _ -> "BYTEARRAY" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | HASH_IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_ENDIF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WHITESPACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_LINE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_LIGHT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INACTIVECODE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LINE_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING_TEXT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEX_FAILURE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ODUMMY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OINTERFACE_MEMBER  -> (null : System.Object) 
  | OBLOCKEND  -> (null : System.Object) 
  | ORIGHT_BLOCK_END  -> (null : System.Object) 
  | ODECLEND  -> (null : System.Object) 
  | OEND  -> (null : System.Object) 
  | OBLOCKSEP  -> (null : System.Object) 
  | OBLOCKBEGIN  -> (null : System.Object) 
  | ORESET  -> (null : System.Object) 
  | OFUN  -> (null : System.Object) 
  | OFUNCTION  -> (null : System.Object) 
  | OWITH  -> (null : System.Object) 
  | OELSE  -> (null : System.Object) 
  | OTHEN  -> (null : System.Object) 
  | ODO_BANG  -> (null : System.Object) 
  | ODO  -> (null : System.Object) 
  | OBINDER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OLET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HIGH_PRECEDENCE_TYAPP  -> (null : System.Object) 
  | HIGH_PRECEDENCE_APP  -> (null : System.Object) 
  | EXTERN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | PUBLIC  -> (null : System.Object) 
  | PRIVATE  -> (null : System.Object) 
  | INTERNAL  -> (null : System.Object) 
  | STATIC  -> (null : System.Object) 
  | MEMBER  -> (null : System.Object) 
  | CLASS  -> (null : System.Object) 
  | VIRTUAL  -> (null : System.Object) 
  | ABSTRACT  -> (null : System.Object) 
  | OVERRIDE  -> (null : System.Object) 
  | DEFAULT  -> (null : System.Object) 
  | CONSTRUCTOR  -> (null : System.Object) 
  | INHERIT  -> (null : System.Object) 
  | GREATER_RBRACK  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | SIG  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | DOLLAR  -> (null : System.Object) 
  | LBRACE_LESS  -> (null : System.Object) 
  | BAR_RBRACK  -> (null : System.Object) 
  | GREATER_RBRACE  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | SEMICOLON_SEMICOLON  -> (null : System.Object) 
  | LARROW  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | LBRACK_BAR  -> (null : System.Object) 
  | LBRACK_LESS  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | QMARK  -> (null : System.Object) 
  | QMARK_QMARK  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COLON_COLON  -> (null : System.Object) 
  | COLON_GREATER  -> (null : System.Object) 
  | COLON_QMARK_GREATER  -> (null : System.Object) 
  | COLON_QMARK  -> (null : System.Object) 
  | COLON_EQUALS  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | AMP_AMP  -> (null : System.Object) 
  | QUOTE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | RARROW2  -> (null : System.Object) 
  | GREATER_DOT  -> (null : System.Object) 
  | GREATER_BAR_RBRACK  -> (null : System.Object) 
  | LPAREN_STAR_RPAREN  -> (null : System.Object) 
  | OPEN  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | TRY  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | VAL  -> (null : System.Object) 
  | INLINE  -> (null : System.Object) 
  | INTERFACE  -> (null : System.Object) 
  | INSTANCE  -> (null : System.Object) 
  | LAZY  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | METHOD  -> (null : System.Object) 
  | MUTABLE  -> (null : System.Object) 
  | NEW  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | EXCEPTION  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | FUNCTION  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | FINALLY  -> (null : System.Object) 
  | DO_BANG  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | ASSERT  -> (null : System.Object) 
  | ASR  -> (null : System.Object) 
  | BEGIN  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | DONE  -> (null : System.Object) 
  | DOWNTO  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | ELIF  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | DOT_DOT  -> (null : System.Object) 
  | BAR_BAR  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | UPCAST  -> (null : System.Object) 
  | DOWNCAST  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | RESERVED  -> (null : System.Object) 
  | MODULE  -> (null : System.Object) 
  | NAMESPACE  -> (null : System.Object) 
  | DELEGATE  -> (null : System.Object) 
  | CONSTRAINT  -> (null : System.Object) 
  | BASE  -> (null : System.Object) 
  | LQUOTE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RQUOTE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RQUOTE_DOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SPLICE_SYMBOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PERCENT_OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BINDER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | YIELD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | YIELD_BANG _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BIGNUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DECIMAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IEEE64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IEEE32 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NATIVEINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNATIVEINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UINT64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UINT32 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UINT16 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UINT8 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT32 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT32_DOT_DOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT16 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT8 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUNKY_OPERATOR_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ADJACENT_PREFIX_PLUS_MINUS_OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS_MINUS_OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX_AMP_OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX_STAR_DIV_MOD_OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PREFIX_OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX_BAR_OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX_AT_HAT_OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX_COMPARE_OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX_STAR_STAR_OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BYTEARRAY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 4us; 5us; 22us; 65535us; 0us; 147us; 2us; 104us; 4us; 34us; 23us; 34us; 25us; 34us; 27us; 34us; 58us; 147us; 66us; 104us; 70us; 147us; 75us; 104us; 81us; 147us; 84us; 147us; 90us; 104us; 96us; 104us; 98us; 104us; 101us; 104us; 123us; 147us; 127us; 104us; 136us; 104us; 171us; 147us; 174us; 147us; 178us; 147us; 1us; 65535us; 11us; 13us; 1us; 65535us; 10us; 11us; 7us; 65535us; 4us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 16us; 25us; 16us; 27us; 16us; 4us; 65535us; 4us; 6us; 23us; 24us; 25us; 26us; 27us; 28us; 5us; 65535us; 4us; 17us; 23us; 17us; 25us; 17us; 27us; 17us; 29us; 30us; 4us; 65535us; 4us; 19us; 23us; 19us; 25us; 19us; 27us; 19us; 4us; 65535us; 4us; 21us; 23us; 21us; 25us; 21us; 27us; 21us; 1us; 65535us; 0us; 1us; 1us; 65535us; 2us; 3us; 6us; 65535us; 32us; 118us; 69us; 70us; 74us; 75us; 88us; 118us; 106us; 118us; 150us; 151us; 2us; 65535us; 56us; 57us; 64us; 65us; 1us; 65535us; 0us; 35us; 2us; 65535us; 52us; 53us; 54us; 55us; 2us; 65535us; 52us; 54us; 54us; 54us; 1us; 65535us; 2us; 41us; 2us; 65535us; 60us; 61us; 62us; 63us; 2us; 65535us; 60us; 62us; 62us; 62us; 2us; 65535us; 0us; 52us; 58us; 59us; 2us; 65535us; 2us; 60us; 66us; 67us; 5us; 65535us; 0us; 72us; 58us; 72us; 70us; 71us; 174us; 175us; 178us; 179us; 9us; 65535us; 0us; 78us; 58us; 78us; 70us; 78us; 81us; 82us; 84us; 85us; 123us; 172us; 171us; 172us; 174us; 78us; 178us; 78us; 4us; 65535us; 2us; 77us; 66us; 77us; 75us; 76us; 136us; 137us; 8us; 65535us; 2us; 86us; 66us; 86us; 75us; 86us; 90us; 91us; 98us; 99us; 101us; 102us; 127us; 130us; 136us; 86us; 9us; 65535us; 2us; 92us; 66us; 92us; 75us; 92us; 90us; 92us; 96us; 97us; 98us; 92us; 101us; 92us; 127us; 92us; 136us; 92us; 9us; 65535us; 2us; 96us; 66us; 96us; 75us; 96us; 90us; 96us; 96us; 96us; 98us; 96us; 101us; 96us; 127us; 96us; 136us; 96us; 14us; 65535us; 2us; 103us; 4us; 29us; 23us; 29us; 25us; 29us; 27us; 29us; 29us; 29us; 66us; 103us; 75us; 103us; 90us; 103us; 96us; 103us; 98us; 103us; 101us; 103us; 127us; 103us; 136us; 103us; 1us; 65535us; 152us; 153us; 1us; 65535us; 120us; 121us; 2us; 65535us; 120us; 134us; 127us; 128us; 2us; 65535us; 75us; 119us; 118us; 119us; 1us; 65535us; 115us; 116us; 9us; 65535us; 0us; 80us; 58us; 80us; 70us; 80us; 81us; 80us; 84us; 80us; 123us; 80us; 171us; 80us; 174us; 80us; 178us; 80us; 9us; 65535us; 0us; 148us; 58us; 148us; 70us; 148us; 81us; 148us; 84us; 148us; 123us; 148us; 171us; 148us; 174us; 148us; 178us; 148us; 2us; 65535us; 167us; 168us; 281us; 282us; 2us; 65535us; 141us; 142us; 152us; 154us; 83us; 65535us; 0us; 68us; 2us; 73us; 4us; 31us; 23us; 31us; 25us; 31us; 27us; 31us; 29us; 105us; 52us; 56us; 54us; 56us; 58us; 68us; 60us; 64us; 62us; 64us; 66us; 73us; 70us; 149us; 75us; 87us; 81us; 149us; 84us; 149us; 90us; 87us; 96us; 105us; 98us; 87us; 101us; 87us; 112us; 296us; 115us; 305us; 123us; 149us; 127us; 87us; 136us; 87us; 144us; 369us; 159us; 160us; 171us; 149us; 174us; 149us; 178us; 149us; 204us; 296us; 207us; 296us; 210us; 448us; 213us; 271us; 215us; 270us; 228us; 270us; 234us; 270us; 238us; 270us; 242us; 270us; 248us; 270us; 291us; 296us; 299us; 296us; 302us; 305us; 303us; 448us; 310us; 448us; 312us; 370us; 314us; 369us; 327us; 369us; 331us; 369us; 333us; 369us; 337us; 369us; 343us; 369us; 345us; 369us; 400us; 296us; 410us; 440us; 413us; 369us; 416us; 270us; 432us; 440us; 438us; 440us; 456us; 580us; 476us; 485us; 481us; 485us; 482us; 485us; 488us; 485us; 494us; 485us; 519us; 270us; 528us; 270us; 534us; 544us; 537us; 544us; 542us; 544us; 577us; 580us; 592us; 593us; 605us; 658us; 611us; 658us; 623us; 650us; 628us; 637us; 633us; 637us; 635us; 637us; 653us; 658us; 1195us; 270us; 1284us; 441us; 1286us; 658us; 118us; 65535us; 0us; 181us; 2us; 181us; 4us; 181us; 23us; 181us; 25us; 181us; 27us; 181us; 29us; 181us; 52us; 181us; 54us; 181us; 58us; 181us; 60us; 181us; 62us; 181us; 66us; 181us; 70us; 181us; 75us; 181us; 81us; 181us; 84us; 181us; 90us; 181us; 96us; 181us; 98us; 181us; 101us; 181us; 112us; 181us; 115us; 181us; 123us; 181us; 127us; 181us; 136us; 181us; 144us; 181us; 159us; 181us; 166us; 1341us; 171us; 181us; 174us; 181us; 178us; 181us; 182us; 183us; 204us; 181us; 207us; 181us; 210us; 181us; 213us; 181us; 215us; 181us; 225us; 1341us; 228us; 181us; 234us; 181us; 238us; 181us; 242us; 181us; 248us; 181us; 279us; 1341us; 291us; 181us; 294us; 1341us; 299us; 181us; 302us; 181us; 303us; 181us; 310us; 181us; 312us; 181us; 314us; 181us; 324us; 1341us; 327us; 181us; 331us; 181us; 333us; 181us; 337us; 181us; 343us; 181us; 345us; 181us; 385us; 1341us; 400us; 181us; 410us; 181us; 413us; 181us; 416us; 181us; 432us; 181us; 438us; 181us; 456us; 181us; 476us; 181us; 481us; 181us; 482us; 181us; 488us; 181us; 494us; 181us; 519us; 181us; 528us; 181us; 534us; 181us; 537us; 181us; 542us; 181us; 551us; 1341us; 577us; 181us; 592us; 181us; 605us; 181us; 611us; 181us; 623us; 181us; 628us; 181us; 633us; 181us; 635us; 181us; 653us; 181us; 716us; 716us; 717us; 716us; 719us; 716us; 764us; 806us; 767us; 806us; 779us; 806us; 801us; 806us; 806us; 806us; 807us; 806us; 811us; 806us; 812us; 806us; 813us; 806us; 814us; 806us; 821us; 806us; 823us; 806us; 903us; 806us; 1022us; 806us; 1024us; 806us; 1029us; 806us; 1036us; 806us; 1195us; 181us; 1225us; 806us; 1284us; 181us; 1286us; 181us; 1318us; 806us; 1321us; 806us; 1330us; 1341us; 1333us; 1341us; 1336us; 1341us; 1339us; 1341us; 118us; 65535us; 0us; 182us; 2us; 182us; 4us; 182us; 23us; 182us; 25us; 182us; 27us; 182us; 29us; 182us; 52us; 182us; 54us; 182us; 58us; 182us; 60us; 182us; 62us; 182us; 66us; 182us; 70us; 182us; 75us; 182us; 81us; 182us; 84us; 182us; 90us; 182us; 96us; 182us; 98us; 182us; 101us; 182us; 112us; 182us; 115us; 182us; 123us; 182us; 127us; 182us; 136us; 182us; 144us; 182us; 159us; 182us; 166us; 182us; 171us; 182us; 174us; 182us; 178us; 182us; 182us; 182us; 204us; 182us; 207us; 182us; 210us; 182us; 213us; 182us; 215us; 182us; 225us; 182us; 228us; 182us; 234us; 182us; 238us; 182us; 242us; 182us; 248us; 182us; 279us; 182us; 291us; 182us; 294us; 182us; 299us; 182us; 302us; 182us; 303us; 182us; 310us; 182us; 312us; 182us; 314us; 182us; 324us; 182us; 327us; 182us; 331us; 182us; 333us; 182us; 337us; 182us; 343us; 182us; 345us; 182us; 385us; 182us; 400us; 182us; 410us; 182us; 413us; 182us; 416us; 182us; 432us; 182us; 438us; 182us; 456us; 182us; 476us; 182us; 481us; 182us; 482us; 182us; 488us; 182us; 494us; 182us; 519us; 182us; 528us; 182us; 534us; 182us; 537us; 182us; 542us; 182us; 551us; 182us; 577us; 182us; 592us; 182us; 605us; 182us; 611us; 182us; 623us; 182us; 628us; 182us; 633us; 182us; 635us; 182us; 653us; 182us; 716us; 182us; 717us; 182us; 719us; 182us; 764us; 182us; 767us; 182us; 779us; 182us; 801us; 182us; 806us; 182us; 807us; 182us; 811us; 182us; 812us; 182us; 813us; 182us; 814us; 182us; 821us; 182us; 823us; 182us; 903us; 182us; 1022us; 182us; 1024us; 182us; 1029us; 182us; 1036us; 182us; 1195us; 182us; 1225us; 182us; 1284us; 182us; 1286us; 182us; 1318us; 182us; 1321us; 182us; 1330us; 182us; 1333us; 182us; 1336us; 182us; 1339us; 182us; 1us; 65535us; 184us; 185us; 2us; 65535us; 184us; 189us; 190us; 191us; 2us; 65535us; 184us; 195us; 190us; 195us; 2us; 65535us; 69us; 155us; 150us; 155us; 2us; 65535us; 204us; 205us; 207us; 208us; 3us; 65535us; 204us; 206us; 207us; 206us; 291us; 292us; 1us; 65535us; 210us; 211us; 2us; 65535us; 210us; 220us; 213us; 214us; 2us; 65535us; 210us; 223us; 213us; 223us; 2us; 65535us; 210us; 227us; 213us; 227us; 3us; 65535us; 228us; 229us; 238us; 239us; 416us; 417us; 8us; 65535us; 213us; 235us; 215us; 216us; 228us; 246us; 234us; 235us; 238us; 246us; 242us; 243us; 248us; 249us; 416us; 246us; 4us; 65535us; 272us; 258us; 273us; 258us; 371us; 375us; 372us; 375us; 2us; 65535us; 272us; 274us; 273us; 274us; 2us; 65535us; 280us; 281us; 386us; 387us; 2us; 65535us; 261us; 262us; 263us; 264us; 11us; 65535us; 213us; 247us; 215us; 247us; 228us; 247us; 234us; 247us; 238us; 247us; 242us; 247us; 248us; 247us; 416us; 247us; 519us; 520us; 528us; 529us; 1195us; 1196us; 6us; 65535us; 112us; 115us; 204us; 209us; 207us; 209us; 291us; 209us; 299us; 302us; 400us; 302us; 2us; 65535us; 113us; 114us; 300us; 301us; 3us; 65535us; 112us; 113us; 299us; 300us; 400us; 401us; 2us; 65535us; 303us; 304us; 310us; 311us; 3us; 65535us; 303us; 319us; 310us; 319us; 312us; 313us; 3us; 65535us; 303us; 322us; 310us; 322us; 312us; 322us; 3us; 65535us; 303us; 326us; 310us; 326us; 312us; 326us; 3us; 65535us; 144us; 145us; 327us; 328us; 413us; 414us; 10us; 65535us; 144us; 341us; 312us; 334us; 314us; 315us; 327us; 341us; 331us; 346us; 333us; 334us; 337us; 338us; 343us; 344us; 345us; 346us; 413us; 341us; 1us; 65535us; 363us; 366us; 2us; 65535us; 347us; 348us; 349us; 350us; 3us; 65535us; 347us; 353us; 349us; 353us; 354us; 355us; 2us; 65535us; 375us; 376us; 442us; 443us; 2us; 65535us; 371us; 381us; 372us; 381us; 10us; 65535us; 144us; 342us; 312us; 342us; 314us; 342us; 327us; 342us; 331us; 342us; 333us; 342us; 337us; 342us; 343us; 342us; 345us; 342us; 413us; 342us; 38us; 65535us; 356us; 746us; 361us; 746us; 394us; 774us; 662us; 746us; 737us; 746us; 738us; 746us; 742us; 746us; 743us; 746us; 744us; 746us; 745us; 746us; 747us; 774us; 749us; 774us; 754us; 774us; 756us; 774us; 764us; 746us; 767us; 746us; 779us; 746us; 801us; 746us; 806us; 746us; 807us; 746us; 811us; 746us; 812us; 746us; 813us; 746us; 814us; 746us; 821us; 746us; 823us; 746us; 903us; 746us; 928us; 746us; 934us; 746us; 1022us; 746us; 1024us; 746us; 1029us; 746us; 1036us; 746us; 1225us; 746us; 1304us; 774us; 1309us; 774us; 1318us; 746us; 1321us; 746us; 8us; 65535us; 47us; 48us; 162us; 163us; 275us; 276us; 296us; 470us; 544us; 545us; 582us; 583us; 593us; 594us; 624us; 625us; 58us; 65535us; 31us; 409us; 47us; 405us; 68us; 409us; 73us; 409us; 87us; 409us; 105us; 409us; 149us; 409us; 162us; 405us; 270us; 409us; 271us; 409us; 275us; 405us; 296us; 405us; 305us; 409us; 356us; 403us; 361us; 403us; 369us; 409us; 370us; 409us; 394us; 403us; 448us; 409us; 544us; 405us; 582us; 405us; 593us; 405us; 624us; 405us; 662us; 403us; 737us; 403us; 738us; 403us; 742us; 403us; 743us; 403us; 744us; 403us; 745us; 403us; 747us; 403us; 749us; 403us; 754us; 403us; 756us; 403us; 764us; 403us; 767us; 403us; 779us; 403us; 801us; 403us; 806us; 403us; 807us; 403us; 811us; 403us; 812us; 403us; 813us; 403us; 814us; 403us; 821us; 403us; 823us; 403us; 903us; 403us; 928us; 403us; 934us; 403us; 1022us; 403us; 1024us; 403us; 1029us; 403us; 1036us; 403us; 1225us; 403us; 1304us; 403us; 1309us; 403us; 1318us; 403us; 1321us; 403us; 12us; 65535us; 31us; 32us; 68us; 69us; 73us; 74us; 87us; 88us; 105us; 106us; 149us; 150us; 270us; 272us; 271us; 273us; 305us; 306us; 369us; 371us; 370us; 372us; 448us; 449us; 1us; 65535us; 379us; 380us; 4us; 65535us; 315us; 316us; 317us; 318us; 319us; 320us; 587us; 588us; 5us; 65535us; 209us; 212us; 216us; 217us; 218us; 219us; 220us; 221us; 589us; 590us; 2us; 65535us; 371us; 389us; 372us; 389us; 2us; 65535us; 308us; 309us; 395us; 396us; 2us; 65535us; 308us; 425us; 395us; 425us; 2us; 65535us; 420us; 421us; 423us; 424us; 3us; 65535us; 420us; 428us; 423us; 428us; 1089us; 1282us; 2us; 65535us; 410us; 411us; 1284us; 1289us; 4us; 65535us; 410us; 436us; 432us; 433us; 438us; 439us; 1284us; 436us; 4us; 65535us; 410us; 437us; 432us; 437us; 438us; 437us; 1284us; 437us; 2us; 65535us; 440us; 442us; 441us; 442us; 5us; 65535us; 210us; 222us; 213us; 222us; 303us; 321us; 310us; 321us; 312us; 321us; 6us; 65535us; 273us; 452us; 372us; 452us; 449us; 452us; 548us; 572us; 570us; 572us; 598us; 572us; 1us; 65535us; 453us; 454us; 5us; 65535us; 210us; 228us; 213us; 228us; 303us; 327us; 310us; 327us; 312us; 327us; 9us; 65535us; 272us; 283us; 273us; 283us; 371us; 378us; 372us; 378us; 1278us; 1297us; 1280us; 1297us; 1291us; 1297us; 1293us; 1297us; 1295us; 1297us; 1us; 65535us; 296us; 297us; 1us; 65535us; 470us; 472us; 3us; 65535us; 476us; 477us; 488us; 479us; 494us; 480us; 5us; 65535us; 476us; 484us; 481us; 483us; 482us; 483us; 488us; 484us; 494us; 484us; 1us; 65535us; 471us; 474us; 1us; 65535us; 494us; 495us; 4us; 65535us; 164us; 498us; 277us; 498us; 383us; 498us; 746us; 499us; 3us; 65535us; 164us; 165us; 277us; 278us; 383us; 384us; 1us; 65535us; 746us; 747us; 3us; 65535us; 297us; 298us; 479us; 489us; 495us; 496us; 3us; 65535us; 500us; 501us; 1327us; 502us; 1329us; 503us; 4us; 65535us; 500us; 506us; 504us; 505us; 1327us; 506us; 1329us; 506us; 3us; 65535us; 273us; 451us; 372us; 451us; 449us; 451us; 5us; 65535us; 273us; 534us; 372us; 534us; 449us; 534us; 536us; 537us; 541us; 542us; 3us; 65535us; 534us; 535us; 537us; 538us; 542us; 543us; 3us; 65535us; 534us; 541us; 537us; 541us; 542us; 541us; 1us; 65535us; 545us; 546us; 3us; 65535us; 273us; 536us; 372us; 536us; 449us; 536us; 3us; 65535us; 273us; 539us; 372us; 539us; 449us; 539us; 3us; 65535us; 548us; 549us; 570us; 571us; 598us; 599us; 2us; 65535us; 456us; 457us; 577us; 578us; 2us; 65535us; 456us; 576us; 577us; 576us; 5us; 65535us; 287us; 288us; 289us; 290us; 390us; 391us; 392us; 393us; 580us; 581us; 4us; 65535us; 32us; 117us; 74us; 117us; 88us; 117us; 106us; 117us; 2us; 65535us; 69us; 156us; 150us; 156us; 6us; 65535us; 32us; 592us; 69us; 592us; 74us; 592us; 88us; 592us; 106us; 592us; 150us; 592us; 6us; 65535us; 32us; 587us; 69us; 589us; 74us; 587us; 88us; 587us; 106us; 587us; 150us; 589us; 1us; 65535us; 594us; 595us; 1us; 65535us; 595us; 596us; 14us; 65535us; 2us; 122us; 4us; 122us; 23us; 122us; 25us; 122us; 27us; 122us; 29us; 122us; 66us; 122us; 75us; 122us; 90us; 122us; 96us; 122us; 98us; 122us; 101us; 122us; 127us; 122us; 136us; 122us; 110us; 65535us; 32us; 108us; 74us; 108us; 88us; 108us; 106us; 107us; 110us; 859us; 169us; 859us; 251us; 617us; 359us; 859us; 364us; 859us; 371us; 617us; 372us; 617us; 397us; 859us; 608us; 859us; 614us; 859us; 656us; 859us; 665us; 859us; 668us; 859us; 678us; 859us; 825us; 859us; 830us; 859us; 848us; 859us; 850us; 859us; 853us; 859us; 860us; 859us; 864us; 859us; 867us; 859us; 873us; 859us; 877us; 859us; 881us; 859us; 883us; 859us; 888us; 859us; 890us; 859us; 892us; 859us; 894us; 859us; 905us; 859us; 912us; 859us; 919us; 859us; 924us; 859us; 926us; 859us; 929us; 859us; 932us; 859us; 935us; 859us; 938us; 859us; 941us; 859us; 944us; 859us; 946us; 859us; 951us; 859us; 993us; 859us; 995us; 859us; 998us; 859us; 999us; 859us; 1000us; 859us; 1001us; 859us; 1002us; 859us; 1003us; 859us; 1004us; 859us; 1005us; 859us; 1006us; 859us; 1007us; 859us; 1008us; 859us; 1009us; 859us; 1010us; 859us; 1011us; 859us; 1012us; 859us; 1013us; 859us; 1014us; 859us; 1015us; 859us; 1016us; 859us; 1018us; 859us; 1021us; 859us; 1040us; 859us; 1041us; 859us; 1045us; 859us; 1047us; 859us; 1051us; 859us; 1053us; 859us; 1057us; 859us; 1059us; 859us; 1060us; 859us; 1120us; 859us; 1130us; 859us; 1137us; 859us; 1142us; 859us; 1145us; 859us; 1148us; 859us; 1151us; 859us; 1152us; 859us; 1163us; 859us; 1170us; 859us; 1171us; 859us; 1177us; 859us; 1183us; 859us; 1184us; 859us; 1185us; 859us; 1197us; 859us; 1206us; 859us; 1218us; 859us; 1219us; 859us; 1220us; 859us; 1221us; 859us; 1223us; 859us; 1232us; 859us; 1235us; 859us; 1236us; 859us; 1259us; 859us; 1264us; 859us; 1269us; 859us; 1275us; 859us; 1306us; 859us; 1311us; 859us; 7us; 65535us; 32us; 111us; 74us; 111us; 88us; 111us; 106us; 111us; 251us; 618us; 371us; 618us; 372us; 618us; 110us; 65535us; 32us; 110us; 74us; 110us; 88us; 110us; 106us; 109us; 110us; 864us; 169us; 864us; 251us; 619us; 359us; 864us; 364us; 864us; 371us; 619us; 372us; 619us; 397us; 864us; 608us; 864us; 614us; 864us; 656us; 864us; 665us; 864us; 668us; 864us; 678us; 864us; 825us; 864us; 830us; 864us; 848us; 864us; 850us; 864us; 853us; 864us; 860us; 864us; 864us; 864us; 867us; 864us; 873us; 864us; 877us; 864us; 881us; 864us; 883us; 864us; 888us; 864us; 890us; 864us; 892us; 864us; 894us; 864us; 905us; 864us; 912us; 864us; 919us; 864us; 924us; 864us; 926us; 864us; 929us; 864us; 932us; 864us; 935us; 864us; 938us; 864us; 941us; 864us; 944us; 864us; 946us; 864us; 951us; 864us; 993us; 864us; 995us; 864us; 998us; 864us; 999us; 864us; 1000us; 864us; 1001us; 864us; 1002us; 864us; 1003us; 864us; 1004us; 864us; 1005us; 864us; 1006us; 864us; 1007us; 864us; 1008us; 864us; 1009us; 864us; 1010us; 864us; 1011us; 864us; 1012us; 864us; 1013us; 864us; 1014us; 864us; 1015us; 864us; 1016us; 864us; 1018us; 864us; 1021us; 864us; 1040us; 864us; 1041us; 864us; 1045us; 864us; 1047us; 864us; 1051us; 864us; 1053us; 864us; 1057us; 864us; 1059us; 864us; 1060us; 864us; 1120us; 864us; 1130us; 864us; 1137us; 864us; 1142us; 864us; 1145us; 864us; 1148us; 864us; 1151us; 864us; 1152us; 864us; 1163us; 864us; 1170us; 864us; 1171us; 864us; 1177us; 864us; 1183us; 864us; 1184us; 864us; 1185us; 864us; 1197us; 864us; 1206us; 864us; 1218us; 864us; 1219us; 864us; 1220us; 864us; 1221us; 864us; 1223us; 864us; 1232us; 864us; 1235us; 864us; 1236us; 864us; 1259us; 864us; 1264us; 864us; 1269us; 864us; 1275us; 864us; 1306us; 864us; 1311us; 864us; 109us; 65535us; 32us; 870us; 74us; 870us; 88us; 870us; 110us; 870us; 169us; 870us; 251us; 620us; 359us; 870us; 364us; 870us; 371us; 620us; 372us; 620us; 397us; 870us; 608us; 870us; 614us; 870us; 656us; 870us; 665us; 870us; 668us; 870us; 678us; 870us; 825us; 870us; 830us; 870us; 848us; 870us; 850us; 870us; 853us; 870us; 860us; 870us; 864us; 870us; 867us; 870us; 873us; 870us; 877us; 870us; 881us; 870us; 883us; 870us; 888us; 870us; 890us; 870us; 892us; 870us; 894us; 870us; 905us; 870us; 912us; 870us; 919us; 870us; 924us; 870us; 926us; 870us; 929us; 870us; 932us; 870us; 935us; 870us; 938us; 870us; 941us; 870us; 944us; 870us; 946us; 870us; 951us; 870us; 993us; 870us; 995us; 870us; 998us; 870us; 999us; 870us; 1000us; 870us; 1001us; 870us; 1002us; 870us; 1003us; 870us; 1004us; 870us; 1005us; 870us; 1006us; 870us; 1007us; 870us; 1008us; 870us; 1009us; 870us; 1010us; 870us; 1011us; 870us; 1012us; 870us; 1013us; 870us; 1014us; 870us; 1015us; 870us; 1016us; 870us; 1018us; 870us; 1021us; 870us; 1040us; 870us; 1041us; 870us; 1045us; 870us; 1047us; 870us; 1051us; 870us; 1053us; 870us; 1057us; 870us; 1059us; 870us; 1060us; 870us; 1120us; 870us; 1130us; 870us; 1137us; 870us; 1142us; 870us; 1145us; 870us; 1148us; 870us; 1151us; 870us; 1152us; 870us; 1163us; 870us; 1170us; 870us; 1171us; 870us; 1177us; 870us; 1183us; 870us; 1184us; 870us; 1185us; 870us; 1197us; 870us; 1206us; 870us; 1218us; 870us; 1219us; 870us; 1220us; 870us; 1221us; 870us; 1223us; 870us; 1232us; 870us; 1235us; 870us; 1236us; 870us; 1259us; 870us; 1264us; 870us; 1269us; 870us; 1275us; 870us; 1306us; 870us; 1311us; 870us; 3us; 65535us; 251us; 374us; 371us; 373us; 372us; 373us; 4us; 65535us; 612us; 613us; 615us; 616us; 936us; 937us; 947us; 948us; 110us; 65535us; 32us; 607us; 74us; 607us; 88us; 607us; 106us; 607us; 110us; 607us; 169us; 607us; 251us; 607us; 359us; 607us; 364us; 607us; 371us; 607us; 372us; 607us; 397us; 607us; 608us; 607us; 614us; 607us; 656us; 607us; 665us; 607us; 668us; 607us; 678us; 607us; 825us; 607us; 830us; 607us; 848us; 607us; 850us; 607us; 853us; 607us; 860us; 607us; 864us; 607us; 867us; 607us; 873us; 607us; 877us; 607us; 881us; 607us; 883us; 607us; 888us; 607us; 890us; 607us; 892us; 607us; 894us; 607us; 905us; 607us; 912us; 607us; 919us; 607us; 924us; 607us; 926us; 607us; 929us; 607us; 932us; 607us; 935us; 607us; 938us; 607us; 941us; 607us; 944us; 607us; 946us; 607us; 951us; 607us; 993us; 607us; 995us; 607us; 998us; 607us; 999us; 607us; 1000us; 607us; 1001us; 607us; 1002us; 607us; 1003us; 607us; 1004us; 607us; 1005us; 607us; 1006us; 607us; 1007us; 607us; 1008us; 607us; 1009us; 607us; 1010us; 607us; 1011us; 607us; 1012us; 607us; 1013us; 607us; 1014us; 607us; 1015us; 607us; 1016us; 607us; 1018us; 607us; 1021us; 607us; 1040us; 607us; 1041us; 607us; 1045us; 607us; 1047us; 607us; 1051us; 607us; 1053us; 607us; 1057us; 607us; 1059us; 607us; 1060us; 607us; 1120us; 607us; 1130us; 607us; 1137us; 607us; 1142us; 607us; 1145us; 607us; 1148us; 607us; 1151us; 607us; 1152us; 607us; 1163us; 607us; 1170us; 607us; 1171us; 607us; 1177us; 607us; 1183us; 607us; 1184us; 607us; 1185us; 607us; 1197us; 607us; 1206us; 607us; 1218us; 607us; 1219us; 607us; 1220us; 607us; 1221us; 607us; 1223us; 607us; 1232us; 607us; 1235us; 607us; 1236us; 607us; 1259us; 607us; 1264us; 607us; 1269us; 607us; 1275us; 607us; 1306us; 607us; 1311us; 607us; 1us; 65535us; 628us; 629us; 1us; 65535us; 628us; 631us; 3us; 65535us; 628us; 632us; 633us; 634us; 635us; 636us; 2us; 65535us; 637us; 638us; 650us; 641us; 1us; 65535us; 623us; 624us; 4us; 65535us; 605us; 606us; 611us; 612us; 1284us; 1285us; 1286us; 1287us; 2us; 65535us; 651us; 652us; 654us; 655us; 5us; 65535us; 605us; 651us; 611us; 651us; 653us; 654us; 1284us; 651us; 1286us; 651us; 2us; 65535us; 441us; 659us; 658us; 659us; 1us; 65535us; 665us; 666us; 2us; 65535us; 665us; 672us; 668us; 669us; 1us; 65535us; 673us; 674us; 1us; 65535us; 674us; 675us; 1us; 65535us; 676us; 677us; 2us; 65535us; 676us; 682us; 680us; 681us; 175us; 65535us; 32us; 705us; 74us; 705us; 88us; 705us; 110us; 705us; 169us; 705us; 193us; 705us; 198us; 705us; 356us; 705us; 359us; 705us; 361us; 705us; 364us; 705us; 394us; 705us; 397us; 705us; 422us; 705us; 554us; 705us; 566us; 705us; 608us; 705us; 614us; 705us; 656us; 705us; 662us; 705us; 665us; 705us; 668us; 705us; 678us; 705us; 737us; 705us; 738us; 705us; 742us; 705us; 743us; 705us; 744us; 705us; 745us; 705us; 747us; 705us; 749us; 705us; 754us; 705us; 756us; 705us; 764us; 705us; 767us; 705us; 779us; 705us; 801us; 705us; 806us; 705us; 807us; 705us; 811us; 705us; 812us; 705us; 813us; 705us; 814us; 705us; 821us; 705us; 823us; 705us; 825us; 705us; 830us; 705us; 848us; 705us; 850us; 705us; 853us; 705us; 860us; 705us; 864us; 705us; 867us; 705us; 873us; 705us; 877us; 705us; 881us; 705us; 883us; 705us; 888us; 705us; 890us; 705us; 892us; 705us; 894us; 705us; 903us; 705us; 905us; 705us; 912us; 705us; 919us; 705us; 924us; 705us; 926us; 705us; 928us; 705us; 929us; 705us; 932us; 705us; 934us; 705us; 935us; 705us; 938us; 705us; 941us; 705us; 944us; 705us; 946us; 705us; 951us; 705us; 993us; 705us; 995us; 705us; 998us; 705us; 999us; 705us; 1000us; 705us; 1001us; 705us; 1002us; 705us; 1003us; 705us; 1004us; 705us; 1005us; 705us; 1006us; 705us; 1007us; 705us; 1008us; 705us; 1009us; 705us; 1010us; 705us; 1011us; 705us; 1012us; 705us; 1013us; 705us; 1014us; 705us; 1015us; 705us; 1016us; 705us; 1018us; 705us; 1021us; 705us; 1022us; 705us; 1024us; 705us; 1029us; 705us; 1036us; 705us; 1040us; 705us; 1041us; 705us; 1045us; 705us; 1047us; 705us; 1051us; 705us; 1053us; 705us; 1057us; 705us; 1059us; 705us; 1060us; 705us; 1061us; 705us; 1062us; 705us; 1064us; 705us; 1065us; 705us; 1067us; 705us; 1068us; 705us; 1070us; 705us; 1071us; 705us; 1073us; 705us; 1074us; 705us; 1076us; 705us; 1077us; 705us; 1079us; 705us; 1080us; 705us; 1086us; 705us; 1087us; 705us; 1091us; 705us; 1093us; 705us; 1095us; 705us; 1096us; 705us; 1099us; 705us; 1104us; 705us; 1107us; 705us; 1108us; 705us; 1120us; 705us; 1130us; 705us; 1137us; 705us; 1142us; 705us; 1145us; 705us; 1148us; 705us; 1151us; 705us; 1152us; 705us; 1163us; 705us; 1170us; 705us; 1171us; 705us; 1177us; 705us; 1183us; 705us; 1184us; 705us; 1185us; 705us; 1197us; 705us; 1206us; 705us; 1218us; 705us; 1219us; 705us; 1220us; 705us; 1221us; 705us; 1223us; 705us; 1225us; 705us; 1232us; 705us; 1235us; 705us; 1236us; 705us; 1240us; 705us; 1255us; 705us; 1259us; 705us; 1264us; 705us; 1269us; 705us; 1275us; 705us; 1304us; 705us; 1306us; 705us; 1309us; 705us; 1311us; 705us; 1318us; 705us; 1321us; 705us; 175us; 65535us; 32us; 1154us; 74us; 1154us; 88us; 1154us; 110us; 1154us; 169us; 1154us; 193us; 1154us; 198us; 1154us; 356us; 775us; 359us; 1154us; 361us; 775us; 364us; 1154us; 394us; 775us; 397us; 1154us; 422us; 1154us; 554us; 555us; 566us; 567us; 608us; 1154us; 614us; 1154us; 656us; 1154us; 662us; 775us; 665us; 1154us; 668us; 1154us; 678us; 1154us; 737us; 775us; 738us; 775us; 742us; 775us; 743us; 775us; 744us; 775us; 745us; 775us; 747us; 775us; 749us; 775us; 754us; 775us; 756us; 775us; 764us; 775us; 767us; 775us; 779us; 775us; 801us; 775us; 806us; 775us; 807us; 775us; 811us; 775us; 812us; 775us; 813us; 775us; 814us; 775us; 821us; 775us; 823us; 775us; 825us; 1154us; 830us; 1154us; 848us; 1154us; 850us; 1154us; 853us; 1154us; 860us; 1154us; 864us; 1154us; 867us; 1154us; 873us; 1154us; 877us; 1154us; 881us; 1154us; 883us; 1154us; 888us; 1154us; 890us; 1154us; 892us; 1154us; 894us; 1154us; 903us; 775us; 905us; 1154us; 912us; 1154us; 919us; 1154us; 924us; 1154us; 926us; 1154us; 928us; 775us; 929us; 1154us; 932us; 1154us; 934us; 775us; 935us; 1154us; 938us; 1154us; 941us; 1154us; 944us; 1154us; 946us; 1154us; 951us; 1154us; 993us; 1154us; 995us; 1154us; 998us; 1154us; 999us; 1154us; 1000us; 1154us; 1001us; 1154us; 1002us; 1154us; 1003us; 1154us; 1004us; 1154us; 1005us; 1154us; 1006us; 1154us; 1007us; 1154us; 1008us; 1154us; 1009us; 1154us; 1010us; 1154us; 1011us; 1154us; 1012us; 1154us; 1013us; 1154us; 1014us; 1154us; 1015us; 1154us; 1016us; 1154us; 1018us; 1154us; 1021us; 1154us; 1022us; 775us; 1024us; 775us; 1029us; 775us; 1036us; 775us; 1040us; 1154us; 1041us; 1154us; 1045us; 1154us; 1047us; 1154us; 1051us; 1154us; 1053us; 1154us; 1057us; 1154us; 1059us; 1154us; 1060us; 1154us; 1061us; 1154us; 1062us; 1154us; 1064us; 1154us; 1065us; 1154us; 1067us; 1154us; 1068us; 1154us; 1070us; 1154us; 1071us; 1154us; 1073us; 1154us; 1074us; 1154us; 1076us; 1154us; 1077us; 1154us; 1079us; 1154us; 1080us; 1154us; 1086us; 1154us; 1087us; 1154us; 1091us; 1154us; 1093us; 1154us; 1095us; 1154us; 1096us; 1154us; 1099us; 1154us; 1104us; 1154us; 1107us; 1154us; 1108us; 1154us; 1120us; 1154us; 1130us; 1154us; 1137us; 1154us; 1142us; 1154us; 1145us; 1154us; 1148us; 1154us; 1151us; 1154us; 1152us; 1154us; 1163us; 1154us; 1170us; 1154us; 1171us; 1154us; 1177us; 1154us; 1183us; 1154us; 1184us; 1154us; 1185us; 1154us; 1197us; 1154us; 1206us; 1154us; 1218us; 1154us; 1219us; 1154us; 1220us; 1154us; 1221us; 1154us; 1223us; 1154us; 1225us; 775us; 1232us; 1154us; 1235us; 1154us; 1236us; 1154us; 1240us; 1154us; 1255us; 1154us; 1259us; 1154us; 1264us; 1154us; 1269us; 1154us; 1275us; 1154us; 1304us; 775us; 1306us; 1154us; 1309us; 775us; 1311us; 1154us; 1318us; 775us; 1321us; 775us; 3us; 65535us; 356us; 357us; 361us; 362us; 662us; 663us; 3us; 65535us; 716us; 712us; 717us; 713us; 719us; 713us; 2us; 65535us; 717us; 718us; 719us; 720us; 1us; 65535us; 307us; 308us; 11us; 65535us; 356us; 708us; 361us; 708us; 662us; 708us; 737us; 727us; 738us; 728us; 742us; 729us; 743us; 730us; 744us; 731us; 745us; 732us; 928us; 733us; 934us; 734us; 11us; 65535us; 356us; 739us; 361us; 739us; 662us; 739us; 737us; 739us; 738us; 739us; 742us; 739us; 743us; 739us; 744us; 739us; 745us; 739us; 928us; 739us; 934us; 739us; 11us; 65535us; 356us; 740us; 361us; 740us; 662us; 740us; 737us; 740us; 738us; 740us; 742us; 740us; 743us; 740us; 744us; 740us; 745us; 740us; 928us; 740us; 934us; 740us; 31us; 65535us; 356us; 741us; 361us; 741us; 662us; 741us; 737us; 741us; 738us; 741us; 742us; 741us; 743us; 741us; 744us; 741us; 745us; 741us; 764us; 810us; 767us; 810us; 779us; 810us; 801us; 810us; 806us; 810us; 807us; 810us; 811us; 810us; 812us; 810us; 813us; 810us; 814us; 810us; 821us; 810us; 823us; 810us; 903us; 810us; 928us; 741us; 934us; 741us; 1022us; 810us; 1024us; 810us; 1029us; 810us; 1036us; 810us; 1225us; 810us; 1318us; 810us; 1321us; 810us; 6us; 65535us; 747us; 748us; 749us; 750us; 754us; 755us; 756us; 757us; 1304us; 1305us; 1309us; 1310us; 38us; 65535us; 356us; 753us; 361us; 753us; 394us; 395us; 662us; 753us; 737us; 753us; 738us; 753us; 742us; 753us; 743us; 753us; 744us; 753us; 745us; 753us; 747us; 754us; 749us; 754us; 754us; 754us; 756us; 754us; 764us; 753us; 767us; 753us; 779us; 753us; 801us; 753us; 806us; 753us; 807us; 753us; 811us; 753us; 812us; 753us; 813us; 753us; 814us; 753us; 821us; 753us; 823us; 753us; 903us; 753us; 928us; 753us; 934us; 753us; 1022us; 753us; 1024us; 753us; 1029us; 753us; 1036us; 753us; 1225us; 753us; 1304us; 754us; 1309us; 754us; 1318us; 753us; 1321us; 753us; 1us; 65535us; 779us; 780us; 20us; 65535us; 764us; 795us; 767us; 795us; 779us; 786us; 801us; 787us; 806us; 788us; 807us; 789us; 811us; 790us; 812us; 791us; 813us; 792us; 814us; 793us; 821us; 794us; 823us; 795us; 903us; 796us; 1022us; 797us; 1024us; 797us; 1029us; 797us; 1036us; 797us; 1225us; 798us; 1318us; 797us; 1321us; 797us; 20us; 65535us; 764us; 802us; 767us; 802us; 779us; 802us; 801us; 802us; 806us; 802us; 807us; 802us; 811us; 802us; 812us; 802us; 813us; 802us; 814us; 802us; 821us; 802us; 823us; 802us; 903us; 802us; 1022us; 802us; 1024us; 802us; 1029us; 802us; 1036us; 802us; 1225us; 802us; 1318us; 802us; 1321us; 802us; 20us; 65535us; 764us; 803us; 767us; 803us; 779us; 803us; 801us; 803us; 806us; 803us; 807us; 803us; 811us; 803us; 812us; 803us; 813us; 803us; 814us; 803us; 821us; 803us; 823us; 803us; 903us; 803us; 1022us; 803us; 1024us; 803us; 1029us; 803us; 1036us; 803us; 1225us; 803us; 1318us; 803us; 1321us; 803us; 1us; 65535us; 761us; 762us; 2us; 65535us; 761us; 815us; 818us; 819us; 2us; 65535us; 761us; 816us; 818us; 816us; 3us; 65535us; 764us; 765us; 767us; 768us; 823us; 824us; 22us; 65535us; 110us; 865us; 359us; 360us; 364us; 365us; 397us; 398us; 608us; 609us; 614us; 615us; 656us; 657us; 678us; 679us; 864us; 865us; 867us; 868us; 881us; 882us; 894us; 895us; 905us; 906us; 912us; 913us; 919us; 920us; 929us; 930us; 932us; 933us; 935us; 936us; 938us; 939us; 944us; 945us; 946us; 947us; 1306us; 1307us; 1us; 65535us; 995us; 996us; 6us; 65535us; 877us; 878us; 951us; 952us; 1041us; 1042us; 1221us; 1222us; 1223us; 1224us; 1311us; 1312us; 48us; 65535us; 110us; 829us; 359us; 829us; 364us; 829us; 397us; 829us; 608us; 829us; 614us; 829us; 656us; 829us; 665us; 673us; 668us; 673us; 678us; 829us; 825us; 826us; 830us; 831us; 853us; 854us; 860us; 861us; 864us; 829us; 867us; 829us; 873us; 874us; 877us; 834us; 881us; 829us; 894us; 829us; 905us; 829us; 912us; 829us; 919us; 829us; 929us; 829us; 932us; 829us; 935us; 829us; 938us; 829us; 941us; 942us; 944us; 829us; 946us; 829us; 951us; 834us; 1018us; 1019us; 1041us; 834us; 1047us; 1048us; 1053us; 1054us; 1130us; 1135us; 1137us; 1138us; 1163us; 1164us; 1170us; 1172us; 1171us; 1172us; 1183us; 1199us; 1184us; 1199us; 1185us; 1199us; 1197us; 1198us; 1221us; 834us; 1223us; 834us; 1306us; 829us; 1311us; 834us; 53us; 65535us; 110us; 836us; 359us; 836us; 364us; 836us; 397us; 836us; 608us; 836us; 614us; 836us; 656us; 836us; 665us; 836us; 668us; 836us; 678us; 836us; 825us; 836us; 830us; 836us; 848us; 849us; 850us; 851us; 853us; 836us; 860us; 836us; 864us; 836us; 867us; 836us; 873us; 836us; 877us; 836us; 881us; 836us; 894us; 836us; 905us; 836us; 912us; 836us; 919us; 836us; 929us; 836us; 932us; 836us; 935us; 836us; 938us; 836us; 941us; 836us; 944us; 836us; 946us; 836us; 951us; 836us; 1018us; 836us; 1041us; 836us; 1047us; 836us; 1053us; 836us; 1120us; 1216us; 1130us; 836us; 1137us; 836us; 1163us; 836us; 1170us; 836us; 1171us; 836us; 1177us; 1216us; 1183us; 836us; 1184us; 836us; 1185us; 836us; 1197us; 836us; 1206us; 1216us; 1221us; 836us; 1223us; 836us; 1306us; 836us; 1311us; 836us; 47us; 65535us; 130us; 132us; 137us; 139us; 229us; 231us; 235us; 237us; 239us; 241us; 243us; 245us; 328us; 330us; 334us; 335us; 338us; 339us; 433us; 435us; 457us; 459us; 612us; 622us; 615us; 622us; 669us; 671us; 719us; 726us; 720us; 723us; 779us; 785us; 780us; 782us; 826us; 828us; 874us; 876us; 878us; 880us; 883us; 887us; 884us; 886us; 893us; 900us; 895us; 897us; 904us; 908us; 913us; 915us; 936us; 622us; 947us; 622us; 1025us; 1027us; 1048us; 1050us; 1054us; 1056us; 1109us; 1128us; 1112us; 1128us; 1121us; 1123us; 1164us; 1166us; 1172us; 1174us; 1178us; 1180us; 1183us; 1190us; 1184us; 1190us; 1185us; 1190us; 1186us; 1188us; 1207us; 1209us; 1232us; 1234us; 1311us; 1316us; 1409us; 1428us; 1426us; 1428us; 106us; 65535us; 32us; 33us; 74us; 89us; 88us; 89us; 110us; 845us; 169us; 170us; 359us; 845us; 364us; 845us; 397us; 845us; 608us; 845us; 614us; 845us; 656us; 845us; 665us; 845us; 668us; 845us; 678us; 845us; 825us; 845us; 830us; 845us; 848us; 845us; 850us; 845us; 853us; 845us; 860us; 845us; 864us; 845us; 867us; 845us; 873us; 845us; 877us; 845us; 881us; 845us; 883us; 884us; 888us; 889us; 890us; 891us; 892us; 893us; 894us; 845us; 905us; 845us; 912us; 845us; 919us; 845us; 924us; 925us; 926us; 927us; 929us; 845us; 932us; 845us; 935us; 845us; 938us; 845us; 941us; 845us; 944us; 845us; 946us; 845us; 951us; 845us; 993us; 953us; 995us; 833us; 998us; 954us; 999us; 955us; 1000us; 956us; 1001us; 957us; 1002us; 958us; 1003us; 959us; 1004us; 960us; 1005us; 961us; 1006us; 962us; 1007us; 963us; 1008us; 964us; 1009us; 965us; 1010us; 966us; 1011us; 967us; 1012us; 968us; 1013us; 969us; 1014us; 970us; 1015us; 971us; 1016us; 972us; 1018us; 845us; 1021us; 973us; 1040us; 974us; 1041us; 845us; 1045us; 975us; 1047us; 845us; 1051us; 976us; 1053us; 845us; 1057us; 977us; 1059us; 978us; 1060us; 979us; 1120us; 847us; 1130us; 845us; 1137us; 846us; 1142us; 980us; 1145us; 980us; 1148us; 980us; 1151us; 981us; 1152us; 982us; 1163us; 845us; 1170us; 845us; 1171us; 845us; 1177us; 847us; 1183us; 845us; 1184us; 845us; 1185us; 845us; 1197us; 845us; 1206us; 847us; 1218us; 984us; 1219us; 985us; 1220us; 986us; 1221us; 845us; 1223us; 845us; 1232us; 983us; 1235us; 987us; 1236us; 988us; 1259us; 989us; 1264us; 990us; 1269us; 991us; 1275us; 992us; 1306us; 845us; 1311us; 845us; 1us; 65535us; 1117us; 1118us; 3us; 65535us; 949us; 1229us; 1227us; 1229us; 1230us; 1229us; 2us; 65535us; 874us; 875us; 878us; 879us; 2us; 65535us; 1022us; 1023us; 1024us; 1025us; 6us; 65535us; 1022us; 1034us; 1024us; 1034us; 1029us; 1034us; 1036us; 1034us; 1318us; 1034us; 1321us; 1034us; 6us; 65535us; 1022us; 1028us; 1024us; 1028us; 1029us; 1030us; 1036us; 1037us; 1318us; 1319us; 1321us; 1322us; 1us; 65535us; 797us; 1033us; 1us; 65535us; 1034us; 1035us; 2us; 65535us; 884us; 885us; 977us; 1058us; 2us; 65535us; 884us; 1043us; 977us; 1043us; 1us; 65535us; 1043us; 1044us; 106us; 65535us; 32us; 997us; 74us; 997us; 88us; 997us; 110us; 997us; 169us; 997us; 359us; 997us; 364us; 997us; 397us; 997us; 608us; 997us; 614us; 997us; 656us; 997us; 665us; 997us; 668us; 997us; 678us; 997us; 825us; 997us; 830us; 997us; 848us; 997us; 850us; 997us; 853us; 997us; 860us; 997us; 864us; 997us; 867us; 997us; 873us; 997us; 877us; 997us; 881us; 997us; 883us; 997us; 888us; 997us; 890us; 997us; 892us; 997us; 894us; 997us; 905us; 997us; 912us; 997us; 919us; 997us; 924us; 997us; 926us; 997us; 929us; 997us; 932us; 997us; 935us; 997us; 938us; 997us; 941us; 997us; 944us; 997us; 946us; 997us; 951us; 997us; 993us; 997us; 995us; 997us; 998us; 997us; 999us; 997us; 1000us; 997us; 1001us; 997us; 1002us; 997us; 1003us; 997us; 1004us; 997us; 1005us; 997us; 1006us; 997us; 1007us; 997us; 1008us; 997us; 1009us; 997us; 1010us; 997us; 1011us; 997us; 1012us; 997us; 1013us; 997us; 1014us; 997us; 1015us; 997us; 1016us; 997us; 1018us; 997us; 1021us; 997us; 1040us; 997us; 1041us; 997us; 1045us; 997us; 1047us; 997us; 1051us; 997us; 1053us; 997us; 1057us; 997us; 1059us; 997us; 1060us; 997us; 1120us; 997us; 1130us; 997us; 1137us; 997us; 1142us; 997us; 1145us; 997us; 1148us; 997us; 1151us; 997us; 1152us; 997us; 1163us; 997us; 1170us; 997us; 1171us; 997us; 1177us; 997us; 1183us; 997us; 1184us; 997us; 1185us; 997us; 1197us; 997us; 1206us; 997us; 1218us; 997us; 1219us; 997us; 1220us; 997us; 1221us; 997us; 1223us; 997us; 1232us; 997us; 1235us; 997us; 1236us; 997us; 1259us; 997us; 1264us; 997us; 1269us; 997us; 1275us; 997us; 1306us; 997us; 1311us; 997us; 122us; 65535us; 32us; 994us; 74us; 994us; 88us; 994us; 110us; 994us; 169us; 994us; 359us; 994us; 364us; 994us; 397us; 994us; 608us; 994us; 614us; 994us; 656us; 994us; 665us; 994us; 668us; 994us; 678us; 994us; 825us; 994us; 830us; 994us; 848us; 994us; 850us; 994us; 853us; 994us; 860us; 994us; 864us; 994us; 867us; 994us; 873us; 994us; 877us; 994us; 881us; 994us; 883us; 994us; 888us; 994us; 890us; 994us; 892us; 994us; 894us; 994us; 905us; 994us; 912us; 994us; 919us; 994us; 924us; 994us; 926us; 994us; 929us; 994us; 932us; 994us; 935us; 994us; 938us; 994us; 941us; 994us; 944us; 994us; 946us; 994us; 951us; 994us; 993us; 994us; 995us; 994us; 998us; 994us; 999us; 994us; 1000us; 994us; 1001us; 994us; 1002us; 994us; 1003us; 994us; 1004us; 994us; 1005us; 994us; 1006us; 994us; 1007us; 994us; 1008us; 994us; 1009us; 994us; 1010us; 994us; 1011us; 994us; 1012us; 994us; 1013us; 994us; 1014us; 994us; 1015us; 994us; 1016us; 994us; 1018us; 994us; 1021us; 994us; 1040us; 994us; 1041us; 994us; 1045us; 994us; 1047us; 994us; 1051us; 994us; 1053us; 994us; 1057us; 994us; 1059us; 994us; 1060us; 994us; 1061us; 1063us; 1062us; 1063us; 1064us; 1066us; 1065us; 1066us; 1067us; 1069us; 1068us; 1069us; 1070us; 1072us; 1071us; 1072us; 1073us; 1075us; 1074us; 1075us; 1076us; 1078us; 1077us; 1078us; 1079us; 1081us; 1080us; 1081us; 1091us; 1092us; 1093us; 1094us; 1120us; 994us; 1130us; 994us; 1137us; 994us; 1142us; 994us; 1145us; 994us; 1148us; 994us; 1151us; 994us; 1152us; 994us; 1163us; 994us; 1170us; 994us; 1171us; 994us; 1177us; 994us; 1183us; 994us; 1184us; 994us; 1185us; 994us; 1197us; 994us; 1206us; 994us; 1218us; 994us; 1219us; 994us; 1220us; 994us; 1221us; 994us; 1223us; 994us; 1232us; 994us; 1235us; 994us; 1236us; 994us; 1259us; 994us; 1264us; 994us; 1269us; 994us; 1275us; 994us; 1306us; 994us; 1311us; 994us; 122us; 65535us; 32us; 1095us; 74us; 1095us; 88us; 1095us; 110us; 1095us; 169us; 1095us; 359us; 1095us; 364us; 1095us; 397us; 1095us; 608us; 1095us; 614us; 1095us; 656us; 1095us; 665us; 1095us; 668us; 1095us; 678us; 1095us; 825us; 1095us; 830us; 1095us; 848us; 1095us; 850us; 1095us; 853us; 1095us; 860us; 1095us; 864us; 1095us; 867us; 1095us; 873us; 1095us; 877us; 1095us; 881us; 1095us; 883us; 1095us; 888us; 1095us; 890us; 1095us; 892us; 1095us; 894us; 1095us; 905us; 1095us; 912us; 1095us; 919us; 1095us; 924us; 1095us; 926us; 1095us; 929us; 1095us; 932us; 1095us; 935us; 1095us; 938us; 1095us; 941us; 1095us; 944us; 1095us; 946us; 1095us; 951us; 1095us; 993us; 1095us; 995us; 1095us; 998us; 1095us; 999us; 1095us; 1000us; 1095us; 1001us; 1095us; 1002us; 1095us; 1003us; 1095us; 1004us; 1095us; 1005us; 1095us; 1006us; 1095us; 1007us; 1095us; 1008us; 1095us; 1009us; 1095us; 1010us; 1095us; 1011us; 1095us; 1012us; 1095us; 1013us; 1095us; 1014us; 1095us; 1015us; 1095us; 1016us; 1095us; 1018us; 1095us; 1021us; 1095us; 1040us; 1095us; 1041us; 1095us; 1045us; 1095us; 1047us; 1095us; 1051us; 1095us; 1053us; 1095us; 1057us; 1095us; 1059us; 1095us; 1060us; 1095us; 1061us; 1095us; 1062us; 1095us; 1064us; 1095us; 1065us; 1095us; 1067us; 1095us; 1068us; 1095us; 1070us; 1095us; 1071us; 1095us; 1073us; 1095us; 1074us; 1095us; 1076us; 1095us; 1077us; 1095us; 1079us; 1095us; 1080us; 1095us; 1091us; 1095us; 1093us; 1095us; 1120us; 1095us; 1130us; 1095us; 1137us; 1095us; 1142us; 1095us; 1145us; 1095us; 1148us; 1095us; 1151us; 1095us; 1152us; 1095us; 1163us; 1095us; 1170us; 1095us; 1171us; 1095us; 1177us; 1095us; 1183us; 1095us; 1184us; 1095us; 1185us; 1095us; 1197us; 1095us; 1206us; 1096us; 1218us; 1095us; 1219us; 1095us; 1220us; 1095us; 1221us; 1095us; 1223us; 1095us; 1232us; 1095us; 1235us; 1095us; 1236us; 1095us; 1259us; 1095us; 1264us; 1095us; 1269us; 1095us; 1275us; 1095us; 1306us; 1095us; 1311us; 1095us; 3us; 65535us; 1095us; 1097us; 1096us; 1097us; 1240us; 1243us; 129us; 65535us; 32us; 1098us; 74us; 1098us; 88us; 1098us; 110us; 1098us; 169us; 1098us; 359us; 1098us; 364us; 1098us; 397us; 1098us; 608us; 1098us; 614us; 1098us; 656us; 1098us; 665us; 1098us; 668us; 1098us; 678us; 1098us; 825us; 1098us; 830us; 1098us; 848us; 1098us; 850us; 1098us; 853us; 1098us; 860us; 1098us; 864us; 1098us; 867us; 1098us; 873us; 1098us; 877us; 1098us; 881us; 1098us; 883us; 1098us; 888us; 1098us; 890us; 1098us; 892us; 1098us; 894us; 1098us; 905us; 1098us; 912us; 1098us; 919us; 1098us; 924us; 1098us; 926us; 1098us; 929us; 1098us; 932us; 1098us; 935us; 1098us; 938us; 1098us; 941us; 1098us; 944us; 1098us; 946us; 1098us; 951us; 1098us; 993us; 1098us; 995us; 1098us; 998us; 1098us; 999us; 1098us; 1000us; 1098us; 1001us; 1098us; 1002us; 1098us; 1003us; 1098us; 1004us; 1098us; 1005us; 1098us; 1006us; 1098us; 1007us; 1098us; 1008us; 1098us; 1009us; 1098us; 1010us; 1098us; 1011us; 1098us; 1012us; 1098us; 1013us; 1098us; 1014us; 1098us; 1015us; 1098us; 1016us; 1098us; 1018us; 1098us; 1021us; 1098us; 1040us; 1098us; 1041us; 1098us; 1045us; 1098us; 1047us; 1098us; 1051us; 1098us; 1053us; 1098us; 1057us; 1098us; 1059us; 1098us; 1060us; 1098us; 1061us; 1098us; 1062us; 1098us; 1064us; 1098us; 1065us; 1098us; 1067us; 1098us; 1068us; 1098us; 1070us; 1098us; 1071us; 1098us; 1073us; 1098us; 1074us; 1098us; 1076us; 1098us; 1077us; 1098us; 1079us; 1098us; 1080us; 1098us; 1091us; 1098us; 1093us; 1098us; 1095us; 1101us; 1096us; 1101us; 1099us; 1100us; 1104us; 1102us; 1107us; 1103us; 1108us; 1103us; 1120us; 1098us; 1130us; 1098us; 1137us; 1098us; 1142us; 1098us; 1145us; 1098us; 1148us; 1098us; 1151us; 1098us; 1152us; 1098us; 1163us; 1098us; 1170us; 1098us; 1171us; 1098us; 1177us; 1098us; 1183us; 1098us; 1184us; 1098us; 1185us; 1098us; 1197us; 1098us; 1206us; 1098us; 1218us; 1098us; 1219us; 1098us; 1220us; 1098us; 1221us; 1098us; 1223us; 1098us; 1232us; 1098us; 1235us; 1098us; 1236us; 1098us; 1240us; 1101us; 1259us; 1098us; 1264us; 1098us; 1269us; 1098us; 1275us; 1098us; 1306us; 1098us; 1311us; 1098us; 2us; 65535us; 1109us; 1110us; 1112us; 1113us; 4us; 65535us; 1137us; 1140us; 1142us; 1143us; 1145us; 1146us; 1148us; 1149us; 135us; 65535us; 32us; 1126us; 74us; 1126us; 88us; 1126us; 110us; 1126us; 169us; 1126us; 193us; 1244us; 198us; 1244us; 359us; 1126us; 364us; 1126us; 397us; 1126us; 422us; 423us; 608us; 1126us; 614us; 1126us; 656us; 1126us; 665us; 1126us; 668us; 1126us; 678us; 1126us; 825us; 1126us; 830us; 1126us; 848us; 1126us; 850us; 1126us; 853us; 1126us; 860us; 1126us; 864us; 1126us; 867us; 1126us; 873us; 1126us; 877us; 1126us; 881us; 1126us; 883us; 1126us; 888us; 1126us; 890us; 1126us; 892us; 1126us; 894us; 1126us; 905us; 1126us; 912us; 1126us; 919us; 1126us; 924us; 1126us; 926us; 1126us; 929us; 1126us; 932us; 1126us; 935us; 1126us; 938us; 1126us; 941us; 1126us; 944us; 1126us; 946us; 1126us; 951us; 1126us; 993us; 1126us; 995us; 1126us; 998us; 1126us; 999us; 1126us; 1000us; 1126us; 1001us; 1126us; 1002us; 1126us; 1003us; 1126us; 1004us; 1126us; 1005us; 1126us; 1006us; 1126us; 1007us; 1126us; 1008us; 1126us; 1009us; 1126us; 1010us; 1126us; 1011us; 1126us; 1012us; 1126us; 1013us; 1126us; 1014us; 1126us; 1015us; 1126us; 1016us; 1126us; 1018us; 1126us; 1021us; 1126us; 1040us; 1126us; 1041us; 1126us; 1045us; 1126us; 1047us; 1126us; 1051us; 1126us; 1053us; 1126us; 1057us; 1126us; 1059us; 1126us; 1060us; 1126us; 1061us; 1126us; 1062us; 1126us; 1064us; 1126us; 1065us; 1126us; 1067us; 1126us; 1068us; 1126us; 1070us; 1126us; 1071us; 1126us; 1073us; 1126us; 1074us; 1126us; 1076us; 1126us; 1077us; 1126us; 1079us; 1126us; 1080us; 1126us; 1086us; 1088us; 1087us; 1089us; 1091us; 1126us; 1093us; 1126us; 1095us; 1126us; 1096us; 1126us; 1099us; 1126us; 1104us; 1126us; 1107us; 1126us; 1108us; 1126us; 1120us; 1126us; 1130us; 1126us; 1137us; 1126us; 1142us; 1126us; 1145us; 1126us; 1148us; 1126us; 1151us; 1126us; 1152us; 1126us; 1163us; 1126us; 1170us; 1126us; 1171us; 1126us; 1177us; 1126us; 1183us; 1126us; 1184us; 1126us; 1185us; 1126us; 1197us; 1126us; 1206us; 1126us; 1218us; 1126us; 1219us; 1126us; 1220us; 1126us; 1221us; 1126us; 1223us; 1126us; 1232us; 1126us; 1235us; 1126us; 1236us; 1126us; 1240us; 1126us; 1255us; 1244us; 1259us; 1126us; 1264us; 1126us; 1269us; 1126us; 1275us; 1126us; 1306us; 1126us; 1311us; 1126us; 135us; 65535us; 32us; 1162us; 74us; 1162us; 88us; 1162us; 110us; 1162us; 169us; 1162us; 193us; 1162us; 198us; 1162us; 359us; 1162us; 364us; 1162us; 397us; 1162us; 422us; 1162us; 608us; 1162us; 614us; 1162us; 656us; 1162us; 665us; 1162us; 668us; 1162us; 678us; 1162us; 825us; 1162us; 830us; 1162us; 848us; 1162us; 850us; 1162us; 853us; 1162us; 860us; 1162us; 864us; 1162us; 867us; 1162us; 873us; 1162us; 877us; 1162us; 881us; 1162us; 883us; 1162us; 888us; 1162us; 890us; 1162us; 892us; 1162us; 894us; 1162us; 905us; 1162us; 912us; 1162us; 919us; 1162us; 924us; 1162us; 926us; 1162us; 929us; 1162us; 932us; 1162us; 935us; 1162us; 938us; 1162us; 941us; 1162us; 944us; 1162us; 946us; 1162us; 951us; 1162us; 993us; 1162us; 995us; 1162us; 998us; 1162us; 999us; 1162us; 1000us; 1162us; 1001us; 1162us; 1002us; 1162us; 1003us; 1162us; 1004us; 1162us; 1005us; 1162us; 1006us; 1162us; 1007us; 1162us; 1008us; 1162us; 1009us; 1162us; 1010us; 1162us; 1011us; 1162us; 1012us; 1162us; 1013us; 1162us; 1014us; 1162us; 1015us; 1162us; 1016us; 1162us; 1018us; 1162us; 1021us; 1162us; 1040us; 1162us; 1041us; 1162us; 1045us; 1162us; 1047us; 1162us; 1051us; 1162us; 1053us; 1162us; 1057us; 1162us; 1059us; 1162us; 1060us; 1162us; 1061us; 1162us; 1062us; 1162us; 1064us; 1162us; 1065us; 1162us; 1067us; 1162us; 1068us; 1162us; 1070us; 1162us; 1071us; 1162us; 1073us; 1162us; 1074us; 1162us; 1076us; 1162us; 1077us; 1162us; 1079us; 1162us; 1080us; 1162us; 1086us; 1162us; 1087us; 1162us; 1091us; 1162us; 1093us; 1162us; 1095us; 1162us; 1096us; 1162us; 1099us; 1162us; 1104us; 1162us; 1107us; 1162us; 1108us; 1162us; 1120us; 1162us; 1130us; 1162us; 1137us; 1162us; 1142us; 1162us; 1145us; 1162us; 1148us; 1162us; 1151us; 1162us; 1152us; 1162us; 1163us; 1162us; 1170us; 1162us; 1171us; 1162us; 1177us; 1162us; 1183us; 1162us; 1184us; 1162us; 1185us; 1162us; 1197us; 1162us; 1206us; 1162us; 1218us; 1162us; 1219us; 1162us; 1220us; 1162us; 1221us; 1162us; 1223us; 1162us; 1232us; 1162us; 1235us; 1162us; 1236us; 1162us; 1240us; 1162us; 1255us; 1162us; 1259us; 1162us; 1264us; 1162us; 1269us; 1162us; 1275us; 1162us; 1306us; 1162us; 1311us; 1162us; 173us; 65535us; 32us; 1160us; 74us; 1160us; 88us; 1160us; 110us; 1160us; 169us; 1160us; 193us; 1160us; 198us; 1160us; 356us; 758us; 359us; 1160us; 361us; 758us; 364us; 1160us; 394us; 758us; 397us; 1160us; 422us; 1160us; 608us; 1160us; 614us; 1160us; 656us; 1160us; 662us; 758us; 665us; 1160us; 668us; 1160us; 678us; 1160us; 737us; 758us; 738us; 758us; 742us; 758us; 743us; 758us; 744us; 758us; 745us; 758us; 747us; 758us; 749us; 758us; 754us; 758us; 756us; 758us; 764us; 758us; 767us; 758us; 779us; 758us; 801us; 758us; 806us; 758us; 807us; 758us; 811us; 758us; 812us; 758us; 813us; 758us; 814us; 758us; 821us; 758us; 823us; 758us; 825us; 1160us; 830us; 1160us; 848us; 1160us; 850us; 1160us; 853us; 1160us; 860us; 1160us; 864us; 1160us; 867us; 1160us; 873us; 1160us; 877us; 1160us; 881us; 1160us; 883us; 1160us; 888us; 1160us; 890us; 1160us; 892us; 1160us; 894us; 1160us; 903us; 758us; 905us; 1160us; 912us; 1160us; 919us; 1160us; 924us; 1160us; 926us; 1160us; 928us; 758us; 929us; 1160us; 932us; 1160us; 934us; 758us; 935us; 1160us; 938us; 1160us; 941us; 1160us; 944us; 1160us; 946us; 1160us; 951us; 1160us; 993us; 1160us; 995us; 1160us; 998us; 1160us; 999us; 1160us; 1000us; 1160us; 1001us; 1160us; 1002us; 1160us; 1003us; 1160us; 1004us; 1160us; 1005us; 1160us; 1006us; 1160us; 1007us; 1160us; 1008us; 1160us; 1009us; 1160us; 1010us; 1160us; 1011us; 1160us; 1012us; 1160us; 1013us; 1160us; 1014us; 1160us; 1015us; 1160us; 1016us; 1160us; 1018us; 1160us; 1021us; 1160us; 1022us; 758us; 1024us; 758us; 1029us; 758us; 1036us; 758us; 1040us; 1160us; 1041us; 1160us; 1045us; 1160us; 1047us; 1160us; 1051us; 1160us; 1053us; 1160us; 1057us; 1160us; 1059us; 1160us; 1060us; 1160us; 1061us; 1160us; 1062us; 1160us; 1064us; 1160us; 1065us; 1160us; 1067us; 1160us; 1068us; 1160us; 1070us; 1160us; 1071us; 1160us; 1073us; 1160us; 1074us; 1160us; 1076us; 1160us; 1077us; 1160us; 1079us; 1160us; 1080us; 1160us; 1086us; 1160us; 1087us; 1160us; 1091us; 1160us; 1093us; 1160us; 1095us; 1160us; 1096us; 1160us; 1099us; 1160us; 1104us; 1160us; 1107us; 1160us; 1108us; 1160us; 1120us; 1160us; 1130us; 1160us; 1137us; 1160us; 1142us; 1160us; 1145us; 1160us; 1148us; 1160us; 1151us; 1160us; 1152us; 1160us; 1163us; 1160us; 1170us; 1160us; 1171us; 1160us; 1177us; 1160us; 1183us; 1160us; 1184us; 1160us; 1185us; 1160us; 1197us; 1160us; 1206us; 1160us; 1218us; 1160us; 1219us; 1160us; 1220us; 1160us; 1221us; 1160us; 1223us; 1160us; 1225us; 758us; 1232us; 1160us; 1235us; 1160us; 1236us; 1160us; 1240us; 1160us; 1255us; 1160us; 1259us; 1160us; 1264us; 1160us; 1269us; 1160us; 1275us; 1160us; 1304us; 758us; 1306us; 1160us; 1309us; 758us; 1311us; 1160us; 1318us; 758us; 1321us; 758us; 135us; 65535us; 32us; 1161us; 74us; 1161us; 88us; 1161us; 110us; 1161us; 169us; 1161us; 193us; 1161us; 198us; 1161us; 359us; 1161us; 364us; 1161us; 397us; 1161us; 422us; 1161us; 608us; 1161us; 614us; 1161us; 656us; 1161us; 665us; 1161us; 668us; 1161us; 678us; 1161us; 825us; 1161us; 830us; 1161us; 848us; 1161us; 850us; 1161us; 853us; 1161us; 860us; 1161us; 864us; 1161us; 867us; 1161us; 873us; 1161us; 877us; 1161us; 881us; 1161us; 883us; 1161us; 888us; 1161us; 890us; 1161us; 892us; 1161us; 894us; 1161us; 905us; 1161us; 912us; 1161us; 919us; 1161us; 924us; 1161us; 926us; 1161us; 929us; 1161us; 932us; 1161us; 935us; 1161us; 938us; 1161us; 941us; 1161us; 944us; 1161us; 946us; 1161us; 951us; 1161us; 993us; 1161us; 995us; 1161us; 998us; 1161us; 999us; 1161us; 1000us; 1161us; 1001us; 1161us; 1002us; 1161us; 1003us; 1161us; 1004us; 1161us; 1005us; 1161us; 1006us; 1161us; 1007us; 1161us; 1008us; 1161us; 1009us; 1161us; 1010us; 1161us; 1011us; 1161us; 1012us; 1161us; 1013us; 1161us; 1014us; 1161us; 1015us; 1161us; 1016us; 1161us; 1018us; 1161us; 1021us; 1161us; 1040us; 1161us; 1041us; 1161us; 1045us; 1161us; 1047us; 1161us; 1051us; 1161us; 1053us; 1161us; 1057us; 1161us; 1059us; 1161us; 1060us; 1161us; 1061us; 1161us; 1062us; 1161us; 1064us; 1161us; 1065us; 1161us; 1067us; 1161us; 1068us; 1161us; 1070us; 1161us; 1071us; 1161us; 1073us; 1161us; 1074us; 1161us; 1076us; 1161us; 1077us; 1161us; 1079us; 1161us; 1080us; 1161us; 1086us; 1161us; 1087us; 1161us; 1091us; 1161us; 1093us; 1161us; 1095us; 1161us; 1096us; 1161us; 1099us; 1161us; 1104us; 1161us; 1107us; 1161us; 1108us; 1161us; 1120us; 1161us; 1130us; 1161us; 1137us; 1161us; 1142us; 1161us; 1145us; 1161us; 1148us; 1161us; 1151us; 1161us; 1152us; 1161us; 1163us; 1161us; 1170us; 1161us; 1171us; 1161us; 1177us; 1161us; 1183us; 1161us; 1184us; 1161us; 1185us; 1161us; 1197us; 1161us; 1206us; 1161us; 1218us; 1161us; 1219us; 1161us; 1220us; 1161us; 1221us; 1161us; 1223us; 1161us; 1232us; 1161us; 1235us; 1161us; 1236us; 1161us; 1240us; 1161us; 1255us; 1161us; 1259us; 1161us; 1264us; 1161us; 1269us; 1161us; 1275us; 1161us; 1306us; 1161us; 1311us; 1161us; 135us; 65535us; 32us; 1155us; 74us; 1155us; 88us; 1155us; 110us; 1155us; 169us; 1155us; 193us; 1155us; 198us; 1155us; 359us; 1155us; 364us; 1155us; 397us; 1155us; 422us; 1155us; 608us; 1155us; 614us; 1155us; 656us; 1155us; 665us; 1155us; 668us; 1155us; 678us; 1155us; 825us; 1155us; 830us; 1155us; 848us; 1155us; 850us; 1155us; 853us; 1155us; 860us; 1155us; 864us; 1155us; 867us; 1155us; 873us; 1155us; 877us; 1155us; 881us; 1155us; 883us; 1155us; 888us; 1155us; 890us; 1155us; 892us; 1155us; 894us; 1155us; 905us; 1155us; 912us; 1155us; 919us; 1155us; 924us; 1155us; 926us; 1155us; 929us; 1155us; 932us; 1155us; 935us; 1155us; 938us; 1155us; 941us; 1155us; 944us; 1155us; 946us; 1155us; 951us; 1155us; 993us; 1155us; 995us; 1155us; 998us; 1155us; 999us; 1155us; 1000us; 1155us; 1001us; 1155us; 1002us; 1155us; 1003us; 1155us; 1004us; 1155us; 1005us; 1155us; 1006us; 1155us; 1007us; 1155us; 1008us; 1155us; 1009us; 1155us; 1010us; 1155us; 1011us; 1155us; 1012us; 1155us; 1013us; 1155us; 1014us; 1155us; 1015us; 1155us; 1016us; 1155us; 1018us; 1155us; 1021us; 1155us; 1040us; 1155us; 1041us; 1155us; 1045us; 1155us; 1047us; 1155us; 1051us; 1155us; 1053us; 1155us; 1057us; 1155us; 1059us; 1155us; 1060us; 1155us; 1061us; 1155us; 1062us; 1155us; 1064us; 1155us; 1065us; 1155us; 1067us; 1155us; 1068us; 1155us; 1070us; 1155us; 1071us; 1155us; 1073us; 1155us; 1074us; 1155us; 1076us; 1155us; 1077us; 1155us; 1079us; 1155us; 1080us; 1155us; 1086us; 1155us; 1087us; 1155us; 1091us; 1155us; 1093us; 1155us; 1095us; 1155us; 1096us; 1155us; 1099us; 1155us; 1104us; 1155us; 1107us; 1155us; 1108us; 1155us; 1120us; 1155us; 1130us; 1155us; 1137us; 1155us; 1142us; 1155us; 1145us; 1155us; 1148us; 1155us; 1151us; 1155us; 1152us; 1155us; 1163us; 1155us; 1170us; 1155us; 1171us; 1155us; 1177us; 1155us; 1183us; 1155us; 1184us; 1155us; 1185us; 1155us; 1197us; 1155us; 1206us; 1155us; 1218us; 1155us; 1219us; 1155us; 1220us; 1155us; 1221us; 1155us; 1223us; 1155us; 1232us; 1155us; 1235us; 1155us; 1236us; 1155us; 1240us; 1155us; 1255us; 1155us; 1259us; 1155us; 1264us; 1155us; 1269us; 1155us; 1275us; 1155us; 1306us; 1155us; 1311us; 1155us; 3us; 65535us; 1183us; 1186us; 1184us; 1186us; 1185us; 1186us; 3us; 65535us; 1183us; 1193us; 1184us; 1193us; 1185us; 1193us; 135us; 65535us; 32us; 1156us; 74us; 1156us; 88us; 1156us; 110us; 1156us; 169us; 1156us; 193us; 1156us; 198us; 1156us; 359us; 1156us; 364us; 1156us; 397us; 1156us; 422us; 1156us; 608us; 1156us; 614us; 1156us; 656us; 1156us; 665us; 1156us; 668us; 1156us; 678us; 1156us; 825us; 1156us; 830us; 1156us; 848us; 1156us; 850us; 1156us; 853us; 1156us; 860us; 1156us; 864us; 1156us; 867us; 1156us; 873us; 1156us; 877us; 1156us; 881us; 1156us; 883us; 1156us; 888us; 1156us; 890us; 1156us; 892us; 1156us; 894us; 1156us; 905us; 1156us; 912us; 1156us; 919us; 1156us; 924us; 1156us; 926us; 1156us; 929us; 1156us; 932us; 1156us; 935us; 1156us; 938us; 1156us; 941us; 1156us; 944us; 1156us; 946us; 1156us; 951us; 1156us; 993us; 1156us; 995us; 1156us; 998us; 1156us; 999us; 1156us; 1000us; 1156us; 1001us; 1156us; 1002us; 1156us; 1003us; 1156us; 1004us; 1156us; 1005us; 1156us; 1006us; 1156us; 1007us; 1156us; 1008us; 1156us; 1009us; 1156us; 1010us; 1156us; 1011us; 1156us; 1012us; 1156us; 1013us; 1156us; 1014us; 1156us; 1015us; 1156us; 1016us; 1156us; 1018us; 1156us; 1021us; 1156us; 1040us; 1156us; 1041us; 1156us; 1045us; 1156us; 1047us; 1156us; 1051us; 1156us; 1053us; 1156us; 1057us; 1156us; 1059us; 1156us; 1060us; 1156us; 1061us; 1156us; 1062us; 1156us; 1064us; 1156us; 1065us; 1156us; 1067us; 1156us; 1068us; 1156us; 1070us; 1156us; 1071us; 1156us; 1073us; 1156us; 1074us; 1156us; 1076us; 1156us; 1077us; 1156us; 1079us; 1156us; 1080us; 1156us; 1086us; 1156us; 1087us; 1156us; 1091us; 1156us; 1093us; 1156us; 1095us; 1156us; 1096us; 1156us; 1099us; 1156us; 1104us; 1156us; 1107us; 1156us; 1108us; 1156us; 1120us; 1156us; 1130us; 1156us; 1137us; 1156us; 1142us; 1156us; 1145us; 1156us; 1148us; 1156us; 1151us; 1156us; 1152us; 1156us; 1163us; 1156us; 1170us; 1156us; 1171us; 1156us; 1177us; 1156us; 1183us; 1156us; 1184us; 1156us; 1185us; 1156us; 1197us; 1156us; 1206us; 1156us; 1218us; 1156us; 1219us; 1156us; 1220us; 1156us; 1221us; 1156us; 1223us; 1156us; 1232us; 1156us; 1235us; 1156us; 1236us; 1156us; 1240us; 1156us; 1255us; 1156us; 1259us; 1156us; 1264us; 1156us; 1269us; 1156us; 1275us; 1156us; 1306us; 1156us; 1311us; 1156us; 1us; 65535us; 1206us; 1207us; 2us; 65535us; 1120us; 1121us; 1177us; 1178us; 3us; 65535us; 1120us; 1215us; 1177us; 1215us; 1206us; 1214us; 4us; 65535us; 1120us; 1217us; 1177us; 1217us; 1206us; 1217us; 1232us; 1233us; 3us; 65535us; 949us; 950us; 1227us; 1228us; 1230us; 1231us; 2us; 65535us; 903us; 904us; 1225us; 1226us; 1us; 65535us; 903us; 911us; 3us; 65535us; 1183us; 1200us; 1184us; 1200us; 1185us; 1200us; 1us; 65535us; 1239us; 1240us; 3us; 65535us; 193us; 194us; 198us; 199us; 1255us; 1256us; 1us; 65535us; 1238us; 1239us; 1us; 65535us; 1240us; 1241us; 1us; 65535us; 1206us; 1212us; 4us; 65535us; 989us; 1260us; 990us; 1265us; 991us; 1270us; 1256us; 1257us; 1us; 65535us; 1206us; 1213us; 1us; 65535us; 1206us; 1276us; 1us; 65535us; 1298us; 1299us; 2us; 65535us; 1276us; 1277us; 1298us; 1283us; 1us; 65535us; 1280us; 1281us; 4us; 65535us; 1278us; 1279us; 1291us; 1292us; 1293us; 1294us; 1295us; 1296us; 5us; 65535us; 1278us; 1293us; 1280us; 1291us; 1291us; 1293us; 1293us; 1293us; 1295us; 1293us; 1us; 65535us; 987us; 1236us; 106us; 65535us; 32us; 872us; 74us; 872us; 88us; 872us; 110us; 872us; 169us; 872us; 359us; 872us; 364us; 872us; 397us; 872us; 608us; 872us; 614us; 872us; 656us; 872us; 665us; 872us; 668us; 872us; 678us; 872us; 825us; 872us; 830us; 872us; 848us; 872us; 850us; 872us; 853us; 872us; 860us; 872us; 864us; 872us; 867us; 872us; 873us; 872us; 877us; 872us; 881us; 872us; 883us; 872us; 888us; 872us; 890us; 872us; 892us; 872us; 894us; 872us; 905us; 872us; 912us; 872us; 919us; 872us; 924us; 872us; 926us; 872us; 929us; 872us; 932us; 872us; 935us; 872us; 938us; 872us; 941us; 872us; 944us; 872us; 946us; 872us; 951us; 872us; 993us; 872us; 995us; 872us; 998us; 872us; 999us; 872us; 1000us; 872us; 1001us; 872us; 1002us; 872us; 1003us; 872us; 1004us; 872us; 1005us; 872us; 1006us; 872us; 1007us; 872us; 1008us; 872us; 1009us; 872us; 1010us; 872us; 1011us; 872us; 1012us; 872us; 1013us; 872us; 1014us; 872us; 1015us; 872us; 1016us; 872us; 1018us; 872us; 1021us; 872us; 1040us; 872us; 1041us; 872us; 1045us; 872us; 1047us; 872us; 1051us; 872us; 1053us; 872us; 1057us; 872us; 1059us; 872us; 1060us; 872us; 1120us; 872us; 1130us; 872us; 1137us; 872us; 1142us; 872us; 1145us; 872us; 1148us; 872us; 1151us; 872us; 1152us; 872us; 1163us; 872us; 1170us; 872us; 1171us; 872us; 1177us; 872us; 1183us; 872us; 1184us; 872us; 1185us; 872us; 1197us; 872us; 1206us; 872us; 1218us; 872us; 1219us; 872us; 1220us; 872us; 1221us; 872us; 1223us; 872us; 1232us; 872us; 1235us; 872us; 1236us; 872us; 1259us; 872us; 1264us; 872us; 1269us; 872us; 1275us; 872us; 1306us; 872us; 1311us; 872us; 106us; 65535us; 32us; 871us; 74us; 871us; 88us; 871us; 110us; 871us; 169us; 871us; 359us; 871us; 364us; 871us; 397us; 871us; 608us; 871us; 614us; 871us; 656us; 871us; 665us; 871us; 668us; 871us; 678us; 871us; 825us; 871us; 830us; 871us; 848us; 871us; 850us; 871us; 853us; 871us; 860us; 871us; 864us; 871us; 867us; 871us; 873us; 871us; 877us; 871us; 881us; 871us; 883us; 871us; 888us; 871us; 890us; 871us; 892us; 871us; 894us; 871us; 905us; 871us; 912us; 871us; 919us; 871us; 924us; 871us; 926us; 871us; 929us; 871us; 932us; 871us; 935us; 871us; 938us; 871us; 941us; 871us; 944us; 871us; 946us; 871us; 951us; 871us; 993us; 871us; 995us; 871us; 998us; 871us; 999us; 871us; 1000us; 871us; 1001us; 871us; 1002us; 871us; 1003us; 871us; 1004us; 871us; 1005us; 871us; 1006us; 871us; 1007us; 871us; 1008us; 871us; 1009us; 871us; 1010us; 871us; 1011us; 871us; 1012us; 871us; 1013us; 871us; 1014us; 871us; 1015us; 871us; 1016us; 871us; 1018us; 871us; 1021us; 871us; 1040us; 871us; 1041us; 871us; 1045us; 871us; 1047us; 871us; 1051us; 871us; 1053us; 871us; 1057us; 871us; 1059us; 871us; 1060us; 871us; 1120us; 871us; 1130us; 871us; 1137us; 871us; 1142us; 871us; 1145us; 871us; 1148us; 871us; 1151us; 871us; 1152us; 871us; 1163us; 871us; 1170us; 871us; 1171us; 871us; 1177us; 871us; 1183us; 871us; 1184us; 871us; 1185us; 871us; 1197us; 871us; 1206us; 871us; 1218us; 871us; 1219us; 871us; 1220us; 871us; 1221us; 871us; 1223us; 871us; 1232us; 871us; 1235us; 871us; 1236us; 871us; 1259us; 871us; 1264us; 871us; 1269us; 871us; 1275us; 871us; 1306us; 871us; 1311us; 871us; 3us; 65535us; 714us; 715us; 804us; 805us; 837us; 838us; 5us; 65535us; 166us; 167us; 279us; 280us; 294us; 295us; 385us; 386us; 1330us; 1331us; 3us; 65535us; 357us; 358us; 362us; 363us; 663us; 664us; 9us; 65535us; 166us; 1328us; 225us; 226us; 279us; 1328us; 294us; 1328us; 324us; 325us; 385us; 1328us; 551us; 552us; 1330us; 1328us; 1333us; 1334us; 9us; 65535us; 166us; 1332us; 225us; 1332us; 279us; 1332us; 294us; 1332us; 324us; 1332us; 385us; 1332us; 551us; 1332us; 1330us; 1332us; 1333us; 1332us; 2us; 65535us; 1336us; 1337us; 1339us; 1340us; 11us; 65535us; 166us; 1335us; 225us; 1335us; 279us; 1335us; 294us; 1335us; 324us; 1335us; 385us; 1335us; 551us; 1335us; 1330us; 1335us; 1333us; 1335us; 1336us; 1338us; 1339us; 1338us; 1us; 65535us; 585us; 586us; 29us; 65535us; 273us; 450us; 372us; 450us; 449us; 450us; 453us; 1409us; 509us; 510us; 512us; 513us; 585us; 1359us; 684us; 685us; 714us; 1326us; 804us; 1326us; 808us; 809us; 837us; 1326us; 839us; 840us; 841us; 842us; 843us; 844us; 1191us; 1192us; 1246us; 1247us; 1249us; 1250us; 1251us; 1409us; 1357us; 1358us; 1361us; 1362us; 1391us; 1409us; 1396us; 1397us; 1399us; 1400us; 1410us; 1411us; 1414us; 1415us; 1425us; 1426us; 1439us; 1441us; 1443us; 1444us; 29us; 65535us; 273us; 1360us; 372us; 1360us; 449us; 1360us; 453us; 1360us; 509us; 1360us; 512us; 1360us; 585us; 1360us; 684us; 1360us; 714us; 1360us; 804us; 1360us; 808us; 1360us; 837us; 1360us; 839us; 1360us; 841us; 1360us; 843us; 1360us; 1191us; 1360us; 1246us; 1360us; 1249us; 1360us; 1251us; 1360us; 1357us; 1360us; 1361us; 1360us; 1391us; 1360us; 1396us; 1360us; 1399us; 1360us; 1410us; 1360us; 1414us; 1360us; 1425us; 1360us; 1439us; 1360us; 1443us; 1360us; 5us; 65535us; 1364us; 1365us; 1366us; 1367us; 1368us; 1369us; 1371us; 1372us; 1373us; 1374us; 2us; 65535us; 574us; 575us; 1376us; 1377us; 85us; 65535us; 166us; 1382us; 225us; 1382us; 273us; 1382us; 279us; 1382us; 283us; 1382us; 284us; 1381us; 285us; 1382us; 286us; 1381us; 294us; 1382us; 324us; 1382us; 372us; 1382us; 378us; 1382us; 379us; 1381us; 385us; 1382us; 419us; 1382us; 420us; 1381us; 449us; 1382us; 453us; 1382us; 462us; 1382us; 509us; 1382us; 512us; 1382us; 548us; 1382us; 551us; 1382us; 570us; 1382us; 573us; 1381us; 574us; 1382us; 585us; 1382us; 598us; 1382us; 684us; 1382us; 714us; 1382us; 751us; 1382us; 804us; 1382us; 808us; 1382us; 837us; 1382us; 839us; 1382us; 841us; 1382us; 843us; 1382us; 1082us; 1382us; 1083us; 1382us; 1084us; 1381us; 1085us; 1381us; 1191us; 1382us; 1246us; 1382us; 1249us; 1382us; 1251us; 1382us; 1253us; 1382us; 1254us; 1381us; 1297us; 1382us; 1298us; 1381us; 1330us; 1382us; 1333us; 1382us; 1336us; 1382us; 1339us; 1382us; 1341us; 1382us; 1342us; 1381us; 1343us; 1382us; 1344us; 1381us; 1347us; 1382us; 1348us; 1381us; 1349us; 1381us; 1350us; 1382us; 1351us; 1381us; 1354us; 1382us; 1355us; 1381us; 1357us; 1382us; 1361us; 1382us; 1363us; 1381us; 1364us; 1382us; 1366us; 1382us; 1368us; 1382us; 1370us; 1381us; 1371us; 1382us; 1373us; 1382us; 1375us; 1381us; 1376us; 1382us; 1391us; 1382us; 1393us; 1381us; 1396us; 1382us; 1399us; 1382us; 1410us; 1382us; 1414us; 1382us; 1421us; 1382us; 1425us; 1382us; 1439us; 1382us; 1443us; 1382us; 85us; 65535us; 166us; 1423us; 225us; 1423us; 273us; 1423us; 279us; 1423us; 283us; 1423us; 284us; 1389us; 285us; 1423us; 286us; 1389us; 294us; 1423us; 324us; 1423us; 372us; 1423us; 378us; 1423us; 379us; 1389us; 385us; 1423us; 419us; 1423us; 420us; 1389us; 449us; 1423us; 453us; 1423us; 462us; 1423us; 509us; 1423us; 512us; 1423us; 548us; 1423us; 551us; 1423us; 570us; 1423us; 573us; 1389us; 574us; 1423us; 585us; 1423us; 598us; 1423us; 684us; 1423us; 714us; 1423us; 751us; 1423us; 804us; 1423us; 808us; 1423us; 837us; 1423us; 839us; 1423us; 841us; 1423us; 843us; 1423us; 1082us; 1423us; 1083us; 1423us; 1084us; 1389us; 1085us; 1389us; 1191us; 1423us; 1246us; 1423us; 1249us; 1423us; 1251us; 1423us; 1253us; 1423us; 1254us; 1389us; 1297us; 1423us; 1298us; 1389us; 1330us; 1423us; 1333us; 1423us; 1336us; 1423us; 1339us; 1423us; 1341us; 1423us; 1342us; 1389us; 1343us; 1423us; 1344us; 1389us; 1347us; 1423us; 1348us; 1389us; 1349us; 1389us; 1350us; 1423us; 1351us; 1389us; 1354us; 1423us; 1355us; 1389us; 1357us; 1423us; 1361us; 1423us; 1363us; 1389us; 1364us; 1423us; 1366us; 1423us; 1368us; 1423us; 1370us; 1389us; 1371us; 1423us; 1373us; 1423us; 1375us; 1389us; 1376us; 1423us; 1391us; 1423us; 1393us; 1394us; 1396us; 1423us; 1399us; 1423us; 1410us; 1423us; 1414us; 1423us; 1421us; 1423us; 1425us; 1423us; 1439us; 1423us; 1443us; 1423us; 63us; 65535us; 166us; 1349us; 225us; 1349us; 273us; 1363us; 279us; 1349us; 283us; 284us; 285us; 286us; 294us; 1349us; 324us; 1349us; 372us; 1363us; 378us; 379us; 385us; 1349us; 419us; 420us; 449us; 1363us; 453us; 1363us; 509us; 1363us; 512us; 1363us; 548us; 573us; 551us; 1349us; 570us; 573us; 574us; 1375us; 585us; 1363us; 598us; 573us; 684us; 1363us; 714us; 1363us; 804us; 1363us; 808us; 1363us; 837us; 1363us; 839us; 1363us; 841us; 1363us; 843us; 1363us; 1082us; 1085us; 1083us; 1084us; 1191us; 1363us; 1246us; 1363us; 1249us; 1363us; 1251us; 1363us; 1253us; 1254us; 1297us; 1298us; 1330us; 1349us; 1333us; 1349us; 1336us; 1349us; 1339us; 1349us; 1341us; 1342us; 1343us; 1344us; 1347us; 1348us; 1350us; 1351us; 1354us; 1355us; 1357us; 1363us; 1361us; 1363us; 1364us; 1370us; 1366us; 1370us; 1368us; 1370us; 1371us; 1370us; 1373us; 1370us; 1376us; 1375us; 1391us; 1363us; 1396us; 1363us; 1399us; 1363us; 1410us; 1363us; 1414us; 1363us; 1425us; 1363us; 1439us; 1363us; 1443us; 1363us; 20us; 65535us; 284us; 1385us; 286us; 1385us; 379us; 1385us; 420us; 1385us; 573us; 1385us; 1084us; 1385us; 1085us; 1385us; 1254us; 1385us; 1298us; 1385us; 1342us; 1385us; 1344us; 1385us; 1348us; 1385us; 1349us; 1385us; 1351us; 1385us; 1355us; 1385us; 1363us; 1385us; 1370us; 1385us; 1375us; 1385us; 1386us; 1388us; 1387us; 1388us; 3us; 65535us; 453us; 1392us; 1251us; 1392us; 1391us; 1392us; 2us; 65535us; 1411us; 1412us; 1444us; 1413us; 63us; 65535us; 166us; 1395us; 225us; 1395us; 273us; 1395us; 279us; 1395us; 283us; 1395us; 285us; 1395us; 294us; 1395us; 324us; 1395us; 372us; 1395us; 378us; 1395us; 385us; 1395us; 419us; 1395us; 449us; 1395us; 453us; 1395us; 509us; 1395us; 512us; 1395us; 548us; 1395us; 551us; 1395us; 570us; 1395us; 574us; 1395us; 585us; 1395us; 598us; 1395us; 684us; 1395us; 714us; 1395us; 804us; 1395us; 808us; 1395us; 837us; 1395us; 839us; 1395us; 841us; 1395us; 843us; 1395us; 1082us; 1395us; 1083us; 1395us; 1191us; 1395us; 1246us; 1395us; 1249us; 1395us; 1251us; 1395us; 1253us; 1395us; 1297us; 1395us; 1330us; 1395us; 1333us; 1395us; 1336us; 1395us; 1339us; 1395us; 1341us; 1395us; 1343us; 1395us; 1347us; 1395us; 1350us; 1395us; 1354us; 1395us; 1357us; 1395us; 1361us; 1395us; 1364us; 1395us; 1366us; 1395us; 1368us; 1395us; 1371us; 1395us; 1373us; 1395us; 1376us; 1395us; 1391us; 1395us; 1396us; 1395us; 1399us; 1395us; 1410us; 1395us; 1414us; 1395us; 1425us; 1395us; 1439us; 1395us; 1443us; 1395us; 66us; 65535us; 166us; 1416us; 225us; 1416us; 273us; 1416us; 279us; 1416us; 283us; 1416us; 285us; 1416us; 294us; 1416us; 324us; 1416us; 372us; 1416us; 378us; 1416us; 385us; 1416us; 419us; 1416us; 449us; 1416us; 453us; 1416us; 462us; 1422us; 509us; 1416us; 512us; 1416us; 548us; 1416us; 551us; 1416us; 570us; 1416us; 574us; 1416us; 585us; 1416us; 598us; 1416us; 684us; 1416us; 714us; 1416us; 751us; 752us; 804us; 1416us; 808us; 1416us; 837us; 1416us; 839us; 1416us; 841us; 1416us; 843us; 1416us; 1082us; 1416us; 1083us; 1416us; 1191us; 1416us; 1246us; 1416us; 1249us; 1416us; 1251us; 1416us; 1253us; 1416us; 1297us; 1416us; 1330us; 1416us; 1333us; 1416us; 1336us; 1416us; 1339us; 1416us; 1341us; 1416us; 1343us; 1416us; 1347us; 1416us; 1350us; 1416us; 1354us; 1416us; 1357us; 1416us; 1361us; 1416us; 1364us; 1416us; 1366us; 1416us; 1368us; 1416us; 1371us; 1416us; 1373us; 1416us; 1376us; 1416us; 1391us; 1416us; 1396us; 1416us; 1399us; 1416us; 1410us; 1416us; 1414us; 1416us; 1421us; 1422us; 1425us; 1416us; 1439us; 1416us; 1443us; 1416us; 4us; 65535us; 516us; 533us; 531us; 532us; 1382us; 1432us; 1434us; 1435us; 6us; 65535us; 516us; 1436us; 531us; 1436us; 1105us; 1106us; 1382us; 1436us; 1434us; 1436us; 1437us; 1438us; 1us; 65535us; 706us; 707us; 6us; 65535us; 1446us; 1456us; 1453us; 1456us; 1462us; 1456us; 1468us; 1456us; 1469us; 1456us; 1470us; 1456us; 6us; 65535us; 1446us; 1462us; 1453us; 1462us; 1462us; 1462us; 1468us; 1462us; 1469us; 1462us; 1470us; 1462us; 6us; 65535us; 1446us; 1464us; 1453us; 1464us; 1462us; 1463us; 1468us; 1464us; 1469us; 1464us; 1470us; 1464us; 5us; 65535us; 1446us; 1447us; 1453us; 1454us; 1468us; 1465us; 1469us; 1466us; 1470us; 1467us; 102us; 65535us; 166us; 1380us; 225us; 1380us; 273us; 1380us; 279us; 1380us; 283us; 1380us; 284us; 1379us; 285us; 1380us; 286us; 1379us; 294us; 1380us; 324us; 1380us; 372us; 1380us; 378us; 1380us; 379us; 1379us; 385us; 1380us; 419us; 1380us; 420us; 1379us; 449us; 1380us; 453us; 1380us; 462us; 1379us; 470us; 475us; 485us; 486us; 500us; 511us; 504us; 511us; 507us; 508us; 509us; 1380us; 512us; 1380us; 522us; 523us; 524us; 525us; 548us; 1380us; 551us; 1380us; 570us; 1380us; 573us; 1379us; 574us; 1380us; 585us; 1356us; 598us; 1380us; 676us; 683us; 680us; 683us; 684us; 1380us; 714us; 1380us; 751us; 1379us; 804us; 1380us; 808us; 1380us; 837us; 1380us; 839us; 1380us; 841us; 1380us; 843us; 1380us; 1082us; 1380us; 1083us; 1380us; 1084us; 1379us; 1085us; 1379us; 1191us; 1380us; 1246us; 1380us; 1249us; 1380us; 1251us; 1380us; 1253us; 1380us; 1254us; 1379us; 1297us; 1380us; 1298us; 1379us; 1327us; 511us; 1329us; 511us; 1330us; 1380us; 1333us; 1380us; 1336us; 1380us; 1339us; 1380us; 1341us; 1380us; 1342us; 1379us; 1343us; 1380us; 1344us; 1379us; 1347us; 1380us; 1348us; 1379us; 1349us; 1379us; 1350us; 1380us; 1351us; 1379us; 1354us; 1380us; 1355us; 1379us; 1357us; 1380us; 1361us; 1380us; 1363us; 1379us; 1364us; 1380us; 1366us; 1380us; 1368us; 1380us; 1370us; 1379us; 1371us; 1380us; 1373us; 1380us; 1375us; 1379us; 1376us; 1380us; 1391us; 1380us; 1393us; 1379us; 1396us; 1380us; 1399us; 1380us; 1410us; 1380us; 1414us; 1380us; 1421us; 1379us; 1425us; 1380us; 1439us; 1380us; 1443us; 1380us; 1446us; 1452us; 1453us; 1452us; 1462us; 1452us; 1468us; 1452us; 1469us; 1452us; 1470us; 1452us; 106us; 65535us; 166us; 1473us; 225us; 1473us; 273us; 1473us; 279us; 1473us; 283us; 1473us; 284us; 1473us; 285us; 1473us; 286us; 1473us; 294us; 1473us; 324us; 1473us; 372us; 1473us; 378us; 1473us; 379us; 1473us; 385us; 1473us; 419us; 1473us; 420us; 1473us; 449us; 1473us; 453us; 1473us; 462us; 1473us; 470us; 1473us; 485us; 1473us; 500us; 1473us; 504us; 1473us; 507us; 1473us; 509us; 1473us; 512us; 1473us; 522us; 1473us; 524us; 1473us; 548us; 1473us; 551us; 1473us; 570us; 1473us; 573us; 1473us; 574us; 1473us; 585us; 1473us; 598us; 1473us; 676us; 1473us; 680us; 1473us; 684us; 1473us; 714us; 1473us; 751us; 1473us; 804us; 1473us; 808us; 1473us; 837us; 1473us; 839us; 1473us; 841us; 1473us; 843us; 1473us; 1082us; 1473us; 1083us; 1473us; 1084us; 1473us; 1085us; 1473us; 1183us; 1201us; 1184us; 1202us; 1185us; 1201us; 1191us; 1473us; 1203us; 1204us; 1246us; 1473us; 1249us; 1473us; 1251us; 1473us; 1253us; 1473us; 1254us; 1473us; 1297us; 1473us; 1298us; 1473us; 1327us; 1473us; 1329us; 1473us; 1330us; 1473us; 1333us; 1473us; 1336us; 1473us; 1339us; 1473us; 1341us; 1473us; 1342us; 1473us; 1343us; 1473us; 1344us; 1473us; 1347us; 1473us; 1348us; 1473us; 1349us; 1473us; 1350us; 1473us; 1351us; 1473us; 1354us; 1473us; 1355us; 1473us; 1357us; 1473us; 1361us; 1473us; 1363us; 1473us; 1364us; 1473us; 1366us; 1473us; 1368us; 1473us; 1370us; 1473us; 1371us; 1473us; 1373us; 1473us; 1375us; 1473us; 1376us; 1473us; 1391us; 1473us; 1393us; 1473us; 1396us; 1473us; 1399us; 1473us; 1410us; 1473us; 1414us; 1473us; 1421us; 1473us; 1425us; 1473us; 1439us; 1473us; 1443us; 1473us; 1446us; 1473us; 1453us; 1473us; 1462us; 1473us; 1468us; 1473us; 1469us; 1473us; 1470us; 1473us; 313us; 65535us; 32us; 1524us; 48us; 1478us; 50us; 1478us; 74us; 1524us; 88us; 1524us; 110us; 1524us; 120us; 1478us; 123us; 1478us; 141us; 1478us; 152us; 1478us; 157us; 1478us; 163us; 1524us; 166us; 1478us; 169us; 1524us; 184us; 202us; 190us; 202us; 196us; 1478us; 225us; 1478us; 261us; 1524us; 263us; 1524us; 268us; 1524us; 273us; 564us; 276us; 1524us; 279us; 1478us; 283us; 1478us; 284us; 1478us; 285us; 1478us; 286us; 1478us; 294us; 1478us; 324us; 1478us; 356us; 1526us; 359us; 1524us; 361us; 1526us; 364us; 1524us; 372us; 564us; 378us; 1478us; 379us; 1478us; 382us; 1524us; 385us; 1478us; 394us; 1526us; 397us; 1524us; 403us; 1526us; 419us; 1478us; 420us; 1478us; 426us; 427us; 429us; 430us; 449us; 564us; 453us; 1478us; 462us; 1478us; 470us; 1478us; 472us; 1478us; 509us; 1478us; 512us; 1478us; 545us; 1524us; 548us; 1478us; 551us; 1478us; 570us; 1478us; 573us; 1478us; 574us; 1478us; 583us; 584us; 585us; 1478us; 594us; 597us; 598us; 1478us; 600us; 1478us; 602us; 1478us; 608us; 1524us; 614us; 1524us; 625us; 626us; 637us; 1478us; 638us; 639us; 650us; 1478us; 656us; 1524us; 662us; 1526us; 665us; 1524us; 668us; 1524us; 678us; 1524us; 684us; 1478us; 710us; 711us; 714us; 1478us; 716us; 709us; 717us; 709us; 719us; 709us; 735us; 736us; 737us; 1526us; 738us; 1526us; 742us; 1526us; 743us; 1526us; 744us; 1526us; 745us; 1526us; 747us; 1526us; 749us; 1526us; 751us; 1478us; 754us; 1526us; 756us; 1526us; 761us; 1478us; 764us; 1526us; 767us; 1526us; 771us; 773us; 772us; 773us; 779us; 1526us; 799us; 800us; 801us; 1526us; 804us; 1478us; 806us; 1526us; 807us; 1526us; 808us; 1478us; 811us; 1526us; 812us; 1526us; 813us; 1526us; 814us; 1526us; 818us; 1478us; 821us; 1526us; 823us; 1526us; 825us; 1524us; 830us; 1524us; 837us; 1478us; 839us; 1478us; 841us; 1478us; 843us; 1478us; 848us; 1524us; 850us; 1524us; 853us; 1524us; 860us; 1524us; 864us; 1524us; 867us; 1524us; 873us; 1524us; 877us; 1524us; 881us; 1524us; 883us; 1524us; 888us; 1524us; 890us; 1524us; 892us; 1524us; 894us; 1524us; 903us; 1526us; 905us; 1524us; 912us; 1524us; 919us; 1524us; 924us; 1524us; 926us; 1524us; 928us; 1526us; 929us; 1524us; 932us; 1524us; 934us; 1526us; 935us; 1524us; 938us; 1524us; 941us; 1524us; 944us; 1524us; 946us; 1524us; 951us; 1524us; 993us; 1524us; 995us; 1524us; 998us; 1524us; 999us; 1524us; 1000us; 1524us; 1001us; 1524us; 1002us; 1524us; 1003us; 1524us; 1004us; 1524us; 1005us; 1524us; 1006us; 1524us; 1007us; 1524us; 1008us; 1524us; 1009us; 1524us; 1010us; 1524us; 1011us; 1524us; 1012us; 1524us; 1013us; 1524us; 1014us; 1524us; 1015us; 1524us; 1016us; 1524us; 1018us; 1524us; 1021us; 1524us; 1022us; 1526us; 1024us; 1526us; 1029us; 1526us; 1036us; 1526us; 1040us; 1524us; 1041us; 1524us; 1045us; 1524us; 1047us; 1524us; 1051us; 1524us; 1053us; 1524us; 1057us; 1524us; 1059us; 1524us; 1060us; 1524us; 1061us; 1524us; 1062us; 1524us; 1064us; 1524us; 1065us; 1524us; 1067us; 1524us; 1068us; 1524us; 1070us; 1524us; 1071us; 1524us; 1073us; 1524us; 1074us; 1524us; 1076us; 1524us; 1077us; 1524us; 1079us; 1524us; 1080us; 1524us; 1082us; 1478us; 1083us; 1478us; 1084us; 1478us; 1085us; 1478us; 1091us; 1524us; 1093us; 1524us; 1095us; 1524us; 1096us; 1524us; 1099us; 1524us; 1104us; 1524us; 1107us; 1524us; 1108us; 1524us; 1109us; 1524us; 1112us; 1524us; 1114us; 1524us; 1115us; 1524us; 1120us; 1524us; 1130us; 1524us; 1137us; 1524us; 1142us; 1524us; 1145us; 1524us; 1148us; 1524us; 1151us; 1524us; 1152us; 1524us; 1163us; 1524us; 1170us; 1524us; 1171us; 1524us; 1177us; 1524us; 1183us; 1524us; 1184us; 1524us; 1185us; 1524us; 1191us; 1478us; 1197us; 1524us; 1206us; 1524us; 1218us; 1524us; 1219us; 1524us; 1220us; 1524us; 1221us; 1524us; 1223us; 1524us; 1225us; 1526us; 1232us; 1524us; 1235us; 1524us; 1236us; 1524us; 1240us; 1524us; 1246us; 1478us; 1249us; 1478us; 1251us; 1478us; 1253us; 1478us; 1254us; 1478us; 1259us; 1524us; 1262us; 1478us; 1264us; 1524us; 1267us; 1478us; 1269us; 1524us; 1273us; 1478us; 1275us; 1524us; 1297us; 1478us; 1298us; 1478us; 1304us; 1526us; 1306us; 1524us; 1309us; 1526us; 1311us; 1524us; 1318us; 1526us; 1321us; 1526us; 1330us; 1478us; 1333us; 1478us; 1336us; 1478us; 1339us; 1478us; 1341us; 1478us; 1342us; 1478us; 1343us; 1478us; 1344us; 1478us; 1345us; 1346us; 1347us; 1478us; 1348us; 1478us; 1349us; 1478us; 1350us; 1478us; 1351us; 1478us; 1352us; 1353us; 1354us; 1478us; 1355us; 1478us; 1357us; 1478us; 1361us; 1478us; 1363us; 1478us; 1364us; 1478us; 1366us; 1478us; 1368us; 1478us; 1370us; 1478us; 1371us; 1478us; 1373us; 1478us; 1375us; 1478us; 1376us; 1478us; 1391us; 1478us; 1393us; 1478us; 1396us; 1478us; 1399us; 1478us; 1410us; 1478us; 1414us; 1478us; 1421us; 1478us; 1425us; 1478us; 1433us; 1478us; 1439us; 1478us; 1443us; 1478us; 1446us; 1478us; 1453us; 1478us; 1462us; 1478us; 1468us; 1478us; 1469us; 1478us; 1470us; 1478us; 1471us; 1472us; 1474us; 1476us; 1475us; 1476us; 1479us; 1480us; 1528us; 1526us; 113us; 65535us; 48us; 49us; 50us; 51us; 120us; 135us; 123us; 124us; 141us; 143us; 152us; 126us; 157us; 158us; 166us; 1378us; 184us; 192us; 190us; 192us; 196us; 197us; 225us; 1378us; 273us; 1378us; 279us; 1378us; 283us; 1378us; 284us; 1378us; 285us; 1378us; 286us; 1378us; 294us; 1378us; 324us; 1378us; 372us; 1378us; 378us; 1378us; 379us; 1378us; 385us; 1378us; 419us; 1378us; 420us; 1378us; 449us; 1378us; 453us; 1378us; 462us; 1378us; 470us; 471us; 472us; 473us; 509us; 1378us; 512us; 1378us; 548us; 1378us; 551us; 1378us; 570us; 1378us; 573us; 1378us; 574us; 1378us; 585us; 1378us; 598us; 1378us; 600us; 601us; 602us; 603us; 637us; 640us; 650us; 640us; 684us; 1378us; 714us; 1378us; 751us; 1378us; 761us; 820us; 804us; 1378us; 808us; 1378us; 818us; 820us; 837us; 1378us; 839us; 1378us; 841us; 1378us; 843us; 1378us; 1082us; 1378us; 1083us; 1378us; 1084us; 1378us; 1085us; 1378us; 1191us; 1378us; 1246us; 1378us; 1249us; 1378us; 1251us; 1378us; 1253us; 1378us; 1254us; 1378us; 1262us; 1263us; 1267us; 1268us; 1273us; 1274us; 1297us; 1378us; 1298us; 1378us; 1330us; 1378us; 1333us; 1378us; 1336us; 1378us; 1339us; 1378us; 1341us; 1378us; 1342us; 1378us; 1343us; 1378us; 1344us; 1378us; 1347us; 1378us; 1348us; 1378us; 1349us; 1378us; 1350us; 1378us; 1351us; 1378us; 1354us; 1378us; 1355us; 1378us; 1357us; 1378us; 1361us; 1378us; 1363us; 1378us; 1364us; 1378us; 1366us; 1378us; 1368us; 1378us; 1370us; 1378us; 1371us; 1378us; 1373us; 1378us; 1375us; 1378us; 1376us; 1378us; 1391us; 1378us; 1393us; 1378us; 1396us; 1378us; 1399us; 1378us; 1410us; 1378us; 1414us; 1378us; 1421us; 1378us; 1425us; 1378us; 1433us; 1434us; 1439us; 1378us; 1443us; 1378us; 1446us; 1451us; 1453us; 1451us; 1462us; 1451us; 1468us; 1451us; 1469us; 1451us; 1470us; 1451us; 180us; 65535us; 32us; 1525us; 74us; 1525us; 88us; 1525us; 110us; 1525us; 163us; 1525us; 169us; 1525us; 261us; 1525us; 263us; 1525us; 268us; 1525us; 276us; 1525us; 356us; 1527us; 359us; 1525us; 361us; 1527us; 364us; 1525us; 382us; 1525us; 394us; 1527us; 397us; 1525us; 403us; 1527us; 545us; 1525us; 608us; 1525us; 614us; 1525us; 656us; 1525us; 662us; 1527us; 665us; 1525us; 668us; 1525us; 678us; 1525us; 737us; 1527us; 738us; 1527us; 742us; 1527us; 743us; 1527us; 744us; 1527us; 745us; 1527us; 747us; 1527us; 749us; 1527us; 754us; 1527us; 756us; 1527us; 764us; 1527us; 767us; 1527us; 779us; 1527us; 801us; 1527us; 806us; 1527us; 807us; 1527us; 811us; 1527us; 812us; 1527us; 813us; 1527us; 814us; 1527us; 821us; 1527us; 823us; 1527us; 825us; 1525us; 830us; 1525us; 848us; 1525us; 850us; 1525us; 853us; 1525us; 860us; 1525us; 864us; 1525us; 867us; 1525us; 873us; 1525us; 877us; 1525us; 881us; 1525us; 883us; 1525us; 888us; 1525us; 890us; 1525us; 892us; 1525us; 894us; 1525us; 903us; 1527us; 905us; 1525us; 912us; 1525us; 919us; 1525us; 924us; 1525us; 926us; 1525us; 928us; 1527us; 929us; 1525us; 932us; 1525us; 934us; 1527us; 935us; 1525us; 938us; 1525us; 941us; 1525us; 944us; 1525us; 946us; 1525us; 951us; 1525us; 993us; 1525us; 995us; 1525us; 998us; 1525us; 999us; 1525us; 1000us; 1525us; 1001us; 1525us; 1002us; 1525us; 1003us; 1525us; 1004us; 1525us; 1005us; 1525us; 1006us; 1525us; 1007us; 1525us; 1008us; 1525us; 1009us; 1525us; 1010us; 1525us; 1011us; 1525us; 1012us; 1525us; 1013us; 1525us; 1014us; 1525us; 1015us; 1525us; 1016us; 1525us; 1018us; 1525us; 1021us; 1525us; 1022us; 1527us; 1024us; 1527us; 1029us; 1527us; 1036us; 1527us; 1040us; 1525us; 1041us; 1525us; 1045us; 1525us; 1047us; 1525us; 1051us; 1525us; 1053us; 1525us; 1057us; 1525us; 1059us; 1525us; 1060us; 1525us; 1061us; 1525us; 1062us; 1525us; 1064us; 1525us; 1065us; 1525us; 1067us; 1525us; 1068us; 1525us; 1070us; 1525us; 1071us; 1525us; 1073us; 1525us; 1074us; 1525us; 1076us; 1525us; 1077us; 1525us; 1079us; 1525us; 1080us; 1525us; 1091us; 1525us; 1093us; 1525us; 1095us; 1525us; 1096us; 1525us; 1099us; 1525us; 1104us; 1525us; 1107us; 1525us; 1108us; 1525us; 1109us; 1525us; 1112us; 1525us; 1114us; 1525us; 1115us; 1525us; 1120us; 1525us; 1130us; 1525us; 1137us; 1525us; 1142us; 1525us; 1145us; 1525us; 1148us; 1525us; 1151us; 1525us; 1152us; 1525us; 1163us; 1525us; 1170us; 1525us; 1171us; 1525us; 1177us; 1525us; 1183us; 1525us; 1184us; 1525us; 1185us; 1525us; 1197us; 1525us; 1206us; 1525us; 1218us; 1525us; 1219us; 1525us; 1220us; 1525us; 1221us; 1525us; 1223us; 1525us; 1225us; 1527us; 1232us; 1525us; 1235us; 1525us; 1236us; 1525us; 1240us; 1525us; 1259us; 1525us; 1264us; 1525us; 1269us; 1525us; 1275us; 1525us; 1304us; 1527us; 1306us; 1525us; 1309us; 1527us; 1311us; 1525us; 1318us; 1527us; 1321us; 1527us; 1528us; 1527us; 6us; 65535us; 558us; 1483us; 779us; 1483us; 1130us; 1483us; 1184us; 1483us; 1185us; 1483us; 1482us; 1483us; 2us; 65535us; 1487us; 1523us; 1521us; 1522us; 6us; 65535us; 558us; 1486us; 779us; 1486us; 1130us; 1486us; 1184us; 1486us; 1185us; 1486us; 1482us; 1486us; 140us; 65535us; 32us; 1531us; 74us; 1531us; 88us; 1531us; 110us; 1531us; 163us; 1531us; 169us; 1531us; 261us; 1531us; 263us; 1531us; 268us; 1531us; 276us; 1531us; 359us; 1531us; 364us; 1531us; 382us; 1531us; 397us; 1531us; 545us; 1531us; 608us; 1531us; 614us; 1531us; 656us; 1531us; 665us; 1531us; 668us; 1531us; 678us; 1531us; 825us; 1531us; 830us; 1531us; 848us; 1531us; 850us; 1531us; 853us; 1531us; 860us; 1531us; 864us; 1531us; 867us; 1531us; 873us; 1531us; 877us; 1531us; 881us; 1531us; 883us; 1531us; 888us; 1531us; 890us; 1531us; 892us; 1531us; 894us; 1531us; 905us; 1531us; 912us; 1531us; 919us; 1531us; 924us; 1531us; 926us; 1531us; 929us; 1531us; 932us; 1531us; 935us; 1531us; 938us; 1531us; 941us; 1531us; 944us; 1531us; 946us; 1531us; 951us; 1531us; 993us; 1531us; 995us; 1531us; 998us; 1531us; 999us; 1531us; 1000us; 1531us; 1001us; 1531us; 1002us; 1531us; 1003us; 1531us; 1004us; 1531us; 1005us; 1531us; 1006us; 1531us; 1007us; 1531us; 1008us; 1531us; 1009us; 1531us; 1010us; 1531us; 1011us; 1531us; 1012us; 1531us; 1013us; 1531us; 1014us; 1531us; 1015us; 1531us; 1016us; 1531us; 1018us; 1531us; 1021us; 1531us; 1040us; 1531us; 1041us; 1531us; 1045us; 1531us; 1047us; 1531us; 1051us; 1531us; 1053us; 1531us; 1057us; 1531us; 1059us; 1531us; 1060us; 1531us; 1061us; 1531us; 1062us; 1531us; 1064us; 1531us; 1065us; 1531us; 1067us; 1531us; 1068us; 1531us; 1070us; 1531us; 1071us; 1531us; 1073us; 1531us; 1074us; 1531us; 1076us; 1531us; 1077us; 1531us; 1079us; 1531us; 1080us; 1531us; 1091us; 1531us; 1093us; 1531us; 1095us; 1531us; 1096us; 1531us; 1099us; 1531us; 1104us; 1531us; 1107us; 1531us; 1108us; 1531us; 1109us; 1127us; 1112us; 1127us; 1114us; 1531us; 1115us; 1531us; 1120us; 1531us; 1130us; 1531us; 1137us; 1531us; 1142us; 1531us; 1145us; 1531us; 1148us; 1531us; 1151us; 1531us; 1152us; 1531us; 1163us; 1531us; 1170us; 1531us; 1171us; 1531us; 1177us; 1531us; 1183us; 1531us; 1184us; 1531us; 1185us; 1531us; 1197us; 1531us; 1206us; 1531us; 1218us; 1531us; 1219us; 1531us; 1220us; 1531us; 1221us; 1531us; 1223us; 1531us; 1232us; 1531us; 1235us; 1531us; 1236us; 1531us; 1240us; 1531us; 1259us; 1531us; 1264us; 1531us; 1269us; 1531us; 1275us; 1531us; 1306us; 1531us; 1311us; 1531us; 40us; 65535us; 356us; 402us; 361us; 402us; 394us; 402us; 403us; 404us; 662us; 402us; 737us; 402us; 738us; 402us; 742us; 402us; 743us; 402us; 744us; 402us; 745us; 402us; 747us; 402us; 749us; 402us; 754us; 402us; 756us; 402us; 764us; 402us; 767us; 402us; 779us; 402us; 801us; 402us; 806us; 402us; 807us; 402us; 811us; 402us; 812us; 402us; 813us; 402us; 814us; 402us; 821us; 402us; 823us; 402us; 903us; 402us; 928us; 402us; 934us; 402us; 1022us; 402us; 1024us; 402us; 1029us; 402us; 1036us; 402us; 1225us; 402us; 1304us; 402us; 1309us; 402us; 1318us; 402us; 1321us; 402us; 1528us; 1529us; 138us; 65535us; 32us; 1119us; 74us; 1119us; 88us; 1119us; 110us; 1119us; 163us; 164us; 169us; 1119us; 261us; 267us; 263us; 267us; 268us; 269us; 276us; 277us; 359us; 1119us; 364us; 1119us; 382us; 383us; 397us; 1119us; 545us; 557us; 608us; 1119us; 614us; 1119us; 656us; 1119us; 665us; 1119us; 668us; 1119us; 678us; 1119us; 825us; 1119us; 830us; 1119us; 848us; 1119us; 850us; 1119us; 853us; 1119us; 860us; 1119us; 864us; 1119us; 867us; 1119us; 873us; 1119us; 877us; 1119us; 881us; 1119us; 883us; 1119us; 888us; 1119us; 890us; 1119us; 892us; 1119us; 894us; 1119us; 905us; 1119us; 912us; 1119us; 919us; 1119us; 924us; 1119us; 926us; 1119us; 929us; 1119us; 932us; 1119us; 935us; 1119us; 938us; 1119us; 941us; 1119us; 944us; 1119us; 946us; 1119us; 951us; 1119us; 993us; 1119us; 995us; 1119us; 998us; 1119us; 999us; 1119us; 1000us; 1119us; 1001us; 1119us; 1002us; 1119us; 1003us; 1119us; 1004us; 1119us; 1005us; 1119us; 1006us; 1119us; 1007us; 1119us; 1008us; 1119us; 1009us; 1119us; 1010us; 1119us; 1011us; 1119us; 1012us; 1119us; 1013us; 1119us; 1014us; 1119us; 1015us; 1119us; 1016us; 1119us; 1018us; 1119us; 1021us; 1119us; 1040us; 1119us; 1041us; 1119us; 1045us; 1119us; 1047us; 1119us; 1051us; 1119us; 1053us; 1119us; 1057us; 1119us; 1059us; 1119us; 1060us; 1119us; 1061us; 1119us; 1062us; 1119us; 1064us; 1119us; 1065us; 1119us; 1067us; 1119us; 1068us; 1119us; 1070us; 1119us; 1071us; 1119us; 1073us; 1119us; 1074us; 1119us; 1076us; 1119us; 1077us; 1119us; 1079us; 1119us; 1080us; 1119us; 1091us; 1119us; 1093us; 1119us; 1095us; 1119us; 1096us; 1119us; 1099us; 1119us; 1104us; 1119us; 1107us; 1119us; 1108us; 1119us; 1114us; 1116us; 1115us; 1116us; 1120us; 1119us; 1130us; 1119us; 1137us; 1119us; 1142us; 1119us; 1145us; 1119us; 1148us; 1119us; 1151us; 1119us; 1152us; 1119us; 1163us; 1119us; 1170us; 1119us; 1171us; 1119us; 1177us; 1119us; 1183us; 1119us; 1184us; 1119us; 1185us; 1119us; 1197us; 1119us; 1206us; 1119us; 1218us; 1119us; 1219us; 1119us; 1220us; 1119us; 1221us; 1119us; 1223us; 1119us; 1232us; 1119us; 1235us; 1119us; 1236us; 1119us; 1240us; 1119us; 1259us; 1119us; 1264us; 1119us; 1269us; 1119us; 1275us; 1119us; 1306us; 1119us; 1311us; 1119us; 13us; 65535us; 39us; 1535us; 45us; 1535us; 79us; 1535us; 80us; 1541us; 83us; 1535us; 89us; 1535us; 93us; 1535us; 94us; 1535us; 95us; 1535us; 96us; 1535us; 100us; 1535us; 1535us; 1535us; 1541us; 1541us; 11us; 65535us; 39us; 84us; 45us; 101us; 79us; 84us; 83us; 84us; 89us; 90us; 93us; 101us; 94us; 101us; 95us; 101us; 96us; 98us; 100us; 101us; 1535us; 1536us; 4us; 65535us; 17us; 1539us; 19us; 1539us; 21us; 1539us; 1539us; 1539us; 4us; 65535us; 17us; 23us; 19us; 25us; 21us; 27us; 1539us; 1540us; 0us; 65535us; 2us; 65535us; 80us; 81us; 1541us; 1542us; 14us; 65535us; 185us; 190us; 247us; 1556us; 342us; 1556us; 437us; 1556us; 576us; 577us; 795us; 823us; 816us; 818us; 845us; 848us; 846us; 848us; 847us; 848us; 1257us; 1273us; 1260us; 1273us; 1265us; 1273us; 1270us; 1273us; 4us; 65535us; 145us; 146us; 411us; 412us; 414us; 415us; 417us; 418us; 2us; 65535us; 1289us; 1290us; 1299us; 1300us; 4us; 65535us; 376us; 377us; 387us; 388us; 398us; 399us; 443us; 444us; 2us; 65535us; 57us; 58us; 65us; 66us; 19us; 65535us; 187us; 188us; 214us; 215us; 313us; 314us; 539us; 569us; 546us; 547us; 549us; 550us; 552us; 553us; 555us; 556us; 564us; 565us; 567us; 568us; 904us; 949us; 931us; 932us; 937us; 938us; 943us; 944us; 1226us; 1227us; 1229us; 1230us; 1276us; 1280us; 1277us; 1278us; 1300us; 1301us; 11us; 65535us; 185us; 186us; 247us; 248us; 342us; 343us; 437us; 438us; 576us; 579us; 795us; 822us; 816us; 817us; 1257us; 1258us; 1260us; 1261us; 1265us; 1266us; 1270us; 1271us; 2us; 65535us; 604us; 605us; 610us; 611us; 2us; 65535us; 1317us; 1318us; 1320us; 1321us; 10us; 65535us; 160us; 161us; 274us; 275us; 347us; 356us; 349us; 356us; 354us; 356us; 375us; 361us; 381us; 382us; 441us; 661us; 442us; 361us; 658us; 661us; 7us; 65535us; 161us; 162us; 287us; 582us; 289us; 582us; 390us; 582us; 392us; 582us; 580us; 582us; 661us; 662us; 4us; 65535us; 893us; 894us; 904us; 905us; 911us; 912us; 918us; 919us; 9us; 65535us; 895us; 896us; 898us; 899us; 901us; 902us; 906us; 907us; 909us; 910us; 913us; 914us; 916us; 917us; 920us; 921us; 922us; 923us; 2us; 65535us; 120us; 136us; 127us; 136us; 4us; 65535us; 123us; 174us; 141us; 178us; 152us; 178us; 171us; 174us; 2us; 65535us; 70us; 152us; 151us; 152us; 2us; 65535us; 463us; 464us; 1241us; 1242us; 10us; 65535us; 192us; 193us; 197us; 198us; 306us; 307us; 420us; 422us; 626us; 627us; 638us; 642us; 641us; 642us; 1084us; 1087us; 1085us; 1086us; 1254us; 1255us; 5us; 65535us; 164us; 493us; 277us; 493us; 383us; 493us; 471us; 487us; 746us; 493us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 3us; 5us; 28us; 30us; 32us; 40us; 45us; 51us; 56us; 61us; 63us; 65us; 72us; 75us; 77us; 80us; 83us; 85us; 88us; 91us; 94us; 97us; 103us; 113us; 118us; 127us; 137us; 147us; 162us; 164us; 166us; 169us; 172us; 174us; 184us; 194us; 197us; 200us; 284us; 403us; 522us; 524us; 527us; 530us; 533us; 536us; 540us; 542us; 545us; 548us; 551us; 555us; 564us; 569us; 572us; 575us; 578us; 590us; 597us; 600us; 604us; 607us; 611us; 615us; 619us; 623us; 634us; 636us; 639us; 643us; 646us; 649us; 660us; 699us; 708us; 767us; 780us; 782us; 787us; 793us; 796us; 799us; 802us; 805us; 809us; 812us; 817us; 822us; 825us; 831us; 838us; 840us; 846us; 856us; 858us; 860us; 864us; 870us; 872us; 874us; 879us; 883us; 885us; 889us; 893us; 898us; 902us; 908us; 912us; 916us; 918us; 922us; 926us; 930us; 933us; 936us; 942us; 947us; 950us; 957us; 964us; 966us; 968us; 983us; 1094us; 1102us; 1213us; 1323us; 1327us; 1332us; 1443us; 1445us; 1447us; 1451us; 1454us; 1456us; 1461us; 1464us; 1470us; 1473us; 1475us; 1478us; 1480us; 1482us; 1484us; 1487us; 1663us; 1839us; 1843us; 1847us; 1850us; 1852us; 1864us; 1876us; 1888us; 1920us; 1927us; 1966us; 1968us; 1989us; 2010us; 2031us; 2033us; 2036us; 2039us; 2043us; 2066us; 2068us; 2075us; 2124us; 2178us; 2226us; 2333us; 2335us; 2339us; 2342us; 2345us; 2352us; 2359us; 2361us; 2363us; 2366us; 2369us; 2371us; 2478us; 2601us; 2724us; 2728us; 2858us; 2861us; 2866us; 3002us; 3138us; 3312us; 3448us; 3584us; 3588us; 3592us; 3728us; 3730us; 3733us; 3737us; 3742us; 3746us; 3749us; 3751us; 3755us; 3757us; 3761us; 3763us; 3765us; 3767us; 3772us; 3774us; 3776us; 3778us; 3781us; 3783us; 3788us; 3794us; 3796us; 3903us; 4010us; 4014us; 4020us; 4024us; 4034us; 4044us; 4047us; 4059us; 4061us; 4091us; 4121us; 4127us; 4130us; 4216us; 4302us; 4366us; 4387us; 4391us; 4394us; 4458us; 4525us; 4530us; 4537us; 4539us; 4546us; 4553us; 4560us; 4566us; 4669us; 4776us; 5090us; 5204us; 5385us; 5392us; 5395us; 5402us; 5543us; 5584us; 5723us; 5737us; 5749us; 5754us; 5759us; 5760us; 5763us; 5778us; 5783us; 5786us; 5791us; 5794us; 5814us; 5826us; 5829us; 5832us; 5843us; 5851us; 5856us; 5866us; 5869us; 5874us; 5877us; 5880us; 5891us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 6us; 2us; 6us; 9us; 1us; 7us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 2us; 13us; 16us; 1us; 13us; 2us; 14us; 17us; 1us; 14us; 2us; 15us; 18us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 2us; 19us; 20us; 1us; 20us; 8us; 21us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 8us; 21us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 22us; 21us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 1us; 22us; 2us; 23us; 24us; 1us; 23us; 1us; 24us; 1us; 24us; 3us; 25us; 46us; 49us; 1us; 25us; 2us; 26us; 27us; 1us; 26us; 1us; 27us; 1us; 27us; 3us; 28us; 57us; 62us; 1us; 28us; 1us; 29us; 1us; 29us; 3us; 29us; 783us; 784us; 1us; 30us; 3us; 30us; 783us; 784us; 2us; 31us; 32us; 1us; 32us; 2us; 33us; 34us; 1us; 33us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 2us; 36us; 37us; 1us; 37us; 2us; 38us; 39us; 1us; 38us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 6us; 41us; 90us; 91us; 92us; 93us; 95us; 6us; 41us; 90us; 91us; 92us; 93us; 95us; 3us; 41us; 90us; 91us; 1us; 41us; 1us; 42us; 11us; 43us; 53us; 54us; 55us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 11us; 43us; 53us; 54us; 55us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 2us; 43us; 71us; 1us; 43us; 1us; 44us; 1us; 45us; 2us; 46us; 49us; 2us; 48us; 50us; 2us; 48us; 50us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 49us; 1us; 51us; 10us; 53us; 54us; 55us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 10us; 53us; 54us; 55us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 24us; 53us; 54us; 55us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 2us; 53us; 54us; 1us; 53us; 1us; 56us; 2us; 57us; 62us; 3us; 57us; 62us; 78us; 3us; 57us; 62us; 83us; 4us; 58us; 59us; 60us; 61us; 1us; 58us; 2us; 59us; 61us; 1us; 59us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 63us; 1us; 64us; 7us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 7us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 1us; 65us; 4us; 65us; 464us; 465us; 466us; 1us; 66us; 5us; 66us; 467us; 468us; 469us; 470us; 1us; 67us; 2us; 68us; 69us; 1us; 68us; 1us; 68us; 4us; 69us; 162us; 163us; 164us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 71us; 1us; 71us; 1us; 71us; 1us; 72us; 3us; 73us; 98us; 99us; 3us; 73us; 783us; 784us; 1us; 73us; 3us; 74us; 783us; 784us; 4us; 75us; 76us; 77us; 78us; 1us; 75us; 1us; 75us; 2us; 76us; 77us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 79us; 3us; 80us; 783us; 784us; 3us; 81us; 82us; 83us; 2us; 81us; 82us; 1us; 81us; 1us; 82us; 1us; 83us; 2us; 85us; 86us; 1us; 85us; 3us; 86us; 783us; 784us; 1us; 87us; 1us; 87us; 1us; 87us; 1us; 88us; 1us; 89us; 5us; 90us; 91us; 92us; 93us; 95us; 5us; 90us; 91us; 92us; 93us; 95us; 2us; 90us; 91us; 2us; 90us; 91us; 1us; 90us; 1us; 91us; 1us; 92us; 1us; 93us; 1us; 94us; 3us; 94us; 783us; 784us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 97us; 22us; 97us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 2us; 98us; 99us; 1us; 98us; 1us; 98us; 1us; 99us; 1us; 99us; 1us; 99us; 1us; 99us; 1us; 100us; 1us; 100us; 1us; 100us; 1us; 101us; 2us; 103us; 104us; 1us; 104us; 1us; 105us; 2us; 105us; 107us; 1us; 105us; 1us; 105us; 1us; 105us; 1us; 106us; 2us; 107us; 856us; 1us; 107us; 3us; 108us; 783us; 784us; 1us; 108us; 1us; 108us; 1us; 109us; 1us; 109us; 3us; 109us; 783us; 784us; 1us; 109us; 1us; 109us; 1us; 110us; 1us; 111us; 2us; 112us; 782us; 1us; 113us; 1us; 114us; 1us; 114us; 2us; 115us; 116us; 1us; 115us; 1us; 115us; 2us; 117us; 118us; 1us; 117us; 1us; 117us; 1us; 118us; 3us; 119us; 128us; 129us; 1us; 119us; 1us; 119us; 1us; 119us; 1us; 119us; 1us; 119us; 1us; 119us; 1us; 120us; 1us; 120us; 1us; 121us; 1us; 122us; 1us; 123us; 1us; 123us; 1us; 123us; 1us; 124us; 3us; 125us; 126us; 127us; 2us; 125us; 126us; 1us; 125us; 1us; 126us; 1us; 127us; 1us; 127us; 2us; 128us; 129us; 2us; 128us; 129us; 1us; 128us; 1us; 129us; 2us; 130us; 131us; 2us; 130us; 131us; 1us; 130us; 1us; 131us; 2us; 132us; 133us; 2us; 132us; 133us; 1us; 132us; 1us; 133us; 1us; 134us; 1us; 135us; 1us; 135us; 1us; 135us; 3us; 137us; 156us; 157us; 4us; 137us; 193us; 199us; 201us; 1us; 137us; 1us; 138us; 1us; 139us; 1us; 140us; 1us; 141us; 1us; 142us; 1us; 143us; 2us; 144us; 145us; 1us; 145us; 1us; 147us; 1us; 147us; 2us; 148us; 149us; 2us; 148us; 149us; 1us; 148us; 1us; 149us; 2us; 150us; 151us; 1us; 151us; 1us; 151us; 7us; 152us; 153us; 154us; 155us; 156us; 157us; 158us; 11us; 152us; 153us; 154us; 155us; 156us; 157us; 158us; 235us; 236us; 237us; 238us; 7us; 152us; 153us; 154us; 155us; 156us; 157us; 158us; 11us; 152us; 153us; 154us; 155us; 156us; 157us; 158us; 235us; 236us; 237us; 238us; 1us; 152us; 1us; 152us; 1us; 152us; 1us; 152us; 1us; 152us; 1us; 152us; 1us; 152us; 1us; 152us; 1us; 152us; 1us; 153us; 5us; 153us; 730us; 731us; 732us; 733us; 1us; 154us; 5us; 154us; 730us; 731us; 732us; 733us; 1us; 155us; 1us; 155us; 1us; 156us; 1us; 156us; 1us; 157us; 1us; 157us; 1us; 158us; 1us; 158us; 1us; 158us; 1us; 159us; 1us; 159us; 1us; 159us; 1us; 160us; 1us; 160us; 1us; 160us; 3us; 162us; 163us; 164us; 1us; 163us; 1us; 163us; 1us; 164us; 1us; 164us; 1us; 164us; 1us; 164us; 1us; 164us; 1us; 164us; 1us; 164us; 3us; 165us; 174us; 175us; 1us; 165us; 1us; 165us; 1us; 165us; 1us; 165us; 1us; 165us; 1us; 165us; 1us; 166us; 1us; 166us; 1us; 167us; 1us; 168us; 1us; 169us; 1us; 169us; 1us; 169us; 1us; 170us; 3us; 171us; 172us; 173us; 2us; 171us; 172us; 1us; 171us; 1us; 172us; 2us; 173us; 180us; 1us; 173us; 2us; 174us; 175us; 2us; 174us; 175us; 1us; 174us; 1us; 175us; 2us; 176us; 177us; 2us; 176us; 177us; 1us; 176us; 1us; 177us; 1us; 178us; 1us; 179us; 1us; 179us; 1us; 179us; 1us; 180us; 1us; 180us; 1us; 182us; 1us; 182us; 2us; 183us; 184us; 2us; 183us; 184us; 1us; 183us; 1us; 184us; 2us; 185us; 186us; 1us; 186us; 1us; 186us; 1us; 187us; 1us; 187us; 1us; 187us; 1us; 187us; 1us; 187us; 2us; 188us; 189us; 2us; 188us; 189us; 2us; 188us; 189us; 1us; 188us; 1us; 188us; 1us; 189us; 2us; 190us; 191us; 1us; 191us; 10us; 192us; 193us; 194us; 195us; 196us; 197us; 198us; 199us; 200us; 201us; 14us; 192us; 193us; 194us; 195us; 196us; 197us; 198us; 199us; 200us; 201us; 235us; 236us; 237us; 238us; 10us; 192us; 193us; 194us; 195us; 196us; 197us; 198us; 199us; 200us; 201us; 14us; 192us; 193us; 194us; 195us; 196us; 197us; 198us; 199us; 200us; 201us; 235us; 236us; 237us; 238us; 1us; 192us; 1us; 193us; 1us; 194us; 1us; 194us; 1us; 194us; 1us; 195us; 5us; 195us; 730us; 731us; 732us; 733us; 1us; 195us; 1us; 196us; 1us; 196us; 1us; 196us; 1us; 196us; 1us; 196us; 1us; 196us; 1us; 196us; 1us; 196us; 1us; 197us; 1us; 198us; 1us; 198us; 1us; 199us; 1us; 199us; 1us; 200us; 1us; 200us; 1us; 200us; 1us; 200us; 1us; 200us; 1us; 200us; 1us; 201us; 1us; 201us; 1us; 202us; 1us; 203us; 1us; 203us; 1us; 205us; 1us; 206us; 1us; 207us; 1us; 208us; 1us; 209us; 1us; 211us; 1us; 211us; 1us; 211us; 1us; 213us; 1us; 213us; 1us; 213us; 1us; 215us; 1us; 215us; 1us; 215us; 2us; 217us; 218us; 6us; 217us; 218us; 730us; 731us; 732us; 733us; 1us; 217us; 1us; 218us; 1us; 218us; 1us; 218us; 1us; 219us; 1us; 221us; 1us; 221us; 1us; 222us; 2us; 224us; 225us; 1us; 224us; 1us; 225us; 2us; 226us; 227us; 2us; 226us; 227us; 1us; 226us; 1us; 227us; 1us; 228us; 2us; 229us; 230us; 2us; 229us; 230us; 1us; 229us; 2us; 231us; 232us; 3us; 231us; 232us; 343us; 2us; 231us; 232us; 1us; 231us; 1us; 231us; 1us; 232us; 1us; 233us; 1us; 234us; 4us; 235us; 236us; 237us; 238us; 4us; 235us; 236us; 237us; 238us; 1us; 235us; 1us; 236us; 1us; 237us; 5us; 238us; 734us; 751us; 752us; 754us; 1us; 238us; 1us; 238us; 3us; 239us; 240us; 241us; 2us; 239us; 240us; 1us; 239us; 1us; 240us; 1us; 241us; 1us; 241us; 2us; 242us; 748us; 1us; 242us; 1us; 242us; 1us; 243us; 1us; 244us; 1us; 245us; 1us; 246us; 1us; 247us; 3us; 248us; 249us; 250us; 4us; 248us; 250us; 783us; 784us; 1us; 249us; 3us; 249us; 783us; 784us; 1us; 250us; 1us; 251us; 1us; 252us; 2us; 252us; 253us; 1us; 252us; 2us; 253us; 256us; 3us; 253us; 257us; 259us; 1us; 253us; 2us; 253us; 257us; 1us; 253us; 1us; 254us; 1us; 255us; 1us; 255us; 1us; 256us; 1us; 256us; 1us; 256us; 1us; 256us; 1us; 257us; 1us; 258us; 1us; 261us; 1us; 261us; 1us; 261us; 1us; 261us; 1us; 261us; 1us; 262us; 2us; 264us; 399us; 1us; 267us; 2us; 267us; 268us; 2us; 268us; 696us; 2us; 268us; 698us; 1us; 268us; 1us; 268us; 1us; 269us; 1us; 270us; 1us; 270us; 1us; 270us; 1us; 270us; 7us; 271us; 272us; 273us; 274us; 275us; 277us; 278us; 1us; 271us; 1us; 271us; 6us; 272us; 273us; 274us; 275us; 277us; 278us; 1us; 272us; 2us; 273us; 278us; 1us; 273us; 1us; 274us; 1us; 275us; 1us; 275us; 1us; 275us; 1us; 276us; 1us; 276us; 1us; 276us; 1us; 276us; 1us; 276us; 1us; 276us; 1us; 276us; 1us; 276us; 1us; 276us; 1us; 277us; 1us; 277us; 1us; 278us; 1us; 279us; 1us; 279us; 1us; 280us; 1us; 280us; 1us; 280us; 2us; 281us; 294us; 1us; 282us; 2us; 283us; 284us; 1us; 283us; 1us; 283us; 4us; 285us; 286us; 287us; 288us; 4us; 285us; 286us; 287us; 288us; 4us; 285us; 286us; 287us; 288us; 1us; 285us; 1us; 286us; 1us; 286us; 1us; 286us; 1us; 287us; 1us; 287us; 1us; 287us; 1us; 288us; 1us; 288us; 1us; 288us; 1us; 289us; 5us; 290us; 291us; 785us; 787us; 788us; 1us; 290us; 1us; 290us; 1us; 291us; 1us; 291us; 1us; 291us; 5us; 292us; 293us; 295us; 296us; 782us; 1us; 292us; 2us; 293us; 296us; 2us; 293us; 296us; 2us; 293us; 296us; 1us; 294us; 1us; 295us; 1us; 295us; 1us; 297us; 6us; 298us; 299us; 730us; 731us; 732us; 733us; 1us; 298us; 1us; 298us; 2us; 300us; 301us; 2us; 300us; 856us; 1us; 300us; 1us; 301us; 1us; 302us; 1us; 302us; 1us; 303us; 1us; 303us; 1us; 303us; 1us; 303us; 1us; 303us; 1us; 304us; 1us; 304us; 1us; 305us; 1us; 305us; 1us; 306us; 1us; 307us; 1us; 307us; 1us; 307us; 1us; 307us; 1us; 307us; 2us; 308us; 309us; 1us; 309us; 1us; 309us; 1us; 311us; 3us; 311us; 783us; 784us; 1us; 312us; 3us; 312us; 783us; 784us; 1us; 313us; 1us; 313us; 1us; 313us; 1us; 314us; 1us; 315us; 1us; 315us; 1us; 316us; 1us; 316us; 1us; 316us; 1us; 316us; 1us; 317us; 1us; 317us; 1us; 317us; 1us; 318us; 1us; 319us; 1us; 320us; 1us; 321us; 1us; 322us; 1us; 323us; 1us; 324us; 1us; 324us; 1us; 324us; 1us; 324us; 1us; 324us; 1us; 324us; 1us; 324us; 1us; 324us; 2us; 325us; 328us; 2us; 326us; 329us; 1us; 328us; 1us; 328us; 1us; 329us; 1us; 329us; 2us; 330us; 331us; 5us; 330us; 331us; 333us; 334us; 335us; 1us; 331us; 3us; 332us; 783us; 784us; 4us; 333us; 334us; 335us; 337us; 1us; 333us; 1us; 333us; 1us; 333us; 1us; 334us; 1us; 335us; 1us; 336us; 2us; 336us; 338us; 1us; 336us; 2us; 337us; 338us; 1us; 339us; 1us; 339us; 1us; 340us; 1us; 340us; 1us; 340us; 1us; 342us; 1us; 342us; 1us; 343us; 1us; 343us; 1us; 344us; 2us; 345us; 346us; 2us; 345us; 346us; 2us; 345us; 346us; 2us; 345us; 346us; 2us; 345us; 346us; 1us; 345us; 1us; 346us; 2us; 347us; 348us; 2us; 347us; 348us; 1us; 347us; 1us; 348us; 1us; 349us; 1us; 350us; 2us; 350us; 351us; 1us; 351us; 1us; 353us; 2us; 353us; 354us; 1us; 353us; 1us; 353us; 1us; 354us; 1us; 354us; 1us; 355us; 1us; 356us; 1us; 356us; 1us; 356us; 1us; 357us; 1us; 358us; 1us; 359us; 1us; 360us; 1us; 361us; 1us; 362us; 1us; 363us; 1us; 364us; 1us; 365us; 1us; 366us; 1us; 367us; 1us; 368us; 1us; 369us; 1us; 370us; 2us; 370us; 408us; 1us; 371us; 1us; 372us; 1us; 373us; 1us; 374us; 2us; 375us; 376us; 1us; 376us; 1us; 376us; 6us; 377us; 389us; 390us; 391us; 396us; 398us; 1us; 378us; 1us; 379us; 1us; 379us; 2us; 380us; 381us; 3us; 380us; 382us; 383us; 1us; 380us; 1us; 380us; 1us; 381us; 1us; 383us; 1us; 383us; 5us; 384us; 385us; 386us; 387us; 388us; 2us; 384us; 386us; 1us; 384us; 1us; 385us; 1us; 386us; 2us; 387us; 462us; 1us; 387us; 1us; 388us; 6us; 389us; 390us; 390us; 391us; 396us; 398us; 6us; 389us; 390us; 391us; 391us; 396us; 398us; 6us; 389us; 390us; 391us; 395us; 396us; 398us; 6us; 389us; 390us; 391us; 396us; 396us; 398us; 6us; 389us; 390us; 391us; 396us; 397us; 398us; 6us; 389us; 390us; 391us; 396us; 398us; 398us; 6us; 389us; 390us; 391us; 396us; 398us; 500us; 7us; 389us; 390us; 391us; 396us; 398us; 501us; 502us; 1us; 389us; 1us; 389us; 1us; 390us; 1us; 391us; 2us; 392us; 395us; 2us; 393us; 397us; 1us; 394us; 1us; 395us; 1us; 396us; 1us; 397us; 1us; 398us; 4us; 399us; 400us; 401us; 414us; 2us; 400us; 401us; 1us; 400us; 1us; 401us; 1us; 401us; 1us; 402us; 3us; 402us; 756us; 757us; 1us; 403us; 3us; 404us; 405us; 406us; 1us; 404us; 1us; 405us; 1us; 405us; 1us; 407us; 1us; 408us; 1us; 408us; 1us; 409us; 1us; 409us; 1us; 409us; 1us; 410us; 1us; 410us; 1us; 410us; 1us; 411us; 1us; 411us; 1us; 411us; 1us; 412us; 1us; 413us; 2us; 413us; 805us; 1us; 413us; 1us; 414us; 1us; 415us; 1us; 416us; 1us; 417us; 1us; 418us; 7us; 419us; 420us; 421us; 422us; 785us; 787us; 788us; 2us; 419us; 420us; 1us; 419us; 1us; 420us; 2us; 421us; 462us; 1us; 421us; 1us; 422us; 8us; 423us; 425us; 426us; 429us; 431us; 432us; 435us; 437us; 8us; 425us; 426us; 426us; 429us; 431us; 432us; 435us; 437us; 8us; 425us; 426us; 429us; 430us; 431us; 432us; 435us; 437us; 8us; 425us; 426us; 429us; 431us; 431us; 432us; 435us; 437us; 8us; 425us; 426us; 429us; 431us; 432us; 434us; 435us; 437us; 8us; 425us; 426us; 429us; 431us; 432us; 435us; 435us; 437us; 8us; 425us; 426us; 429us; 431us; 432us; 435us; 436us; 437us; 8us; 425us; 426us; 429us; 431us; 432us; 435us; 437us; 437us; 8us; 425us; 426us; 429us; 431us; 432us; 435us; 437us; 441us; 9us; 425us; 426us; 429us; 431us; 432us; 435us; 437us; 443us; 444us; 12us; 425us; 426us; 429us; 431us; 432us; 435us; 437us; 497us; 648us; 649us; 650us; 651us; 8us; 425us; 426us; 429us; 431us; 432us; 435us; 437us; 540us; 10us; 425us; 426us; 429us; 431us; 432us; 435us; 437us; 648us; 649us; 650us; 1us; 425us; 1us; 425us; 1us; 426us; 2us; 427us; 434us; 2us; 428us; 436us; 1us; 429us; 1us; 429us; 1us; 430us; 1us; 431us; 1us; 432us; 1us; 432us; 1us; 433us; 1us; 434us; 1us; 435us; 1us; 436us; 1us; 437us; 1us; 438us; 2us; 439us; 440us; 1us; 439us; 2us; 440us; 856us; 1us; 440us; 3us; 441us; 783us; 784us; 1us; 441us; 1us; 443us; 2us; 444us; 856us; 1us; 444us; 2us; 445us; 446us; 2us; 445us; 446us; 1us; 445us; 1us; 446us; 1us; 447us; 1us; 448us; 1us; 448us; 1us; 448us; 22us; 449us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 2us; 450us; 451us; 1us; 450us; 5us; 452us; 453us; 454us; 455us; 456us; 1us; 452us; 1us; 452us; 1us; 453us; 1us; 453us; 1us; 454us; 1us; 454us; 1us; 455us; 1us; 455us; 26us; 457us; 458us; 459us; 460us; 461us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 28us; 457us; 458us; 459us; 460us; 461us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 597us; 598us; 29us; 457us; 458us; 459us; 460us; 461us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 641us; 642us; 643us; 2us; 457us; 458us; 1us; 457us; 1us; 460us; 1us; 460us; 1us; 461us; 1us; 461us; 1us; 461us; 1us; 461us; 1us; 462us; 2us; 462us; 622us; 1us; 463us; 3us; 464us; 465us; 466us; 2us; 464us; 465us; 1us; 464us; 1us; 465us; 1us; 466us; 4us; 467us; 468us; 469us; 470us; 1us; 467us; 1us; 468us; 2us; 469us; 470us; 1us; 469us; 1us; 470us; 1us; 471us; 1us; 472us; 1us; 473us; 2us; 474us; 475us; 2us; 474us; 475us; 1us; 474us; 1us; 475us; 3us; 476us; 477us; 478us; 3us; 476us; 477us; 478us; 1us; 476us; 1us; 477us; 1us; 478us; 1us; 478us; 3us; 479us; 480us; 481us; 23us; 479us; 480us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 1us; 479us; 1us; 480us; 1us; 481us; 1us; 482us; 22us; 482us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 2us; 483us; 484us; 22us; 483us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 5us; 485us; 486us; 487us; 488us; 489us; 25us; 485us; 486us; 487us; 488us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 3us; 485us; 486us; 487us; 2us; 485us; 486us; 1us; 485us; 1us; 486us; 1us; 487us; 1us; 487us; 1us; 488us; 1us; 489us; 1us; 489us; 9us; 490us; 491us; 492us; 493us; 494us; 495us; 496us; 497us; 505us; 4us; 490us; 491us; 492us; 505us; 2us; 490us; 492us; 1us; 490us; 1us; 490us; 1us; 491us; 1us; 492us; 1us; 492us; 3us; 493us; 494us; 495us; 3us; 493us; 494us; 495us; 2us; 493us; 494us; 1us; 493us; 1us; 494us; 1us; 495us; 1us; 495us; 1us; 496us; 1us; 496us; 1us; 496us; 1us; 496us; 1us; 497us; 1us; 497us; 1us; 498us; 22us; 498us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 1us; 499us; 22us; 499us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 1us; 500us; 1us; 500us; 1us; 500us; 1us; 500us; 1us; 500us; 1us; 500us; 2us; 501us; 502us; 2us; 501us; 502us; 2us; 501us; 502us; 2us; 501us; 502us; 2us; 501us; 502us; 1us; 501us; 1us; 502us; 1us; 503us; 1us; 503us; 1us; 503us; 1us; 503us; 1us; 503us; 1us; 504us; 1us; 504us; 1us; 504us; 1us; 505us; 1us; 505us; 1us; 506us; 1us; 506us; 22us; 507us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 524us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 525us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 526us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 527us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 528us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 532us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 545us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 549us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 553us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 556us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 557us; 558us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 558us; 23us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 597us; 598us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 597us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 599us; 25us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 641us; 642us; 643us; 648us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 641us; 23us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 642us; 643us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 643us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 651us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 651us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 664us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 665us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 666us; 22us; 507us; 510us; 511us; 512us; 513us; 514us; 515us; 516us; 517us; 518us; 519us; 520us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 558us; 667us; 1us; 507us; 2us; 508us; 529us; 1us; 508us; 1us; 508us; 2us; 509us; 557us; 1us; 510us; 1us; 511us; 1us; 512us; 1us; 513us; 1us; 514us; 1us; 515us; 1us; 516us; 1us; 517us; 1us; 518us; 1us; 519us; 1us; 520us; 1us; 521us; 1us; 522us; 1us; 523us; 1us; 524us; 1us; 525us; 1us; 526us; 1us; 527us; 1us; 528us; 1us; 530us; 1us; 531us; 1us; 531us; 1us; 531us; 1us; 532us; 1us; 533us; 1us; 533us; 2us; 534us; 535us; 2us; 534us; 535us; 1us; 534us; 1us; 535us; 1us; 536us; 2us; 537us; 538us; 1us; 537us; 1us; 538us; 1us; 539us; 1us; 540us; 4us; 541us; 542us; 543us; 544us; 4us; 541us; 542us; 543us; 544us; 2us; 542us; 543us; 1us; 542us; 1us; 543us; 1us; 544us; 1us; 545us; 1us; 547us; 1us; 547us; 1us; 548us; 1us; 548us; 1us; 549us; 2us; 550us; 551us; 2us; 550us; 551us; 2us; 550us; 551us; 1us; 550us; 1us; 551us; 1us; 553us; 2us; 554us; 555us; 2us; 554us; 555us; 2us; 554us; 555us; 1us; 554us; 1us; 555us; 1us; 556us; 1us; 556us; 1us; 557us; 1us; 558us; 1us; 559us; 2us; 559us; 799us; 1us; 559us; 1us; 560us; 2us; 560us; 795us; 1us; 560us; 1us; 561us; 2us; 561us; 798us; 1us; 561us; 1us; 562us; 2us; 562us; 811us; 1us; 562us; 1us; 563us; 2us; 563us; 812us; 1us; 563us; 1us; 564us; 2us; 564us; 806us; 1us; 564us; 1us; 565us; 2us; 565us; 807us; 1us; 565us; 2us; 566us; 567us; 6us; 566us; 567us; 671us; 672us; 673us; 674us; 10us; 566us; 567us; 671us; 672us; 673us; 674us; 730us; 731us; 732us; 733us; 6us; 566us; 567us; 730us; 731us; 732us; 733us; 2us; 566us; 567us; 4us; 566us; 567us; 672us; 673us; 1us; 566us; 3us; 566us; 672us; 673us; 1us; 567us; 1us; 568us; 1us; 568us; 1us; 569us; 1us; 569us; 2us; 570us; 571us; 5us; 570us; 571us; 664us; 665us; 666us; 1us; 571us; 5us; 572us; 575us; 576us; 578us; 581us; 1us; 573us; 5us; 573us; 575us; 576us; 578us; 581us; 5us; 574us; 575us; 576us; 578us; 581us; 5us; 575us; 575us; 576us; 578us; 581us; 5us; 575us; 576us; 577us; 578us; 581us; 1us; 575us; 1us; 576us; 1us; 576us; 1us; 577us; 2us; 577us; 789us; 1us; 578us; 1us; 578us; 1us; 579us; 1us; 579us; 1us; 579us; 1us; 580us; 2us; 580us; 805us; 1us; 580us; 1us; 581us; 1us; 581us; 1us; 582us; 3us; 583us; 584us; 585us; 2us; 583us; 584us; 1us; 583us; 1us; 584us; 1us; 585us; 1us; 585us; 1us; 586us; 1us; 587us; 1us; 588us; 1us; 589us; 5us; 590us; 591us; 785us; 787us; 788us; 1us; 590us; 1us; 590us; 1us; 590us; 1us; 590us; 1us; 591us; 1us; 591us; 5us; 592us; 593us; 594us; 595us; 596us; 1us; 592us; 1us; 592us; 4us; 593us; 594us; 595us; 596us; 1us; 593us; 3us; 594us; 595us; 596us; 3us; 594us; 595us; 596us; 1us; 594us; 2us; 595us; 596us; 2us; 595us; 596us; 1us; 595us; 1us; 596us; 1us; 596us; 1us; 596us; 2us; 597us; 598us; 1us; 599us; 1us; 600us; 1us; 601us; 1us; 602us; 1us; 603us; 1us; 604us; 1us; 605us; 1us; 606us; 1us; 607us; 1us; 608us; 1us; 609us; 4us; 610us; 611us; 612us; 613us; 2us; 610us; 611us; 1us; 610us; 1us; 611us; 1us; 612us; 1us; 612us; 1us; 613us; 3us; 614us; 615us; 616us; 4us; 614us; 615us; 616us; 815us; 2us; 614us; 615us; 1us; 614us; 1us; 615us; 1us; 616us; 1us; 616us; 3us; 617us; 618us; 619us; 2us; 617us; 618us; 1us; 617us; 1us; 618us; 1us; 619us; 1us; 619us; 4us; 620us; 621us; 622us; 623us; 8us; 620us; 621us; 622us; 623us; 630us; 785us; 787us; 788us; 7us; 620us; 621us; 622us; 623us; 785us; 787us; 788us; 2us; 620us; 621us; 1us; 620us; 1us; 621us; 1us; 622us; 1us; 623us; 1us; 625us; 1us; 625us; 1us; 626us; 1us; 626us; 1us; 626us; 1us; 626us; 1us; 626us; 1us; 626us; 1us; 627us; 1us; 628us; 1us; 629us; 2us; 629us; 630us; 1us; 630us; 1us; 630us; 1us; 630us; 3us; 631us; 632us; 633us; 2us; 631us; 632us; 1us; 631us; 1us; 632us; 1us; 633us; 1us; 633us; 1us; 634us; 1us; 635us; 1us; 636us; 1us; 637us; 1us; 639us; 1us; 640us; 1us; 641us; 2us; 642us; 643us; 1us; 643us; 1us; 644us; 1us; 644us; 1us; 645us; 1us; 645us; 1us; 646us; 1us; 646us; 1us; 646us; 1us; 646us; 1us; 647us; 1us; 647us; 1us; 647us; 3us; 648us; 649us; 650us; 1us; 649us; 1us; 650us; 1us; 651us; 1us; 651us; 1us; 652us; 1us; 652us; 1us; 652us; 2us; 652us; 653us; 1us; 652us; 1us; 652us; 1us; 653us; 1us; 656us; 1us; 658us; 1us; 658us; 1us; 658us; 1us; 658us; 2us; 660us; 661us; 1us; 660us; 5us; 661us; 734us; 751us; 752us; 754us; 1us; 661us; 1us; 663us; 5us; 663us; 730us; 731us; 732us; 733us; 1us; 663us; 1us; 663us; 2us; 663us; 667us; 1us; 663us; 1us; 664us; 2us; 664us; 667us; 1us; 664us; 1us; 665us; 3us; 665us; 783us; 784us; 1us; 665us; 2us; 665us; 667us; 1us; 665us; 1us; 666us; 3us; 666us; 783us; 784us; 1us; 666us; 2us; 666us; 667us; 1us; 666us; 1us; 666us; 2us; 667us; 856us; 3us; 667us; 783us; 784us; 1us; 667us; 2us; 669us; 670us; 1us; 669us; 1us; 669us; 1us; 669us; 1us; 670us; 1us; 670us; 1us; 672us; 1us; 675us; 2us; 677us; 679us; 1us; 677us; 1us; 678us; 1us; 678us; 1us; 678us; 1us; 679us; 1us; 679us; 1us; 680us; 1us; 680us; 1us; 682us; 1us; 682us; 1us; 683us; 1us; 683us; 1us; 684us; 5us; 684us; 730us; 731us; 732us; 733us; 1us; 684us; 1us; 684us; 1us; 684us; 1us; 685us; 1us; 686us; 2us; 687us; 688us; 2us; 687us; 688us; 2us; 687us; 688us; 1us; 687us; 1us; 688us; 3us; 689us; 690us; 691us; 3us; 689us; 690us; 691us; 3us; 689us; 690us; 691us; 1us; 689us; 1us; 689us; 1us; 690us; 1us; 690us; 1us; 691us; 1us; 692us; 1us; 692us; 1us; 692us; 2us; 693us; 694us; 2us; 693us; 694us; 2us; 693us; 694us; 1us; 693us; 1us; 694us; 1us; 694us; 2us; 695us; 696us; 1us; 696us; 2us; 697us; 698us; 1us; 698us; 1us; 700us; 1us; 700us; 2us; 701us; 702us; 1us; 701us; 1us; 701us; 2us; 703us; 704us; 1us; 703us; 1us; 703us; 2us; 705us; 706us; 1us; 705us; 1us; 705us; 3us; 707us; 708us; 709us; 6us; 707us; 709us; 730us; 731us; 732us; 733us; 1us; 707us; 5us; 707us; 730us; 731us; 732us; 733us; 1us; 708us; 1us; 708us; 1us; 708us; 5us; 708us; 730us; 731us; 732us; 733us; 6us; 710us; 712us; 730us; 731us; 732us; 733us; 1us; 710us; 5us; 710us; 730us; 731us; 732us; 733us; 1us; 711us; 1us; 711us; 1us; 711us; 5us; 711us; 730us; 731us; 732us; 733us; 3us; 713us; 727us; 736us; 1us; 713us; 1us; 713us; 1us; 714us; 2us; 715us; 716us; 1us; 715us; 1us; 715us; 7us; 717us; 719us; 720us; 730us; 731us; 732us; 733us; 1us; 717us; 1us; 717us; 1us; 718us; 1us; 718us; 1us; 719us; 1us; 719us; 7us; 721us; 722us; 723us; 730us; 731us; 732us; 733us; 1us; 721us; 1us; 721us; 1us; 722us; 1us; 722us; 6us; 724us; 725us; 730us; 731us; 732us; 733us; 1us; 724us; 1us; 724us; 3us; 726us; 783us; 784us; 1us; 727us; 2us; 727us; 736us; 2us; 728us; 729us; 3us; 728us; 729us; 755us; 1us; 728us; 1us; 728us; 1us; 730us; 1us; 731us; 2us; 731us; 877us; 1us; 731us; 1us; 732us; 1us; 733us; 4us; 734us; 751us; 752us; 754us; 1us; 734us; 1us; 734us; 1us; 734us; 1us; 735us; 1us; 736us; 1us; 736us; 2us; 737us; 750us; 1us; 737us; 1us; 737us; 4us; 738us; 739us; 740us; 741us; 1us; 738us; 3us; 739us; 740us; 741us; 1us; 739us; 2us; 740us; 741us; 1us; 740us; 1us; 741us; 1us; 741us; 3us; 742us; 751us; 752us; 1us; 742us; 1us; 742us; 2us; 742us; 743us; 2us; 743us; 762us; 1us; 743us; 1us; 743us; 5us; 745us; 746us; 747us; 756us; 757us; 2us; 746us; 747us; 1us; 746us; 1us; 747us; 1us; 747us; 1us; 748us; 3us; 748us; 756us; 757us; 1us; 749us; 1us; 750us; 3us; 751us; 752us; 754us; 2us; 751us; 752us; 1us; 751us; 1us; 752us; 1us; 753us; 1us; 754us; 1us; 754us; 1us; 755us; 2us; 756us; 757us; 4us; 756us; 757us; 783us; 784us; 1us; 757us; 1us; 758us; 1us; 759us; 1us; 759us; 3us; 760us; 761us; 762us; 1us; 760us; 2us; 761us; 762us; 1us; 761us; 1us; 762us; 1us; 762us; 1us; 762us; 2us; 763us; 764us; 3us; 763us; 775us; 776us; 1us; 763us; 1us; 764us; 1us; 764us; 3us; 765us; 783us; 784us; 1us; 766us; 1us; 767us; 3us; 767us; 775us; 776us; 1us; 767us; 3us; 768us; 769us; 770us; 2us; 769us; 770us; 1us; 769us; 1us; 770us; 1us; 770us; 1us; 771us; 2us; 772us; 773us; 1us; 773us; 1us; 774us; 3us; 775us; 775us; 776us; 3us; 775us; 776us; 776us; 3us; 775us; 776us; 777us; 1us; 775us; 1us; 776us; 1us; 777us; 1us; 778us; 1us; 778us; 1us; 779us; 1us; 780us; 2us; 780us; 792us; 1us; 780us; 1us; 781us; 1us; 782us; 2us; 783us; 784us; 1us; 783us; 1us; 784us; 3us; 785us; 787us; 788us; 1us; 785us; 1us; 785us; 1us; 786us; 3us; 787us; 788us; 818us; 3us; 787us; 788us; 818us; 1us; 787us; 1us; 788us; 1us; 788us; 1us; 788us; 1us; 789us; 1us; 790us; 1us; 791us; 1us; 792us; 1us; 793us; 1us; 794us; 1us; 795us; 1us; 796us; 1us; 797us; 1us; 798us; 1us; 799us; 1us; 800us; 1us; 801us; 1us; 802us; 1us; 803us; 1us; 804us; 1us; 805us; 1us; 806us; 1us; 807us; 1us; 808us; 1us; 809us; 1us; 810us; 1us; 811us; 1us; 812us; 2us; 813us; 814us; 1us; 814us; 1us; 815us; 1us; 815us; 1us; 816us; 1us; 817us; 1us; 817us; 1us; 818us; 1us; 819us; 1us; 820us; 3us; 821us; 823us; 824us; 1us; 822us; 2us; 823us; 824us; 1us; 823us; 1us; 824us; 1us; 825us; 1us; 826us; 1us; 827us; 1us; 828us; 2us; 829us; 830us; 1us; 830us; 1us; 831us; 1us; 832us; 2us; 833us; 834us; 1us; 834us; 1us; 837us; 1us; 837us; 2us; 839us; 841us; 2us; 840us; 842us; 1us; 841us; 1us; 842us; 1us; 843us; 1us; 844us; 1us; 845us; 1us; 846us; 1us; 847us; 1us; 848us; 1us; 850us; 1us; 852us; 1us; 854us; 1us; 856us; 1us; 858us; 1us; 860us; 1us; 862us; 1us; 864us; 1us; 866us; 1us; 867us; 1us; 868us; 1us; 869us; 1us; 870us; 1us; 871us; 1us; 872us; 1us; 873us; 1us; 874us; 1us; 875us; 1us; 876us; 1us; 877us; 1us; 879us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 25us; 27us; 29us; 31us; 33us; 35us; 38us; 40us; 43us; 45us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 65us; 67us; 76us; 85us; 108us; 110us; 113us; 115us; 117us; 119us; 123us; 125us; 128us; 130us; 132us; 134us; 138us; 140us; 142us; 144us; 148us; 150us; 154us; 157us; 159us; 162us; 164us; 166us; 168us; 170us; 172us; 175us; 177us; 180us; 182us; 184us; 186us; 188us; 190us; 197us; 204us; 208us; 210us; 212us; 224us; 236us; 239us; 241us; 243us; 245us; 248us; 251us; 254us; 256us; 258us; 260us; 262us; 264us; 275us; 286us; 311us; 314us; 316us; 318us; 321us; 325us; 329us; 334us; 336us; 339us; 341us; 343us; 345us; 347us; 349us; 351us; 359us; 367us; 369us; 374us; 376us; 382us; 384us; 387us; 389us; 391us; 396us; 398us; 400us; 402us; 404us; 406us; 408us; 410us; 414us; 418us; 420us; 424us; 429us; 431us; 433us; 436us; 438us; 440us; 442us; 444us; 448us; 452us; 455us; 457us; 459us; 461us; 464us; 466us; 470us; 472us; 474us; 476us; 478us; 480us; 486us; 492us; 495us; 498us; 500us; 502us; 504us; 506us; 508us; 512us; 514us; 516us; 518us; 520us; 522us; 524us; 526us; 528us; 530us; 532us; 534us; 557us; 560us; 562us; 564us; 566us; 568us; 570us; 572us; 574us; 576us; 578us; 580us; 583us; 585us; 587us; 590us; 592us; 594us; 596us; 598us; 601us; 603us; 607us; 609us; 611us; 613us; 615us; 619us; 621us; 623us; 625us; 627us; 630us; 632us; 634us; 636us; 639us; 641us; 643us; 646us; 648us; 650us; 652us; 656us; 658us; 660us; 662us; 664us; 666us; 668us; 670us; 672us; 674us; 676us; 678us; 680us; 682us; 684us; 688us; 691us; 693us; 695us; 697us; 699us; 702us; 705us; 707us; 709us; 712us; 715us; 717us; 719us; 722us; 725us; 727us; 729us; 731us; 733us; 735us; 737us; 741us; 746us; 748us; 750us; 752us; 754us; 756us; 758us; 760us; 763us; 765us; 767us; 769us; 772us; 775us; 777us; 779us; 782us; 784us; 786us; 794us; 806us; 814us; 826us; 828us; 830us; 832us; 834us; 836us; 838us; 840us; 842us; 844us; 846us; 852us; 854us; 860us; 862us; 864us; 866us; 868us; 870us; 872us; 874us; 876us; 878us; 880us; 882us; 884us; 886us; 888us; 890us; 894us; 896us; 898us; 900us; 902us; 904us; 906us; 908us; 910us; 912us; 916us; 918us; 920us; 922us; 924us; 926us; 928us; 930us; 932us; 934us; 936us; 938us; 940us; 942us; 944us; 948us; 951us; 953us; 955us; 958us; 960us; 963us; 966us; 968us; 970us; 973us; 976us; 978us; 980us; 982us; 984us; 986us; 988us; 990us; 992us; 994us; 996us; 999us; 1002us; 1004us; 1006us; 1009us; 1011us; 1013us; 1015us; 1017us; 1019us; 1021us; 1023us; 1026us; 1029us; 1032us; 1034us; 1036us; 1038us; 1041us; 1043us; 1054us; 1069us; 1080us; 1095us; 1097us; 1099us; 1101us; 1103us; 1105us; 1107us; 1113us; 1115us; 1117us; 1119us; 1121us; 1123us; 1125us; 1127us; 1129us; 1131us; 1133us; 1135us; 1137us; 1139us; 1141us; 1143us; 1145us; 1147us; 1149us; 1151us; 1153us; 1155us; 1157us; 1159us; 1161us; 1163us; 1165us; 1167us; 1169us; 1171us; 1173us; 1175us; 1177us; 1179us; 1181us; 1183us; 1185us; 1187us; 1189us; 1191us; 1194us; 1201us; 1203us; 1205us; 1207us; 1209us; 1211us; 1213us; 1215us; 1217us; 1220us; 1222us; 1224us; 1227us; 1230us; 1232us; 1234us; 1236us; 1239us; 1242us; 1244us; 1247us; 1251us; 1254us; 1256us; 1258us; 1260us; 1262us; 1264us; 1269us; 1274us; 1276us; 1278us; 1280us; 1286us; 1288us; 1290us; 1294us; 1297us; 1299us; 1301us; 1303us; 1305us; 1308us; 1310us; 1312us; 1314us; 1316us; 1318us; 1320us; 1322us; 1326us; 1331us; 1333us; 1337us; 1339us; 1341us; 1343us; 1346us; 1348us; 1351us; 1355us; 1357us; 1360us; 1362us; 1364us; 1366us; 1368us; 1370us; 1372us; 1374us; 1376us; 1378us; 1380us; 1382us; 1384us; 1386us; 1388us; 1390us; 1392us; 1395us; 1397us; 1400us; 1403us; 1406us; 1408us; 1410us; 1412us; 1414us; 1416us; 1418us; 1420us; 1428us; 1430us; 1432us; 1439us; 1441us; 1444us; 1446us; 1448us; 1450us; 1452us; 1454us; 1456us; 1458us; 1460us; 1462us; 1464us; 1466us; 1468us; 1470us; 1472us; 1474us; 1476us; 1478us; 1480us; 1482us; 1484us; 1486us; 1488us; 1491us; 1493us; 1496us; 1498us; 1500us; 1505us; 1510us; 1515us; 1517us; 1519us; 1521us; 1523us; 1525us; 1527us; 1529us; 1531us; 1533us; 1535us; 1537us; 1543us; 1545us; 1547us; 1549us; 1551us; 1553us; 1559us; 1561us; 1564us; 1567us; 1570us; 1572us; 1574us; 1576us; 1578us; 1585us; 1587us; 1589us; 1592us; 1595us; 1597us; 1599us; 1601us; 1603us; 1605us; 1607us; 1609us; 1611us; 1613us; 1615us; 1617us; 1619us; 1621us; 1623us; 1625us; 1627us; 1629us; 1631us; 1633us; 1636us; 1638us; 1640us; 1642us; 1646us; 1648us; 1652us; 1654us; 1656us; 1658us; 1660us; 1662us; 1664us; 1666us; 1668us; 1670us; 1672us; 1674us; 1676us; 1678us; 1680us; 1682us; 1684us; 1686us; 1688us; 1690us; 1692us; 1694us; 1696us; 1698us; 1700us; 1702us; 1704us; 1706us; 1709us; 1712us; 1714us; 1716us; 1718us; 1720us; 1723us; 1729us; 1731us; 1735us; 1740us; 1742us; 1744us; 1746us; 1748us; 1750us; 1752us; 1755us; 1757us; 1760us; 1762us; 1764us; 1766us; 1768us; 1770us; 1772us; 1774us; 1776us; 1778us; 1780us; 1783us; 1786us; 1789us; 1792us; 1795us; 1797us; 1799us; 1802us; 1805us; 1807us; 1809us; 1811us; 1813us; 1816us; 1818us; 1820us; 1823us; 1825us; 1827us; 1829us; 1831us; 1833us; 1835us; 1837us; 1839us; 1841us; 1843us; 1845us; 1847us; 1849us; 1851us; 1853us; 1855us; 1857us; 1859us; 1861us; 1863us; 1865us; 1867us; 1870us; 1872us; 1874us; 1876us; 1878us; 1881us; 1883us; 1885us; 1892us; 1894us; 1896us; 1898us; 1901us; 1905us; 1907us; 1909us; 1911us; 1913us; 1915us; 1921us; 1924us; 1926us; 1928us; 1930us; 1933us; 1935us; 1937us; 1944us; 1951us; 1958us; 1965us; 1972us; 1979us; 1986us; 1994us; 1996us; 1998us; 2000us; 2002us; 2005us; 2008us; 2010us; 2012us; 2014us; 2016us; 2018us; 2023us; 2026us; 2028us; 2030us; 2032us; 2034us; 2038us; 2040us; 2044us; 2046us; 2048us; 2050us; 2052us; 2054us; 2056us; 2058us; 2060us; 2062us; 2064us; 2066us; 2068us; 2070us; 2072us; 2074us; 2076us; 2078us; 2081us; 2083us; 2085us; 2087us; 2089us; 2091us; 2093us; 2101us; 2104us; 2106us; 2108us; 2111us; 2113us; 2115us; 2124us; 2133us; 2142us; 2151us; 2160us; 2169us; 2178us; 2187us; 2196us; 2206us; 2219us; 2228us; 2239us; 2241us; 2243us; 2245us; 2248us; 2251us; 2253us; 2255us; 2257us; 2259us; 2261us; 2263us; 2265us; 2267us; 2269us; 2271us; 2273us; 2275us; 2278us; 2280us; 2283us; 2285us; 2289us; 2291us; 2293us; 2296us; 2298us; 2301us; 2304us; 2306us; 2308us; 2310us; 2312us; 2314us; 2316us; 2339us; 2342us; 2344us; 2350us; 2352us; 2354us; 2356us; 2358us; 2360us; 2362us; 2364us; 2366us; 2393us; 2422us; 2452us; 2455us; 2457us; 2459us; 2461us; 2463us; 2465us; 2467us; 2469us; 2471us; 2474us; 2476us; 2480us; 2483us; 2485us; 2487us; 2489us; 2494us; 2496us; 2498us; 2501us; 2503us; 2505us; 2507us; 2509us; 2511us; 2514us; 2517us; 2519us; 2521us; 2525us; 2529us; 2531us; 2533us; 2535us; 2537us; 2541us; 2565us; 2567us; 2569us; 2571us; 2573us; 2596us; 2599us; 2622us; 2628us; 2654us; 2658us; 2661us; 2663us; 2665us; 2667us; 2669us; 2671us; 2673us; 2675us; 2685us; 2690us; 2693us; 2695us; 2697us; 2699us; 2701us; 2703us; 2707us; 2711us; 2714us; 2716us; 2718us; 2720us; 2722us; 2724us; 2726us; 2728us; 2730us; 2732us; 2734us; 2736us; 2759us; 2761us; 2784us; 2786us; 2788us; 2790us; 2792us; 2794us; 2796us; 2799us; 2802us; 2805us; 2808us; 2811us; 2813us; 2815us; 2817us; 2819us; 2821us; 2823us; 2825us; 2827us; 2829us; 2831us; 2833us; 2835us; 2837us; 2839us; 2862us; 2885us; 2908us; 2931us; 2954us; 2977us; 3000us; 3023us; 3046us; 3069us; 3092us; 3115us; 3138us; 3161us; 3184us; 3207us; 3230us; 3253us; 3276us; 3299us; 3322us; 3345us; 3368us; 3391us; 3414us; 3437us; 3460us; 3484us; 3507us; 3530us; 3556us; 3579us; 3603us; 3626us; 3649us; 3672us; 3695us; 3718us; 3741us; 3764us; 3766us; 3769us; 3771us; 3773us; 3776us; 3778us; 3780us; 3782us; 3784us; 3786us; 3788us; 3790us; 3792us; 3794us; 3796us; 3798us; 3800us; 3802us; 3804us; 3806us; 3808us; 3810us; 3812us; 3814us; 3816us; 3818us; 3820us; 3822us; 3824us; 3826us; 3828us; 3831us; 3834us; 3836us; 3838us; 3840us; 3843us; 3845us; 3847us; 3849us; 3851us; 3856us; 3861us; 3864us; 3866us; 3868us; 3870us; 3872us; 3874us; 3876us; 3878us; 3880us; 3882us; 3885us; 3888us; 3891us; 3893us; 3895us; 3897us; 3900us; 3903us; 3906us; 3908us; 3910us; 3912us; 3914us; 3916us; 3918us; 3920us; 3923us; 3925us; 3927us; 3930us; 3932us; 3934us; 3937us; 3939us; 3941us; 3944us; 3946us; 3948us; 3951us; 3953us; 3955us; 3958us; 3960us; 3962us; 3965us; 3967us; 3970us; 3977us; 3988us; 3995us; 3998us; 4003us; 4005us; 4009us; 4011us; 4013us; 4015us; 4017us; 4019us; 4022us; 4028us; 4030us; 4036us; 4038us; 4044us; 4050us; 4056us; 4062us; 4064us; 4066us; 4068us; 4070us; 4073us; 4075us; 4077us; 4079us; 4081us; 4083us; 4085us; 4088us; 4090us; 4092us; 4094us; 4096us; 4100us; 4103us; 4105us; 4107us; 4109us; 4111us; 4113us; 4115us; 4117us; 4119us; 4125us; 4127us; 4129us; 4131us; 4133us; 4135us; 4137us; 4143us; 4145us; 4147us; 4152us; 4154us; 4158us; 4162us; 4164us; 4167us; 4170us; 4172us; 4174us; 4176us; 4178us; 4181us; 4183us; 4185us; 4187us; 4189us; 4191us; 4193us; 4195us; 4197us; 4199us; 4201us; 4203us; 4208us; 4211us; 4213us; 4215us; 4217us; 4219us; 4221us; 4225us; 4230us; 4233us; 4235us; 4237us; 4239us; 4241us; 4245us; 4248us; 4250us; 4252us; 4254us; 4256us; 4261us; 4270us; 4278us; 4281us; 4283us; 4285us; 4287us; 4289us; 4291us; 4293us; 4295us; 4297us; 4299us; 4301us; 4303us; 4305us; 4307us; 4309us; 4311us; 4314us; 4316us; 4318us; 4320us; 4324us; 4327us; 4329us; 4331us; 4333us; 4335us; 4337us; 4339us; 4341us; 4343us; 4345us; 4347us; 4349us; 4352us; 4354us; 4356us; 4358us; 4360us; 4362us; 4364us; 4366us; 4368us; 4370us; 4372us; 4374us; 4376us; 4380us; 4382us; 4384us; 4386us; 4388us; 4390us; 4392us; 4394us; 4397us; 4399us; 4401us; 4403us; 4405us; 4407us; 4409us; 4411us; 4413us; 4416us; 4418us; 4424us; 4426us; 4428us; 4434us; 4436us; 4438us; 4441us; 4443us; 4445us; 4448us; 4450us; 4452us; 4456us; 4458us; 4461us; 4463us; 4465us; 4469us; 4471us; 4474us; 4476us; 4478us; 4481us; 4485us; 4487us; 4490us; 4492us; 4494us; 4496us; 4498us; 4500us; 4502us; 4504us; 4507us; 4509us; 4511us; 4513us; 4515us; 4517us; 4519us; 4521us; 4523us; 4525us; 4527us; 4529us; 4531us; 4533us; 4539us; 4541us; 4543us; 4545us; 4547us; 4549us; 4552us; 4555us; 4558us; 4560us; 4562us; 4566us; 4570us; 4574us; 4576us; 4578us; 4580us; 4582us; 4584us; 4586us; 4588us; 4590us; 4593us; 4596us; 4599us; 4601us; 4603us; 4605us; 4608us; 4610us; 4613us; 4615us; 4617us; 4619us; 4622us; 4624us; 4626us; 4629us; 4631us; 4633us; 4636us; 4638us; 4640us; 4644us; 4651us; 4653us; 4659us; 4661us; 4663us; 4665us; 4671us; 4678us; 4680us; 4686us; 4688us; 4690us; 4692us; 4698us; 4702us; 4704us; 4706us; 4708us; 4711us; 4713us; 4715us; 4723us; 4725us; 4727us; 4729us; 4731us; 4733us; 4735us; 4743us; 4745us; 4747us; 4749us; 4751us; 4758us; 4760us; 4762us; 4766us; 4768us; 4771us; 4774us; 4778us; 4780us; 4782us; 4784us; 4786us; 4789us; 4791us; 4793us; 4795us; 4800us; 4802us; 4804us; 4806us; 4808us; 4810us; 4812us; 4815us; 4817us; 4819us; 4824us; 4826us; 4830us; 4832us; 4835us; 4837us; 4839us; 4841us; 4845us; 4847us; 4849us; 4852us; 4855us; 4857us; 4859us; 4865us; 4868us; 4870us; 4872us; 4874us; 4876us; 4880us; 4882us; 4884us; 4888us; 4891us; 4893us; 4895us; 4897us; 4899us; 4901us; 4903us; 4906us; 4911us; 4913us; 4915us; 4917us; 4919us; 4923us; 4925us; 4928us; 4930us; 4932us; 4934us; 4936us; 4939us; 4943us; 4945us; 4947us; 4949us; 4953us; 4955us; 4957us; 4961us; 4963us; 4967us; 4970us; 4972us; 4974us; 4976us; 4978us; 4981us; 4983us; 4985us; 4989us; 4993us; 4997us; 4999us; 5001us; 5003us; 5005us; 5007us; 5009us; 5011us; 5014us; 5016us; 5018us; 5020us; 5023us; 5025us; 5027us; 5031us; 5033us; 5035us; 5037us; 5041us; 5045us; 5047us; 5049us; 5051us; 5053us; 5055us; 5057us; 5059us; 5061us; 5063us; 5065us; 5067us; 5069us; 5071us; 5073us; 5075us; 5077us; 5079us; 5081us; 5083us; 5085us; 5087us; 5089us; 5091us; 5093us; 5095us; 5097us; 5099us; 5101us; 5104us; 5106us; 5108us; 5110us; 5112us; 5114us; 5116us; 5118us; 5120us; 5122us; 5126us; 5128us; 5131us; 5133us; 5135us; 5137us; 5139us; 5141us; 5143us; 5146us; 5148us; 5150us; 5152us; 5155us; 5157us; 5159us; 5161us; 5164us; 5167us; 5169us; 5171us; 5173us; 5175us; 5177us; 5179us; 5181us; 5183us; 5185us; 5187us; 5189us; 5191us; 5193us; 5195us; 5197us; 5199us; 5201us; 5203us; 5205us; 5207us; 5209us; 5211us; 5213us; 5215us; 5217us; 5219us; 5221us; 5223us; |]
let _fsyacc_action_rows = 1574
let _fsyacc_actionTableElements = [|11us; 16431us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 63us; 184us; 78us; 9us; 91us; 157us; 98us; 16486us; 99us; 16486us; 109us; 16486us; 137us; 16486us; 180us; 39us; 0us; 49152us; 74us; 16436us; 21us; 16486us; 22us; 16486us; 26us; 16486us; 27us; 16486us; 28us; 16486us; 29us; 16486us; 32us; 16486us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 52us; 16486us; 61us; 16486us; 62us; 16486us; 63us; 184us; 64us; 16486us; 65us; 16486us; 76us; 16486us; 78us; 9us; 79us; 16486us; 80us; 16486us; 82us; 16486us; 86us; 16486us; 90us; 16486us; 91us; 602us; 96us; 16486us; 97us; 16486us; 98us; 16486us; 103us; 16486us; 104us; 16486us; 107us; 16486us; 109us; 16486us; 110us; 16486us; 111us; 16486us; 112us; 16486us; 113us; 16486us; 114us; 16486us; 117us; 16486us; 120us; 16486us; 122us; 16486us; 123us; 16486us; 133us; 16486us; 134us; 16486us; 135us; 16486us; 137us; 16486us; 141us; 16486us; 142us; 16486us; 145us; 16486us; 146us; 16486us; 147us; 16486us; 148us; 16486us; 149us; 16486us; 150us; 16486us; 151us; 16486us; 152us; 16486us; 153us; 16486us; 154us; 16486us; 155us; 16486us; 156us; 16486us; 157us; 16486us; 158us; 16486us; 159us; 16486us; 160us; 16486us; 161us; 16486us; 162us; 16486us; 163us; 16486us; 165us; 16486us; 166us; 16486us; 168us; 16486us; 169us; 16486us; 172us; 16486us; 177us; 16486us; 178us; 16486us; 179us; 16486us; 180us; 45us; 0us; 49152us; 7us; 16486us; 10us; 15us; 18us; 8us; 58us; 14us; 63us; 184us; 74us; 7us; 78us; 9us; 91us; 602us; 0us; 49152us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 1us; 32768us; 177us; 10us; 0us; 16392us; 1us; 16390us; 178us; 12us; 0us; 16391us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 4us; 32768us; 10us; 15us; 18us; 1538us; 58us; 14us; 74us; 1537us; 0us; 16397us; 4us; 32768us; 10us; 15us; 18us; 1538us; 58us; 14us; 74us; 1537us; 0us; 16398us; 4us; 32768us; 10us; 15us; 18us; 1538us; 58us; 14us; 74us; 1537us; 0us; 16399us; 5us; 16486us; 10us; 15us; 58us; 14us; 63us; 184us; 78us; 9us; 91us; 602us; 0us; 16400us; 5us; 16486us; 10us; 15us; 58us; 14us; 63us; 184us; 78us; 9us; 91us; 602us; 0us; 16401us; 5us; 16486us; 10us; 15us; 58us; 14us; 63us; 184us; 78us; 9us; 91us; 602us; 0us; 16402us; 12us; 16403us; 29us; 16486us; 32us; 16486us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 63us; 184us; 91us; 602us; 98us; 16486us; 109us; 16486us; 123us; 16486us; 137us; 16486us; 148us; 16486us; 0us; 16404us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 67us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 98us; 112us; 103us; 888us; 104us; 873us; 107us; 1082us; 109us; 591us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 123us; 608us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 137us; 47us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 21us; 16405us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 0us; 16406us; 2us; 32768us; 10us; 36us; 180us; 37us; 0us; 16407us; 1us; 32768us; 10us; 38us; 0us; 16408us; 4us; 16430us; 10us; 40us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 0us; 16409us; 2us; 32768us; 10us; 42us; 180us; 43us; 0us; 16410us; 1us; 32768us; 10us; 44us; 0us; 16411us; 4us; 16441us; 10us; 46us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 0us; 16412us; 3us; 16588us; 34us; 407us; 35us; 406us; 36us; 408us; 1us; 32768us; 177us; 1477us; 1us; 16413us; 67us; 1479us; 1us; 32768us; 177us; 1477us; 1us; 16414us; 67us; 1479us; 2us; 16415us; 63us; 184us; 138us; 16486us; 0us; 16416us; 2us; 16418us; 63us; 184us; 138us; 16486us; 0us; 16417us; 1us; 32768us; 138us; 50us; 1us; 17237us; 60us; 1554us; 11us; 16431us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 63us; 184us; 78us; 9us; 91us; 157us; 98us; 16486us; 99us; 16486us; 109us; 16486us; 137us; 16486us; 180us; 79us; 0us; 16419us; 2us; 16420us; 63us; 184us; 138us; 16486us; 0us; 16421us; 2us; 16423us; 63us; 184us; 138us; 16486us; 0us; 16422us; 1us; 32768us; 138us; 50us; 1us; 17237us; 60us; 1554us; 74us; 16436us; 21us; 16486us; 22us; 16486us; 26us; 16486us; 27us; 16486us; 28us; 16486us; 29us; 16486us; 32us; 16486us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 52us; 16486us; 61us; 16486us; 62us; 16486us; 63us; 184us; 64us; 16486us; 65us; 16486us; 76us; 16486us; 78us; 9us; 79us; 16486us; 80us; 16486us; 82us; 16486us; 86us; 16486us; 90us; 16486us; 91us; 602us; 96us; 16486us; 97us; 16486us; 98us; 16486us; 103us; 16486us; 104us; 16486us; 107us; 16486us; 109us; 16486us; 110us; 16486us; 111us; 16486us; 112us; 16486us; 113us; 16486us; 114us; 16486us; 117us; 16486us; 120us; 16486us; 122us; 16486us; 123us; 16486us; 133us; 16486us; 134us; 16486us; 135us; 16486us; 137us; 16486us; 141us; 16486us; 142us; 16486us; 145us; 16486us; 146us; 16486us; 147us; 16486us; 148us; 16486us; 149us; 16486us; 150us; 16486us; 151us; 16486us; 152us; 16486us; 153us; 16486us; 154us; 16486us; 155us; 16486us; 156us; 16486us; 157us; 16486us; 158us; 16486us; 159us; 16486us; 160us; 16486us; 161us; 16486us; 162us; 16486us; 163us; 16486us; 165us; 16486us; 166us; 16486us; 168us; 16486us; 169us; 16486us; 172us; 16486us; 177us; 16486us; 178us; 16486us; 179us; 16486us; 180us; 93us; 0us; 16424us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 4us; 32768us; 98us; 204us; 99us; 159us; 109us; 591us; 137us; 47us; 13us; 16431us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 60us; 1570us; 63us; 184us; 68us; 1569us; 78us; 9us; 91us; 157us; 98us; 16486us; 99us; 16486us; 109us; 16486us; 137us; 16486us; 180us; 79us; 0us; 16425us; 0us; 16426us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 67us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 98us; 112us; 103us; 888us; 104us; 873us; 107us; 1082us; 109us; 591us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 123us; 608us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 137us; 47us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 76us; 16436us; 21us; 16486us; 22us; 16486us; 26us; 16486us; 27us; 16486us; 28us; 16486us; 29us; 16486us; 32us; 16486us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 52us; 16486us; 60us; 16468us; 61us; 16486us; 62us; 16486us; 63us; 184us; 64us; 16486us; 65us; 16486us; 68us; 141us; 76us; 16486us; 78us; 9us; 79us; 16486us; 80us; 16486us; 82us; 16486us; 86us; 16486us; 90us; 16486us; 91us; 602us; 96us; 16486us; 97us; 16486us; 98us; 16486us; 103us; 16486us; 104us; 16486us; 107us; 16486us; 109us; 16486us; 110us; 16486us; 111us; 16486us; 112us; 16486us; 113us; 16486us; 114us; 16486us; 117us; 16486us; 120us; 16486us; 122us; 16486us; 123us; 16486us; 133us; 16486us; 134us; 16486us; 135us; 16486us; 137us; 16486us; 141us; 16486us; 142us; 16486us; 145us; 16486us; 146us; 16486us; 147us; 16486us; 148us; 16486us; 149us; 16486us; 150us; 16486us; 151us; 16486us; 152us; 16486us; 153us; 16486us; 154us; 16486us; 155us; 16486us; 156us; 16486us; 157us; 16486us; 158us; 16486us; 159us; 16486us; 160us; 16486us; 161us; 16486us; 162us; 16486us; 163us; 16486us; 165us; 16486us; 166us; 16486us; 168us; 16486us; 169us; 16486us; 172us; 16486us; 177us; 16486us; 178us; 16486us; 179us; 16486us; 180us; 93us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 3us; 16430us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 3us; 17222us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 11us; 16434us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 63us; 184us; 78us; 9us; 91us; 157us; 98us; 16486us; 99us; 16486us; 109us; 16486us; 137us; 16486us; 180us; 83us; 0us; 16432us; 3us; 32768us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 4us; 16486us; 63us; 184us; 78us; 9us; 91us; 157us; 180us; 83us; 0us; 16433us; 0us; 16435us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 67us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 98us; 112us; 103us; 888us; 104us; 873us; 107us; 1082us; 109us; 591us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 123us; 608us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 137us; 47us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 24us; 16439us; 18us; 1534us; 52us; 1013us; 53us; 1006us; 58us; 1533us; 60us; 1004us; 69us; 1011us; 73us; 993us; 74us; 1532us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 74us; 16438us; 21us; 16486us; 22us; 16486us; 26us; 16486us; 27us; 16486us; 28us; 16486us; 29us; 16486us; 32us; 16486us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 52us; 16486us; 61us; 16486us; 62us; 16486us; 63us; 184us; 64us; 16486us; 65us; 16486us; 76us; 16486us; 78us; 9us; 79us; 16486us; 80us; 16486us; 82us; 16486us; 86us; 16486us; 90us; 16486us; 91us; 602us; 96us; 16486us; 97us; 16486us; 98us; 16486us; 103us; 16486us; 104us; 16486us; 107us; 16486us; 109us; 16486us; 110us; 16486us; 111us; 16486us; 112us; 16486us; 113us; 16486us; 114us; 16486us; 117us; 16486us; 120us; 16486us; 122us; 16486us; 123us; 16486us; 133us; 16486us; 134us; 16486us; 135us; 16486us; 137us; 16486us; 141us; 16486us; 142us; 16486us; 145us; 16486us; 146us; 16486us; 147us; 16486us; 148us; 16486us; 149us; 16486us; 150us; 16486us; 151us; 16486us; 152us; 16486us; 153us; 16486us; 154us; 16486us; 155us; 16486us; 156us; 16486us; 157us; 16486us; 158us; 16486us; 159us; 16486us; 160us; 16486us; 161us; 16486us; 162us; 16486us; 163us; 16486us; 165us; 16486us; 166us; 16486us; 168us; 16486us; 169us; 16486us; 172us; 16486us; 177us; 16486us; 178us; 16486us; 179us; 16486us; 180us; 93us; 0us; 16437us; 0us; 16440us; 3us; 16441us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 4us; 16441us; 14us; 133us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 4us; 16441us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 128us; 140us; 17us; 16444us; 18us; 1534us; 29us; 16486us; 32us; 16486us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 58us; 1533us; 63us; 184us; 74us; 1532us; 78us; 9us; 91us; 602us; 98us; 16486us; 109us; 16486us; 123us; 16486us; 137us; 16486us; 148us; 16486us; 180us; 100us; 0us; 16442us; 74us; 16445us; 21us; 16486us; 22us; 16486us; 26us; 16486us; 27us; 16486us; 28us; 16486us; 29us; 16486us; 32us; 16486us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 52us; 16486us; 61us; 16486us; 62us; 16486us; 63us; 184us; 64us; 16486us; 65us; 16486us; 76us; 16486us; 78us; 9us; 79us; 16486us; 80us; 16486us; 82us; 16486us; 86us; 16486us; 90us; 16486us; 91us; 602us; 96us; 16486us; 97us; 16486us; 98us; 16486us; 103us; 16486us; 104us; 16486us; 107us; 16486us; 109us; 16486us; 110us; 16486us; 111us; 16486us; 112us; 16486us; 113us; 16486us; 114us; 16486us; 117us; 16486us; 120us; 16486us; 122us; 16486us; 123us; 16486us; 133us; 16486us; 134us; 16486us; 135us; 16486us; 137us; 16486us; 141us; 16486us; 142us; 16486us; 145us; 16486us; 146us; 16486us; 147us; 16486us; 148us; 16486us; 149us; 16486us; 150us; 16486us; 151us; 16486us; 152us; 16486us; 153us; 16486us; 154us; 16486us; 155us; 16486us; 156us; 16486us; 157us; 16486us; 158us; 16486us; 159us; 16486us; 160us; 16486us; 161us; 16486us; 162us; 16486us; 163us; 16486us; 165us; 16486us; 166us; 16486us; 168us; 16486us; 169us; 16486us; 172us; 16486us; 177us; 16486us; 178us; 16486us; 179us; 16486us; 180us; 93us; 0us; 16443us; 3us; 32768us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 4us; 16486us; 63us; 184us; 78us; 9us; 91us; 602us; 180us; 93us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 7us; 32768us; 29us; 610us; 32us; 623us; 98us; 112us; 109us; 591us; 123us; 608us; 137us; 47us; 148us; 604us; 0us; 16449us; 2us; 16449us; 115us; 860us; 180us; 863us; 0us; 16450us; 64us; 16450us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 866us; 0us; 16451us; 1us; 16486us; 63us; 184us; 1us; 16545us; 118us; 299us; 0us; 16452us; 21us; 16486us; 10us; 16546us; 14us; 16546us; 18us; 16546us; 29us; 16546us; 32us; 16546us; 58us; 16546us; 60us; 303us; 63us; 184us; 74us; 16546us; 77us; 144us; 78us; 16546us; 91us; 16546us; 98us; 16546us; 109us; 16546us; 118us; 16546us; 123us; 16546us; 128us; 16546us; 137us; 16546us; 138us; 16546us; 148us; 16546us; 180us; 16546us; 0us; 16453us; 0us; 16454us; 1us; 16468us; 68us; 141us; 1us; 32768us; 60us; 120us; 4us; 32768us; 19us; 127us; 47us; 1565us; 122us; 1566us; 177us; 1477us; 0us; 16455us; 0us; 16456us; 7us; 16486us; 48us; 1567us; 63us; 184us; 78us; 9us; 91us; 157us; 122us; 1568us; 177us; 1477us; 180us; 83us; 2us; 32768us; 14us; 125us; 67us; 1479us; 0us; 16457us; 1us; 16458us; 67us; 1479us; 6us; 16486us; 47us; 1565us; 63us; 184us; 78us; 9us; 91us; 602us; 122us; 1566us; 180us; 94us; 1us; 32768us; 14us; 129us; 0us; 16459us; 3us; 32768us; 10us; 858us; 14us; 131us; 180us; 856us; 0us; 16460us; 0us; 16461us; 0us; 16462us; 0us; 16463us; 1us; 16464us; 67us; 1479us; 74us; 16436us; 21us; 16486us; 22us; 16486us; 26us; 16486us; 27us; 16486us; 28us; 16486us; 29us; 16486us; 32us; 16486us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 52us; 16486us; 61us; 16486us; 62us; 16486us; 63us; 184us; 64us; 16486us; 65us; 16486us; 76us; 16486us; 78us; 9us; 79us; 16486us; 80us; 16486us; 82us; 16486us; 86us; 16486us; 90us; 16486us; 91us; 602us; 96us; 16486us; 97us; 16486us; 98us; 16486us; 103us; 16486us; 104us; 16486us; 107us; 16486us; 109us; 16486us; 110us; 16486us; 111us; 16486us; 112us; 16486us; 113us; 16486us; 114us; 16486us; 117us; 16486us; 120us; 16486us; 122us; 16486us; 123us; 16486us; 133us; 16486us; 134us; 16486us; 135us; 16486us; 137us; 16486us; 141us; 16486us; 142us; 16486us; 145us; 16486us; 146us; 16486us; 147us; 16486us; 148us; 16486us; 149us; 16486us; 150us; 16486us; 151us; 16486us; 152us; 16486us; 153us; 16486us; 154us; 16486us; 155us; 16486us; 156us; 16486us; 157us; 16486us; 158us; 16486us; 159us; 16486us; 160us; 16486us; 161us; 16486us; 162us; 16486us; 163us; 16486us; 165us; 16486us; 166us; 16486us; 168us; 16486us; 169us; 16486us; 172us; 16486us; 177us; 16486us; 178us; 16486us; 179us; 16486us; 180us; 95us; 3us; 32768us; 10us; 858us; 128us; 138us; 180us; 856us; 0us; 16465us; 0us; 16466us; 0us; 16467us; 4us; 32768us; 19us; 171us; 48us; 1567us; 122us; 1568us; 177us; 1477us; 0us; 16469us; 1us; 16470us; 67us; 1479us; 6us; 16486us; 16us; 16565us; 17us; 16565us; 19us; 337us; 63us; 184us; 128us; 16565us; 180us; 345us; 3us; 32768us; 16us; 1547us; 17us; 1548us; 128us; 1549us; 0us; 16471us; 0us; 16472us; 0us; 16473us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 4us; 32768us; 98us; 204us; 99us; 159us; 109us; 591us; 137us; 47us; 2us; 32768us; 60us; 1570us; 68us; 1569us; 4us; 32768us; 19us; 123us; 48us; 1567us; 122us; 1568us; 177us; 1477us; 0us; 16474us; 0us; 16475us; 0us; 16476us; 0us; 16477us; 1us; 32768us; 177us; 1477us; 1us; 16478us; 67us; 1479us; 1us; 16486us; 63us; 184us; 1us; 17247us; 100us; 1559us; 1us; 17249us; 106us; 1560us; 3us; 16588us; 34us; 407us; 35us; 406us; 36us; 408us; 3us; 32768us; 82us; 1482us; 90us; 1485us; 177us; 1477us; 2us; 16647us; 30us; 1573us; 131us; 17264us; 1us; 32768us; 68us; 166us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 1us; 16480us; 60us; 169us; 0us; 16479us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 21us; 16481us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 6us; 16486us; 48us; 1567us; 63us; 184us; 78us; 9us; 91us; 157us; 122us; 1568us; 180us; 83us; 1us; 32768us; 14us; 173us; 0us; 16482us; 11us; 16431us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 63us; 184us; 78us; 9us; 91us; 157us; 98us; 16486us; 99us; 16486us; 109us; 16486us; 137us; 16486us; 180us; 79us; 1us; 32768us; 128us; 176us; 1us; 32768us; 14us; 177us; 0us; 16483us; 11us; 16431us; 34us; 16486us; 35us; 16486us; 36us; 16486us; 63us; 184us; 78us; 9us; 91us; 157us; 98us; 16486us; 99us; 16486us; 109us; 16486us; 137us; 16486us; 180us; 79us; 1us; 32768us; 128us; 180us; 0us; 16484us; 0us; 16485us; 1us; 16487us; 63us; 184us; 0us; 16488us; 4us; 32768us; 98us; 201us; 137us; 200us; 149us; 203us; 177us; 1477us; 2us; 17241us; 18us; 1543us; 74us; 1544us; 1us; 32768us; 46us; 187us; 1us; 17239us; 18us; 1555us; 0us; 16489us; 0us; 16490us; 4us; 17240us; 98us; 201us; 137us; 200us; 149us; 203us; 177us; 1477us; 0us; 16491us; 2us; 17262us; 31us; 1572us; 67us; 1479us; 25us; 17039us; 62us; 1177us; 64us; 1206us; 82us; 1183us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 178us; 703us; 179us; 704us; 0us; 16492us; 1us; 32768us; 68us; 196us; 1us; 32768us; 177us; 1477us; 2us; 17262us; 31us; 1572us; 67us; 1479us; 25us; 17039us; 62us; 1177us; 64us; 1206us; 82us; 1183us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 178us; 703us; 179us; 704us; 0us; 16493us; 0us; 16494us; 0us; 16495us; 30us; 16496us; 18us; 17166us; 31us; 17166us; 46us; 17166us; 62us; 17166us; 64us; 17166us; 67us; 17166us; 74us; 17166us; 82us; 17166us; 96us; 17166us; 110us; 17166us; 122us; 17166us; 135us; 17166us; 142us; 17166us; 151us; 17166us; 152us; 17166us; 153us; 17166us; 154us; 17166us; 155us; 17166us; 156us; 17166us; 157us; 17166us; 158us; 17166us; 159us; 17166us; 160us; 17166us; 161us; 17166us; 162us; 17166us; 163us; 17166us; 165us; 17166us; 166us; 17166us; 178us; 17166us; 179us; 17166us; 0us; 16497us; 1us; 16486us; 63us; 184us; 0us; 16498us; 1us; 16500us; 118us; 207us; 1us; 16486us; 63us; 184us; 0us; 16499us; 2us; 16600us; 60us; 210us; 77us; 416us; 7us; 16486us; 19us; 213us; 39us; 465us; 47us; 467us; 63us; 184us; 101us; 466us; 122us; 238us; 139us; 224us; 0us; 16501us; 0us; 16502us; 10us; 16486us; 10us; 16520us; 14us; 16520us; 19us; 234us; 39us; 465us; 47us; 467us; 63us; 184us; 101us; 466us; 122us; 238us; 139us; 224us; 180us; 16520us; 1us; 17239us; 18us; 1555us; 3us; 16486us; 14us; 16520us; 63us; 184us; 77us; 16520us; 1us; 16600us; 77us; 416us; 1us; 32768us; 14us; 218us; 1us; 16600us; 77us; 416us; 0us; 16503us; 1us; 16600us; 77us; 416us; 0us; 16504us; 0us; 16505us; 0us; 16506us; 1us; 32768us; 108us; 225us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 16507us; 0us; 16508us; 5us; 16486us; 10us; 16520us; 19us; 242us; 63us; 184us; 128us; 16520us; 180us; 232us; 3us; 32768us; 10us; 858us; 128us; 230us; 180us; 856us; 0us; 16509us; 0us; 16510us; 1us; 32768us; 128us; 233us; 0us; 16511us; 4us; 16486us; 10us; 16520us; 14us; 16520us; 63us; 184us; 180us; 16520us; 3us; 32768us; 10us; 858us; 14us; 236us; 180us; 856us; 0us; 16512us; 0us; 16513us; 5us; 16486us; 10us; 16520us; 19us; 242us; 63us; 184us; 128us; 16520us; 180us; 16520us; 3us; 32768us; 10us; 858us; 128us; 240us; 180us; 856us; 0us; 16514us; 0us; 16515us; 4us; 16486us; 10us; 16520us; 14us; 16520us; 63us; 184us; 180us; 16520us; 3us; 32768us; 10us; 858us; 14us; 244us; 180us; 856us; 0us; 16516us; 0us; 16517us; 0us; 16518us; 2us; 17241us; 18us; 1543us; 74us; 1544us; 8us; 16486us; 10us; 16520us; 14us; 16520us; 16us; 16520us; 17us; 16520us; 63us; 184us; 77us; 16520us; 128us; 16520us; 180us; 16520us; 0us; 16519us; 3us; 32768us; 38us; 252us; 98us; 291us; 99us; 289us; 8us; 32768us; 27us; 614us; 29us; 610us; 32us; 623us; 38us; 252us; 98us; 400us; 99us; 392us; 123us; 608us; 148us; 604us; 0us; 16521us; 0us; 16522us; 0us; 16523us; 0us; 16524us; 0us; 16525us; 0us; 16526us; 0us; 16527us; 1us; 16528us; 38us; 260us; 0us; 16529us; 3us; 32768us; 82us; 1482us; 90us; 1485us; 177us; 1477us; 0us; 16531us; 3us; 32768us; 82us; 1482us; 90us; 1485us; 177us; 1477us; 2us; 32768us; 17us; 265us; 180us; 266us; 0us; 16532us; 0us; 16533us; 1us; 16534us; 85us; 268us; 3us; 32768us; 82us; 1482us; 90us; 1485us; 177us; 1477us; 0us; 16535us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 12us; 32768us; 13us; 469us; 37us; 250us; 38us; 253us; 40us; 255us; 41us; 259us; 42us; 256us; 43us; 257us; 45us; 285us; 99us; 287us; 101us; 468us; 105us; 254us; 107us; 293us; 22us; 32768us; 13us; 469us; 37us; 250us; 38us; 253us; 40us; 255us; 41us; 259us; 42us; 256us; 43us; 257us; 45us; 285us; 49us; 540us; 57us; 1398us; 64us; 456us; 78us; 1421us; 81us; 1471us; 82us; 453us; 99us; 287us; 101us; 468us; 105us; 254us; 107us; 293us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 1us; 17247us; 100us; 1559us; 3us; 16588us; 34us; 407us; 35us; 406us; 36us; 408us; 3us; 32768us; 82us; 1482us; 90us; 1485us; 177us; 1477us; 2us; 16647us; 30us; 1573us; 131us; 17264us; 1us; 32768us; 68us; 279us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 2us; 16530us; 23us; 263us; 77us; 261us; 1us; 16480us; 60us; 169us; 0us; 16536us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 6us; 16537us; 31us; 1386us; 61us; 1401us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 6us; 16538us; 31us; 1386us; 61us; 1401us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 1us; 17249us; 106us; 1560us; 0us; 16539us; 1us; 17249us; 106us; 1560us; 0us; 16540us; 1us; 16486us; 63us; 184us; 0us; 16541us; 1us; 32768us; 68us; 294us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 16542us; 3us; 16588us; 34us; 407us; 35us; 406us; 36us; 408us; 1us; 16650us; 75us; 500us; 0us; 16543us; 1us; 16486us; 63us; 184us; 1us; 16545us; 118us; 299us; 0us; 16544us; 36us; 16486us; 10us; 16546us; 13us; 16546us; 14us; 16546us; 16us; 16546us; 17us; 16546us; 18us; 16546us; 27us; 16546us; 29us; 16546us; 32us; 16546us; 37us; 16546us; 38us; 16546us; 40us; 16546us; 41us; 16546us; 42us; 16546us; 43us; 16546us; 45us; 16546us; 58us; 16546us; 60us; 303us; 63us; 184us; 74us; 16546us; 77us; 16546us; 78us; 16546us; 91us; 16546us; 98us; 16546us; 99us; 16546us; 101us; 16546us; 105us; 16546us; 107us; 16546us; 109us; 16546us; 118us; 16546us; 123us; 16546us; 128us; 16546us; 137us; 16546us; 138us; 16546us; 148us; 16546us; 180us; 16546us; 6us; 16486us; 19us; 312us; 39us; 465us; 47us; 467us; 63us; 184us; 101us; 466us; 139us; 323us; 0us; 16547us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 1us; 17262us; 31us; 1572us; 1us; 32768us; 82us; 719us; 1us; 16604us; 119us; 426us; 1us; 32768us; 60us; 310us; 6us; 16486us; 19us; 312us; 39us; 465us; 47us; 467us; 63us; 184us; 101us; 466us; 139us; 323us; 0us; 16548us; 9us; 16486us; 10us; 16565us; 14us; 16565us; 19us; 333us; 39us; 465us; 47us; 467us; 63us; 184us; 101us; 466us; 139us; 323us; 180us; 345us; 1us; 17239us; 18us; 1555us; 4us; 16486us; 14us; 16565us; 63us; 184us; 77us; 16565us; 180us; 345us; 1us; 16598us; 77us; 413us; 1us; 32768us; 14us; 317us; 1us; 16598us; 77us; 413us; 0us; 16549us; 1us; 16598us; 77us; 413us; 0us; 16550us; 0us; 16551us; 0us; 16552us; 1us; 32768us; 108us; 324us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 16553us; 0us; 16554us; 5us; 16486us; 10us; 16565us; 19us; 337us; 63us; 184us; 128us; 16565us; 180us; 331us; 3us; 32768us; 10us; 858us; 128us; 329us; 180us; 856us; 0us; 16555us; 0us; 16556us; 4us; 16486us; 10us; 16565us; 63us; 184us; 128us; 332us; 180us; 345us; 0us; 16557us; 4us; 16486us; 10us; 16565us; 14us; 16565us; 63us; 184us; 180us; 345us; 3us; 32768us; 10us; 858us; 14us; 336us; 180us; 856us; 0us; 16558us; 0us; 16559us; 4us; 16486us; 10us; 16565us; 14us; 16565us; 63us; 184us; 180us; 345us; 3us; 32768us; 10us; 858us; 14us; 340us; 180us; 856us; 0us; 16560us; 0us; 16561us; 0us; 16562us; 2us; 17241us; 18us; 1543us; 74us; 1544us; 8us; 16486us; 10us; 16565us; 14us; 16565us; 16us; 16565us; 17us; 16565us; 63us; 184us; 77us; 16565us; 128us; 16565us; 180us; 345us; 0us; 16563us; 8us; 16486us; 10us; 16565us; 14us; 16565us; 16us; 16565us; 17us; 16565us; 63us; 184us; 77us; 16565us; 128us; 16565us; 180us; 345us; 0us; 16564us; 1us; 17247us; 100us; 1559us; 0us; 16566us; 1us; 17247us; 100us; 1559us; 2us; 32768us; 17us; 351us; 180us; 352us; 0us; 16567us; 0us; 16568us; 1us; 16569us; 118us; 354us; 1us; 17247us; 100us; 1559us; 0us; 16570us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 17083us; 68us; 1330us; 1us; 32768us; 60us; 359us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16571us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 17083us; 68us; 1330us; 3us; 32768us; 23us; 349us; 60us; 364us; 77us; 347us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16572us; 0us; 16573us; 1us; 16574us; 38us; 368us; 0us; 16575us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 17us; 32768us; 13us; 469us; 27us; 614us; 29us; 610us; 32us; 623us; 37us; 251us; 38us; 253us; 40us; 255us; 41us; 367us; 42us; 256us; 43us; 257us; 45us; 419us; 99us; 390us; 101us; 468us; 105us; 254us; 107us; 394us; 123us; 608us; 148us; 604us; 27us; 32768us; 13us; 469us; 27us; 614us; 29us; 610us; 32us; 623us; 37us; 251us; 38us; 253us; 40us; 255us; 41us; 367us; 42us; 256us; 43us; 257us; 45us; 419us; 49us; 540us; 57us; 1398us; 64us; 456us; 78us; 1421us; 81us; 1471us; 82us; 453us; 99us; 390us; 101us; 468us; 105us; 254us; 107us; 394us; 123us; 608us; 148us; 604us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16576us; 0us; 16577us; 1us; 17247us; 100us; 1559us; 1us; 17235us; 16us; 1553us; 0us; 16578us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 7us; 16596us; 31us; 1386us; 61us; 1401us; 77us; 410us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 0us; 16579us; 1us; 17247us; 100us; 1559us; 3us; 32768us; 82us; 1482us; 90us; 1485us; 177us; 1477us; 2us; 16647us; 30us; 1573us; 131us; 17264us; 1us; 32768us; 68us; 385us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 2us; 16530us; 23us; 263us; 77us; 261us; 1us; 17235us; 16us; 1553us; 0us; 16580us; 0us; 16581us; 1us; 17249us; 106us; 1560us; 0us; 16582us; 1us; 17249us; 106us; 1560us; 0us; 16583us; 32us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 16604us; 119us; 426us; 1us; 32768us; 60us; 397us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 17235us; 16us; 1553us; 0us; 16584us; 1us; 16486us; 63us; 184us; 0us; 16585us; 0us; 16586us; 3us; 32768us; 82us; 1482us; 90us; 1485us; 177us; 1477us; 0us; 16587us; 0us; 16589us; 0us; 16590us; 0us; 16591us; 0us; 16592us; 0us; 16593us; 2us; 16486us; 19us; 432us; 63us; 184us; 3us; 32768us; 16us; 1547us; 17us; 1548us; 128us; 1549us; 0us; 16595us; 6us; 16486us; 16us; 16565us; 17us; 16565us; 19us; 337us; 63us; 184us; 128us; 16565us; 180us; 345us; 3us; 32768us; 16us; 1547us; 17us; 1548us; 128us; 1549us; 0us; 16597us; 5us; 16486us; 16us; 16520us; 17us; 16520us; 19us; 242us; 63us; 184us; 128us; 16520us; 3us; 32768us; 16us; 1547us; 17us; 1548us; 128us; 1549us; 0us; 16599us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 32us; 16607us; 31us; 1387us; 61us; 1401us; 62us; 17262us; 64us; 17262us; 81us; 1471us; 82us; 17262us; 96us; 17262us; 103us; 1390us; 110us; 17262us; 119us; 429us; 122us; 17262us; 135us; 17262us; 142us; 17262us; 151us; 17262us; 152us; 17262us; 153us; 17262us; 154us; 17262us; 155us; 17262us; 156us; 17262us; 157us; 17262us; 158us; 17262us; 159us; 17262us; 160us; 17262us; 161us; 17262us; 162us; 17262us; 163us; 17262us; 165us; 17262us; 166us; 17262us; 174us; 1474us; 177us; 1477us; 178us; 17262us; 179us; 17262us; 0us; 16601us; 25us; 32768us; 62us; 1177us; 64us; 1206us; 82us; 1183us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 178us; 703us; 179us; 704us; 1us; 16607us; 119us; 429us; 0us; 16602us; 0us; 16603us; 1us; 32768us; 177us; 1477us; 0us; 16605us; 0us; 16606us; 2us; 32768us; 141us; 431us; 177us; 1477us; 0us; 16608us; 0us; 16609us; 1us; 16486us; 63us; 184us; 3us; 32768us; 10us; 858us; 14us; 434us; 180us; 856us; 0us; 16610us; 0us; 16611us; 0us; 16612us; 2us; 17241us; 18us; 1543us; 74us; 1544us; 11us; 16486us; 10us; 16614us; 13us; 16614us; 14us; 16614us; 16us; 16614us; 17us; 16614us; 18us; 16614us; 51us; 16614us; 63us; 184us; 101us; 16614us; 128us; 16614us; 180us; 16614us; 0us; 16613us; 2us; 32768us; 38us; 446us; 42us; 447us; 3us; 17247us; 38us; 446us; 42us; 447us; 100us; 1559us; 2us; 17247us; 100us; 1559us; 180us; 445us; 1us; 17235us; 16us; 1553us; 0us; 16615us; 0us; 16616us; 0us; 16617us; 0us; 16618us; 3us; 16594us; 34us; 407us; 35us; 406us; 36us; 408us; 10us; 32768us; 49us; 540us; 57us; 1398us; 64us; 456us; 78us; 1421us; 81us; 1471us; 82us; 453us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16619us; 0us; 16620us; 0us; 16621us; 9us; 32768us; 57us; 1398us; 78us; 462us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 180us; 1430us; 1us; 32768us; 83us; 455us; 0us; 16622us; 2us; 16486us; 63us; 184us; 180us; 460us; 3us; 32768us; 10us; 858us; 51us; 458us; 180us; 856us; 0us; 16623us; 0us; 16624us; 1us; 32768us; 51us; 461us; 0us; 16625us; 8us; 32768us; 57us; 1424us; 78us; 1421us; 81us; 1471us; 82us; 1425us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 178us; 463us; 1us; 32768us; 78us; 1571us; 0us; 16626us; 0us; 16627us; 0us; 16628us; 0us; 16629us; 0us; 16630us; 0us; 16631us; 4us; 32768us; 81us; 1471us; 82us; 476us; 174us; 1474us; 177us; 1477us; 3us; 16632us; 30us; 1573us; 67us; 1479us; 131us; 17264us; 1us; 32768us; 177us; 1477us; 1us; 16633us; 67us; 1479us; 0us; 16634us; 0us; 16635us; 1us; 16486us; 63us; 184us; 2us; 32768us; 83us; 478us; 85us; 481us; 0us; 16636us; 2us; 16650us; 75us; 500us; 85us; 481us; 1us; 16643us; 85us; 482us; 1us; 16486us; 63us; 184us; 2us; 16486us; 63us; 184us; 129us; 491us; 0us; 16637us; 0us; 16638us; 2us; 32768us; 81us; 1471us; 174us; 1474us; 0us; 16639us; 1us; 32768us; 131us; 488us; 1us; 16486us; 63us; 184us; 1us; 32768us; 132us; 490us; 0us; 16640us; 0us; 16641us; 0us; 16642us; 1us; 32768us; 131us; 494us; 4us; 16486us; 63us; 184us; 75us; 16644us; 129us; 492us; 132us; 16644us; 1us; 16650us; 75us; 500us; 1us; 32768us; 132us; 497us; 0us; 16645us; 0us; 16646us; 21us; 16648us; 10us; 16783us; 18us; 16783us; 23us; 16783us; 49us; 16783us; 50us; 16783us; 51us; 16783us; 55us; 16783us; 60us; 16783us; 68us; 16783us; 69us; 16783us; 70us; 16783us; 74us; 16783us; 75us; 16783us; 77us; 16783us; 79us; 16783us; 83us; 16783us; 85us; 16783us; 86us; 16783us; 115us; 16783us; 119us; 16783us; 180us; 16783us; 4us; 32768us; 43us; 507us; 81us; 1471us; 82us; 522us; 174us; 1474us; 1us; 16651us; 118us; 504us; 1us; 17080us; 118us; 504us; 1us; 17082us; 118us; 504us; 4us; 32768us; 43us; 507us; 81us; 1471us; 82us; 522us; 174us; 1474us; 0us; 16652us; 0us; 16653us; 2us; 32768us; 81us; 1471us; 174us; 1474us; 1us; 32768us; 68us; 509us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16654us; 2us; 32768us; 68us; 514us; 70us; 512us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16655us; 5us; 32768us; 47us; 515us; 82us; 519us; 135us; 518us; 139us; 531us; 177us; 516us; 0us; 16656us; 3us; 32768us; 30us; 1437us; 47us; 517us; 131us; 1439us; 0us; 16657us; 0us; 16658us; 1us; 16486us; 63us; 184us; 1us; 32768us; 83us; 521us; 0us; 16659us; 2us; 32768us; 81us; 1471us; 174us; 1474us; 1us; 32768us; 92us; 524us; 2us; 32768us; 81us; 1471us; 174us; 1474us; 1us; 32768us; 83us; 526us; 1us; 32768us; 68us; 527us; 1us; 32768us; 82us; 528us; 1us; 16486us; 63us; 184us; 1us; 32768us; 83us; 530us; 0us; 16660us; 2us; 32768us; 30us; 1437us; 131us; 1439us; 0us; 16661us; 0us; 16662us; 1us; 16486us; 63us; 184us; 0us; 16663us; 1us; 32768us; 49us; 540us; 1us; 16486us; 63us; 184us; 0us; 16664us; 2us; 16665us; 18us; 1555us; 49us; 17239us; 0us; 16666us; 1us; 16668us; 49us; 540us; 1us; 16486us; 63us; 184us; 0us; 16667us; 3us; 16588us; 34us; 407us; 35us; 406us; 36us; 408us; 3us; 32768us; 82us; 558us; 90us; 1485us; 177us; 1477us; 4us; 17239us; 18us; 1555us; 60us; 554us; 68us; 551us; 108us; 548us; 0us; 16669us; 8us; 32768us; 57us; 1398us; 64us; 456us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 1us; 17239us; 18us; 1555us; 0us; 16670us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 1us; 17239us; 18us; 1555us; 0us; 16671us; 17us; 32768us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 178us; 703us; 179us; 704us; 1us; 17239us; 18us; 1555us; 0us; 16672us; 0us; 16673us; 29us; 32768us; 49us; 1521us; 52us; 1502us; 53us; 1500us; 60us; 1504us; 61us; 561us; 65us; 1508us; 69us; 559us; 73us; 1512us; 79us; 1509us; 80us; 1510us; 84us; 1503us; 92us; 1505us; 129us; 1516us; 130us; 1511us; 131us; 1506us; 132us; 1507us; 142us; 1518us; 145us; 1514us; 146us; 1515us; 167us; 1513us; 168us; 1501us; 169us; 1498us; 170us; 1497us; 171us; 1499us; 172us; 1492us; 173us; 1496us; 174us; 1495us; 175us; 1494us; 176us; 1493us; 1us; 32768us; 83us; 560us; 0us; 16674us; 1us; 32768us; 50us; 562us; 1us; 32768us; 83us; 563us; 0us; 16675us; 4us; 17166us; 18us; 1555us; 49us; 17239us; 60us; 566us; 108us; 570us; 0us; 16676us; 17us; 32768us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 178us; 703us; 179us; 704us; 1us; 17239us; 18us; 1555us; 39us; 16677us; 10us; 16680us; 13us; 16680us; 14us; 16680us; 16us; 16680us; 17us; 16680us; 18us; 16680us; 27us; 16680us; 29us; 16680us; 32us; 16680us; 34us; 16680us; 35us; 16680us; 36us; 16680us; 37us; 16680us; 38us; 16680us; 40us; 16680us; 41us; 16680us; 42us; 16680us; 43us; 16680us; 45us; 16680us; 58us; 16680us; 63us; 16680us; 74us; 16680us; 77us; 16680us; 78us; 16680us; 83us; 16680us; 91us; 16680us; 98us; 16680us; 99us; 16680us; 101us; 16680us; 105us; 16680us; 107us; 16680us; 109us; 16680us; 118us; 16680us; 123us; 16680us; 128us; 16680us; 137us; 16680us; 138us; 16680us; 148us; 16680us; 180us; 16680us; 0us; 16678us; 8us; 32768us; 57us; 1398us; 64us; 456us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 16679us; 0us; 16681us; 7us; 16683us; 31us; 1386us; 61us; 1401us; 81us; 1471us; 84us; 574us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 16682us; 2us; 17241us; 18us; 1543us; 74us; 1544us; 4us; 16486us; 10us; 17240us; 51us; 17240us; 63us; 184us; 180us; 17240us; 0us; 16684us; 0us; 16685us; 1us; 17249us; 106us; 1560us; 0us; 16686us; 3us; 16588us; 34us; 407us; 35us; 406us; 36us; 408us; 1us; 32768us; 177us; 1477us; 1us; 32768us; 68us; 585us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16687us; 1us; 16598us; 77us; 413us; 0us; 16688us; 1us; 16600us; 77us; 416us; 0us; 16689us; 0us; 16690us; 1us; 16486us; 63us; 184us; 3us; 16588us; 34us; 407us; 35us; 406us; 36us; 408us; 1us; 32768us; 177us; 1477us; 1us; 16694us; 60us; 600us; 0us; 16691us; 1us; 16692us; 108us; 598us; 8us; 32768us; 57us; 1398us; 64us; 456us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 16693us; 1us; 32768us; 177us; 1477us; 1us; 16695us; 67us; 1479us; 1us; 32768us; 177us; 1477us; 1us; 16696us; 67us; 1479us; 1us; 17243us; 93us; 1557us; 3us; 16486us; 63us; 184us; 123us; 656us; 180us; 660us; 0us; 16697us; 0us; 16698us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16699us; 1us; 17243us; 93us; 1557us; 3us; 16486us; 63us; 184us; 123us; 656us; 180us; 660us; 3us; 32768us; 10us; 858us; 16us; 621us; 180us; 856us; 0us; 16700us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 3us; 32768us; 10us; 858us; 16us; 621us; 180us; 856us; 0us; 16701us; 0us; 16702us; 0us; 16703us; 0us; 16704us; 0us; 16705us; 0us; 16706us; 0us; 16707us; 1us; 16486us; 63us; 184us; 3us; 16588us; 34us; 407us; 35us; 406us; 36us; 408us; 1us; 32768us; 177us; 1477us; 1us; 17262us; 31us; 1572us; 1us; 32768us; 82us; 628us; 2us; 16486us; 63us; 184us; 83us; 16711us; 1us; 32768us; 83us; 630us; 0us; 16708us; 1us; 16709us; 85us; 633us; 1us; 16710us; 85us; 635us; 1us; 16486us; 63us; 184us; 0us; 16712us; 1us; 16486us; 63us; 184us; 0us; 16713us; 2us; 32768us; 33us; 647us; 177us; 1477us; 5us; 16714us; 31us; 1572us; 61us; 17262us; 79us; 646us; 84us; 645us; 177us; 1477us; 0us; 16715us; 1us; 16716us; 67us; 1479us; 4us; 16721us; 31us; 1572us; 61us; 17262us; 79us; 646us; 84us; 645us; 1us; 32768us; 61us; 643us; 1us; 32768us; 50us; 644us; 0us; 16717us; 0us; 16718us; 0us; 16719us; 1us; 32768us; 84us; 649us; 1us; 16722us; 84us; 649us; 0us; 16720us; 2us; 32768us; 33us; 648us; 177us; 1477us; 1us; 16725us; 118us; 653us; 0us; 16723us; 3us; 16486us; 63us; 184us; 123us; 656us; 180us; 660us; 1us; 16725us; 118us; 653us; 0us; 16724us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16726us; 1us; 17247us; 100us; 1559us; 0us; 16727us; 0us; 16728us; 1us; 17249us; 106us; 1560us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 17083us; 68us; 1330us; 1us; 32768us; 60us; 665us; 65us; 32768us; 19us; 668us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 667us; 0us; 16729us; 0us; 16730us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 3us; 32768us; 10us; 858us; 14us; 670us; 180us; 856us; 0us; 16731us; 0us; 16732us; 0us; 16733us; 0us; 16736us; 1us; 16734us; 75us; 676us; 0us; 16735us; 3us; 32768us; 81us; 1471us; 96us; 686us; 174us; 1474us; 2us; 32768us; 60us; 678us; 118us; 680us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16737us; 3us; 32768us; 81us; 1471us; 96us; 686us; 174us; 1474us; 0us; 16738us; 0us; 16739us; 1us; 32768us; 68us; 684us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16740us; 0us; 16741us; 0us; 16742us; 0us; 16743us; 0us; 16744us; 0us; 16745us; 0us; 16746us; 0us; 16747us; 0us; 16748us; 0us; 16749us; 0us; 16750us; 0us; 16751us; 0us; 16752us; 0us; 16753us; 0us; 16754us; 1us; 16754us; 129us; 759us; 0us; 16755us; 0us; 16756us; 0us; 16757us; 0us; 16758us; 1us; 16759us; 30us; 706us; 1us; 32768us; 131us; 1446us; 0us; 16760us; 5us; 16761us; 49us; 737us; 69us; 738us; 79us; 745us; 85us; 743us; 119us; 735us; 0us; 16762us; 1us; 32768us; 177us; 1477us; 0us; 16763us; 1us; 16765us; 68us; 714us; 2us; 16766us; 68us; 714us; 85us; 717us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16764us; 3us; 32768us; 63us; 184us; 65us; 710us; 177us; 1477us; 3us; 32768us; 63us; 184us; 65us; 710us; 177us; 1477us; 0us; 16767us; 6us; 32768us; 10us; 858us; 63us; 184us; 65us; 710us; 83us; 722us; 177us; 1477us; 180us; 724us; 3us; 32768us; 10us; 858us; 83us; 721us; 180us; 856us; 0us; 16768us; 0us; 16769us; 0us; 16770us; 1us; 16846us; 83us; 725us; 0us; 16771us; 0us; 16772us; 3us; 16774us; 69us; 738us; 79us; 745us; 85us; 743us; 1us; 16775us; 69us; 738us; 2us; 16779us; 69us; 738us; 79us; 745us; 2us; 16780us; 69us; 738us; 79us; 745us; 1us; 16781us; 69us; 738us; 1us; 16782us; 69us; 738us; 6us; 32768us; 49us; 737us; 60us; 929us; 69us; 738us; 79us; 745us; 85us; 743us; 119us; 735us; 6us; 32768us; 49us; 737us; 60us; 935us; 69us; 738us; 79us; 745us; 85us; 743us; 119us; 735us; 1us; 32768us; 177us; 1477us; 0us; 16773us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 16776us; 85us; 742us; 0us; 16777us; 0us; 16778us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 23us; 16649us; 10us; 16798us; 18us; 16798us; 23us; 16798us; 30us; 1573us; 49us; 16798us; 50us; 16798us; 51us; 16798us; 55us; 16798us; 60us; 16798us; 68us; 16798us; 69us; 16798us; 70us; 16798us; 74us; 16798us; 75us; 16798us; 77us; 16798us; 79us; 16798us; 83us; 16798us; 85us; 16798us; 86us; 16798us; 115us; 16798us; 119us; 16798us; 131us; 17264us; 180us; 16798us; 33us; 32768us; 31us; 749us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16784us; 32us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16785us; 7us; 32768us; 57us; 1424us; 78us; 1421us; 81us; 1471us; 82us; 1425us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 1us; 16786us; 67us; 1433us; 0us; 16787us; 33us; 16790us; 31us; 756us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16788us; 32us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16789us; 0us; 16791us; 1us; 32768us; 153us; 760us; 0us; 16792us; 1us; 32768us; 177us; 1477us; 1us; 32768us; 51us; 763us; 0us; 16793us; 34us; 16826us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 50us; 766us; 0us; 16794us; 34us; 16826us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 55us; 769us; 0us; 16795us; 0us; 16796us; 1us; 32768us; 177us; 1477us; 1us; 17189us; 177us; 1477us; 0us; 16797us; 0us; 16798us; 0us; 16799us; 0us; 16800us; 0us; 16801us; 0us; 16802us; 61us; 16808us; 10us; 858us; 34us; 407us; 35us; 406us; 36us; 408us; 49us; 1521us; 52us; 1502us; 53us; 1500us; 57us; 770us; 60us; 1504us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 772us; 72us; 751us; 73us; 1512us; 79us; 1509us; 80us; 1510us; 82us; 779us; 84us; 1503us; 90us; 1485us; 92us; 1505us; 96us; 777us; 110us; 776us; 129us; 1516us; 130us; 1511us; 131us; 1506us; 132us; 1507us; 135us; 778us; 142us; 1171us; 145us; 1514us; 146us; 1515us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 167us; 1513us; 168us; 1501us; 169us; 1498us; 170us; 1497us; 171us; 1499us; 172us; 1492us; 173us; 1496us; 174us; 1495us; 175us; 1494us; 176us; 1493us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 783us; 3us; 32768us; 10us; 858us; 83us; 781us; 180us; 856us; 0us; 16803us; 0us; 16804us; 1us; 16846us; 83us; 784us; 0us; 16805us; 0us; 16806us; 7us; 16807us; 49us; 801us; 68us; 804us; 69us; 807us; 70us; 808us; 79us; 814us; 85us; 812us; 119us; 799us; 5us; 16810us; 68us; 804us; 69us; 807us; 70us; 808us; 79us; 814us; 85us; 812us; 4us; 16814us; 68us; 804us; 69us; 807us; 70us; 808us; 79us; 814us; 3us; 16815us; 68us; 804us; 69us; 807us; 70us; 808us; 4us; 16818us; 68us; 804us; 69us; 807us; 70us; 808us; 79us; 814us; 4us; 16819us; 68us; 804us; 69us; 807us; 70us; 808us; 79us; 814us; 3us; 16820us; 68us; 804us; 69us; 807us; 70us; 808us; 3us; 16821us; 68us; 804us; 69us; 807us; 70us; 808us; 7us; 16825us; 49us; 801us; 68us; 804us; 69us; 807us; 70us; 808us; 79us; 814us; 85us; 812us; 119us; 799us; 9us; 17241us; 18us; 1543us; 49us; 801us; 68us; 804us; 69us; 807us; 70us; 808us; 74us; 1544us; 79us; 814us; 85us; 812us; 119us; 799us; 10us; 32768us; 49us; 801us; 60us; 1235us; 68us; 804us; 69us; 807us; 70us; 808us; 79us; 814us; 85us; 812us; 115us; 1232us; 119us; 799us; 180us; 922us; 8us; 16930us; 49us; 801us; 68us; 804us; 69us; 807us; 70us; 808us; 75us; 1040us; 79us; 814us; 85us; 812us; 119us; 799us; 8us; 32768us; 49us; 801us; 68us; 804us; 69us; 807us; 70us; 808us; 79us; 814us; 85us; 812us; 115us; 1232us; 119us; 799us; 1us; 32768us; 177us; 1477us; 0us; 16809us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 16811us; 85us; 811us; 1us; 16812us; 79us; 813us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16813us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16816us; 0us; 16817us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16822us; 2us; 17241us; 18us; 1543us; 74us; 1544us; 0us; 16823us; 1us; 17240us; 177us; 1477us; 0us; 16824us; 2us; 32768us; 60us; 821us; 67us; 1479us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16827us; 34us; 16826us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16828us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 3us; 32768us; 10us; 858us; 14us; 827us; 180us; 856us; 0us; 16829us; 0us; 16830us; 0us; 16831us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 14us; 832us; 0us; 16832us; 21us; 16833us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 1us; 16835us; 15us; 835us; 0us; 16834us; 4us; 16840us; 68us; 837us; 70us; 841us; 71us; 843us; 72us; 839us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16836us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16837us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16838us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 16839us; 25us; 16843us; 18us; 1543us; 25us; 852us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 74us; 1544us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 94us; 850us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 26us; 16843us; 18us; 1543us; 25us; 852us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 74us; 1544us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 94us; 850us; 129us; 1151us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 27us; 16843us; 18us; 1543us; 25us; 852us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 74us; 1544us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 94us; 850us; 95us; 1218us; 129us; 1219us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 63us; 16842us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16841us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16844us; 1us; 32768us; 19us; 853us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 14us; 855us; 0us; 16845us; 0us; 16846us; 1us; 16846us; 83us; 1189us; 0us; 16847us; 2us; 32768us; 115us; 860us; 180us; 863us; 64us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 862us; 0us; 16848us; 0us; 16849us; 0us; 16850us; 66us; 32768us; 18us; 867us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 866us; 0us; 16851us; 0us; 16852us; 65us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 869us; 0us; 16853us; 0us; 16854us; 0us; 16855us; 0us; 16856us; 0us; 16857us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 4us; 32768us; 10us; 858us; 23us; 1024us; 77us; 1022us; 180us; 856us; 0us; 16858us; 0us; 16859us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 5us; 32768us; 10us; 858us; 23us; 1024us; 77us; 1022us; 116us; 881us; 180us; 856us; 0us; 16860us; 0us; 16861us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16862us; 65us; 32768us; 10us; 858us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 856us; 25us; 32768us; 10us; 858us; 25us; 1046us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 94us; 1045us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 180us; 856us; 0us; 16863us; 0us; 16864us; 0us; 16865us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16866us; 55us; 16868us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 147us; 928us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16867us; 64us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 901us; 25us; 32768us; 10us; 858us; 27us; 1562us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 123us; 1561us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 180us; 856us; 65us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 898us; 4us; 32768us; 10us; 858us; 16us; 1564us; 124us; 1563us; 180us; 856us; 0us; 16869us; 0us; 16870us; 2us; 32768us; 16us; 1564us; 124us; 1563us; 0us; 16871us; 0us; 16872us; 2us; 32768us; 16us; 1564us; 124us; 1563us; 0us; 16873us; 35us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 918us; 5us; 17239us; 10us; 858us; 18us; 1555us; 27us; 1562us; 123us; 1561us; 180us; 856us; 65us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 909us; 2us; 32768us; 16us; 1564us; 124us; 1563us; 0us; 16874us; 0us; 16875us; 2us; 32768us; 16us; 1564us; 124us; 1563us; 0us; 16876us; 2us; 32768us; 27us; 1562us; 123us; 1561us; 65us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 916us; 4us; 32768us; 10us; 858us; 16us; 1564us; 124us; 1563us; 180us; 856us; 0us; 16877us; 0us; 16878us; 2us; 32768us; 16us; 1564us; 124us; 1563us; 0us; 16879us; 2us; 32768us; 27us; 1562us; 123us; 1561us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 2us; 32768us; 16us; 1564us; 124us; 1563us; 0us; 16880us; 2us; 32768us; 16us; 1564us; 124us; 1563us; 0us; 16881us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 21us; 16882us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 21us; 16883us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 115us; 931us; 1us; 17239us; 18us; 1555us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16884us; 33us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 3us; 32768us; 10us; 858us; 16us; 621us; 180us; 856us; 1us; 17239us; 18us; 1555us; 65us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 940us; 0us; 16885us; 0us; 16886us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 115us; 943us; 1us; 17239us; 18us; 1555us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16887us; 64us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 3us; 32768us; 10us; 858us; 16us; 621us; 180us; 856us; 0us; 16888us; 4us; 32768us; 75us; 1021us; 86us; 1221us; 87us; 1223us; 111us; 1225us; 0us; 16889us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16890us; 21us; 16891us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 17us; 16894us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 8us; 16895us; 52us; 1013us; 69us; 1011us; 84us; 1014us; 146us; 1010us; 169us; 1012us; 171us; 1015us; 174us; 1009us; 176us; 1016us; 17us; 16896us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 15us; 16897us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 84us; 1014us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 15us; 16898us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 84us; 1014us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 8us; 16899us; 52us; 1013us; 69us; 1011us; 84us; 1014us; 146us; 1010us; 169us; 1012us; 171us; 1015us; 174us; 1009us; 176us; 1016us; 8us; 16900us; 52us; 1013us; 69us; 1011us; 84us; 1014us; 146us; 1010us; 169us; 1012us; 171us; 1015us; 174us; 1009us; 176us; 1016us; 8us; 16901us; 52us; 1013us; 69us; 1011us; 84us; 1014us; 146us; 1010us; 169us; 1012us; 171us; 1015us; 174us; 1009us; 176us; 1016us; 8us; 16902us; 52us; 1013us; 69us; 1011us; 84us; 1014us; 146us; 1010us; 169us; 1012us; 171us; 1015us; 174us; 1009us; 176us; 1016us; 8us; 16903us; 52us; 1013us; 69us; 1011us; 84us; 1014us; 146us; 1010us; 169us; 1012us; 171us; 1015us; 174us; 1009us; 176us; 1016us; 8us; 16904us; 52us; 1013us; 69us; 1011us; 84us; 1014us; 146us; 1010us; 169us; 1012us; 171us; 1015us; 174us; 1009us; 176us; 1016us; 8us; 16905us; 52us; 1013us; 69us; 1011us; 84us; 1014us; 146us; 1010us; 169us; 1012us; 171us; 1015us; 174us; 1009us; 176us; 1016us; 1us; 16906us; 176us; 1016us; 7us; 16907us; 52us; 1013us; 69us; 1011us; 84us; 1014us; 146us; 1010us; 169us; 1012us; 171us; 1015us; 176us; 1016us; 4us; 16908us; 84us; 1014us; 146us; 1010us; 171us; 1015us; 176us; 1016us; 4us; 16909us; 84us; 1014us; 146us; 1010us; 171us; 1015us; 176us; 1016us; 1us; 16910us; 176us; 1016us; 1us; 16911us; 176us; 1016us; 1us; 16912us; 176us; 1016us; 21us; 16916us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 21us; 16929us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 21us; 16933us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 21us; 16937us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 23us; 32768us; 25us; 1046us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 94us; 1045us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 19us; 16941us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 19us; 16942us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 22us; 32768us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 129us; 1151us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 20us; 16981us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 20us; 16983us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 23us; 17032us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 95us; 1218us; 129us; 1219us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 21us; 17025us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 22us; 17026us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 129us; 1220us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 21us; 17027us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 23us; 32768us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 95us; 1302us; 125us; 1303us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 21us; 17035us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 21us; 17052us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 21us; 17052us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 21us; 17052us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 21us; 17051us; 52us; 1013us; 53us; 1006us; 60us; 1004us; 69us; 1011us; 73us; 993us; 79us; 1001us; 80us; 1002us; 84us; 1014us; 85us; 1060us; 92us; 1000us; 130us; 998us; 131us; 1007us; 132us; 1008us; 146us; 1010us; 169us; 1012us; 170us; 1003us; 171us; 1015us; 173us; 999us; 174us; 1009us; 175us; 1005us; 176us; 1016us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 16913us; 59us; 995us; 64us; 32768us; 19us; 830us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16892us; 1us; 16893us; 85us; 1059us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16914us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 83us; 1020us; 0us; 16915us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 36us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 49us; 1029us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1032us; 0us; 16917us; 36us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 49us; 1029us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1032us; 3us; 32768us; 10us; 858us; 17us; 1026us; 180us; 856us; 0us; 16918us; 0us; 16919us; 0us; 16920us; 35us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1031us; 0us; 16921us; 0us; 16922us; 0us; 16923us; 0us; 16924us; 1us; 32768us; 86us; 1041us; 2us; 16925us; 49us; 1036us; 180us; 1039us; 35us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1038us; 0us; 16926us; 0us; 16927us; 0us; 16928us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16931us; 3us; 16936us; 24us; 1052us; 126us; 1051us; 127us; 1057us; 0us; 16932us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 19us; 1047us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 3us; 32768us; 10us; 858us; 14us; 1049us; 180us; 856us; 0us; 16934us; 0us; 16935us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 19us; 1053us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 3us; 32768us; 10us; 858us; 14us; 1055us; 180us; 856us; 0us; 16938us; 0us; 16939us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16940us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 41us; 32768us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 41us; 17183us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16943us; 41us; 32768us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 41us; 17179us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16944us; 41us; 32768us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 41us; 17182us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16945us; 41us; 32768us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 41us; 17195us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16946us; 41us; 32768us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 41us; 17196us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16947us; 41us; 32768us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 41us; 17190us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16948us; 41us; 32768us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 41us; 17191us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16949us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 36us; 17055us; 13us; 17058us; 18us; 17058us; 23us; 17058us; 31us; 1387us; 61us; 1401us; 62us; 17262us; 64us; 17262us; 77us; 17058us; 81us; 1471us; 82us; 17262us; 96us; 17262us; 101us; 17058us; 103us; 1390us; 110us; 17262us; 122us; 17262us; 135us; 17262us; 142us; 17262us; 151us; 17262us; 152us; 17262us; 153us; 17262us; 154us; 17262us; 155us; 17262us; 156us; 17262us; 157us; 17262us; 158us; 17262us; 159us; 17262us; 160us; 17262us; 161us; 17262us; 162us; 17262us; 163us; 17262us; 165us; 17262us; 166us; 17262us; 174us; 1474us; 177us; 1477us; 178us; 17262us; 179us; 17262us; 6us; 17262us; 31us; 1387us; 61us; 1401us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 26us; 32768us; 62us; 1177us; 64us; 1206us; 82us; 1183us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 178us; 703us; 179us; 704us; 180us; 1090us; 26us; 32768us; 62us; 1177us; 64us; 1206us; 82us; 1183us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 178us; 703us; 179us; 704us; 180us; 1090us; 0us; 16950us; 5us; 16950us; 13us; 17057us; 23us; 17057us; 77us; 17057us; 101us; 17057us; 119us; 429us; 0us; 16951us; 41us; 32768us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16952us; 41us; 32768us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 107us; 1082us; 110us; 1158us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16953us; 32us; 16954us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1099us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 35us; 16954us; 23us; 1267us; 60us; 1259us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 77us; 1262us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1099us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16955us; 4us; 16956us; 30us; 1105us; 31us; 1104us; 65us; 1117us; 67us; 1109us; 31us; 32768us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 4us; 16957us; 30us; 1105us; 31us; 1104us; 65us; 1117us; 67us; 1109us; 4us; 16958us; 30us; 1105us; 31us; 1104us; 65us; 1117us; 67us; 1109us; 1us; 16959us; 30us; 1105us; 4us; 16961us; 30us; 1105us; 31us; 1104us; 65us; 1117us; 67us; 1109us; 31us; 32768us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 131us; 1439us; 0us; 16960us; 31us; 32768us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 31us; 17173us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 7us; 32768us; 10us; 858us; 61us; 1137us; 82us; 1130us; 90us; 1485us; 163us; 1129us; 177us; 1477us; 180us; 856us; 0us; 16962us; 1us; 32768us; 67us; 1112us; 7us; 32768us; 10us; 858us; 61us; 1137us; 82us; 1130us; 90us; 1485us; 163us; 1129us; 177us; 1477us; 180us; 856us; 0us; 16963us; 3us; 32768us; 82us; 1482us; 90us; 1485us; 177us; 1477us; 3us; 17189us; 82us; 1482us; 90us; 1485us; 177us; 1477us; 0us; 16964us; 2us; 32768us; 82us; 1018us; 177us; 1017us; 0us; 16965us; 0us; 16966us; 64us; 17022us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1124us; 3us; 32768us; 10us; 858us; 50us; 1122us; 180us; 856us; 0us; 16967us; 0us; 16968us; 1us; 32768us; 50us; 1125us; 0us; 16969us; 0us; 16970us; 0us; 16971us; 0us; 16972us; 0us; 16973us; 81us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 49us; 1521us; 52us; 1062us; 53us; 1500us; 60us; 1504us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1115us; 69us; 1131us; 73us; 1512us; 76us; 892us; 79us; 1077us; 80us; 1080us; 82us; 1185us; 84us; 1503us; 86us; 951us; 90us; 1485us; 92us; 1505us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 129us; 1516us; 130us; 1511us; 131us; 1506us; 132us; 1507us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1171us; 145us; 1071us; 146us; 1074us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 167us; 1513us; 168us; 1068us; 169us; 1065us; 170us; 1497us; 171us; 1499us; 172us; 1108us; 173us; 1496us; 174us; 1495us; 175us; 1494us; 176us; 1493us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 83us; 1132us; 1us; 32768us; 67us; 1133us; 1us; 32768us; 163us; 1134us; 0us; 16974us; 1us; 32768us; 83us; 1136us; 0us; 16975us; 65us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 84us; 1153us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 129us; 1152us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 50us; 1139us; 0us; 16976us; 2us; 32768us; 50us; 1141us; 85us; 1142us; 0us; 16977us; 65us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 84us; 1153us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 129us; 1152us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 2us; 32768us; 50us; 1144us; 85us; 1145us; 0us; 16978us; 65us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 84us; 1153us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 129us; 1152us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 2us; 32768us; 50us; 1147us; 85us; 1148us; 0us; 16979us; 65us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 84us; 1153us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 129us; 1152us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 50us; 1150us; 0us; 16980us; 63us; 16982us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 16984us; 0us; 16985us; 0us; 16986us; 0us; 16987us; 0us; 16988us; 0us; 16989us; 0us; 16990us; 0us; 16991us; 0us; 16992us; 0us; 16993us; 65us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 128us; 1169us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1167us; 3us; 32768us; 10us; 858us; 128us; 1165us; 180us; 856us; 0us; 16994us; 0us; 16995us; 1us; 32768us; 128us; 1168us; 0us; 16996us; 0us; 16997us; 64us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1175us; 65us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 143us; 1519us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1175us; 3us; 32768us; 10us; 858us; 143us; 1173us; 180us; 856us; 0us; 16998us; 0us; 16999us; 1us; 32768us; 143us; 1176us; 0us; 17000us; 64us; 17022us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1181us; 3us; 32768us; 10us; 858us; 55us; 1179us; 180us; 856us; 0us; 17001us; 0us; 17002us; 1us; 32768us; 55us; 1182us; 0us; 17003us; 68us; 17008us; 10us; 858us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 78us; 1237us; 79us; 1076us; 80us; 1079us; 82us; 1184us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 98us; 1191us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 174us; 1474us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 857us; 84us; 17008us; 10us; 858us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 49us; 1521us; 52us; 1062us; 53us; 1500us; 60us; 1504us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1115us; 73us; 1512us; 76us; 892us; 78us; 1237us; 79us; 1077us; 80us; 1080us; 82us; 1184us; 84us; 1503us; 86us; 951us; 90us; 1485us; 92us; 1505us; 96us; 1159us; 97us; 877us; 98us; 1191us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 129us; 1516us; 130us; 1511us; 131us; 1506us; 132us; 1507us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1171us; 145us; 1071us; 146us; 1074us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 167us; 1513us; 168us; 1068us; 169us; 1065us; 170us; 1497us; 171us; 1499us; 172us; 1108us; 173us; 1496us; 174us; 1475us; 175us; 1494us; 176us; 1493us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 857us; 84us; 17008us; 10us; 858us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 49us; 1521us; 52us; 1062us; 53us; 1500us; 60us; 1504us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1115us; 73us; 1512us; 76us; 892us; 78us; 1237us; 79us; 1077us; 80us; 1080us; 82us; 1184us; 84us; 1503us; 86us; 951us; 90us; 1485us; 92us; 1505us; 96us; 1159us; 97us; 877us; 98us; 1191us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 129us; 1516us; 130us; 1511us; 131us; 1506us; 132us; 1507us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1171us; 145us; 1071us; 146us; 1074us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 167us; 1513us; 168us; 1068us; 169us; 1065us; 170us; 1497us; 171us; 1499us; 172us; 1108us; 173us; 1496us; 174us; 1475us; 175us; 1494us; 176us; 1493us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 857us; 3us; 32768us; 10us; 858us; 83us; 1187us; 180us; 856us; 0us; 17004us; 0us; 17005us; 0us; 17006us; 0us; 17007us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 17009us; 1us; 32768us; 68us; 1194us; 1us; 32768us; 82us; 1195us; 1us; 16486us; 63us; 184us; 1us; 32768us; 83us; 1197us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 17010us; 0us; 17011us; 0us; 17012us; 0us; 17013us; 1us; 17013us; 92us; 1203us; 1us; 32768us; 174us; 1474us; 1us; 32768us; 83us; 1205us; 0us; 17014us; 65us; 17046us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 45us; 1253us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1083us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1210us; 3us; 32768us; 10us; 858us; 51us; 1208us; 180us; 856us; 0us; 17015us; 0us; 17016us; 1us; 32768us; 51us; 1211us; 0us; 17017us; 0us; 17018us; 0us; 17019us; 0us; 17020us; 0us; 17021us; 0us; 17023us; 0us; 17024us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 17028us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 17029us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 17239us; 18us; 1555us; 4us; 32768us; 75us; 1021us; 86us; 1221us; 87us; 1223us; 111us; 1225us; 0us; 17030us; 1us; 17239us; 18us; 1555us; 4us; 32768us; 75us; 1021us; 86us; 1221us; 87us; 1223us; 111us; 1225us; 0us; 17031us; 65us; 32768us; 10us; 858us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 856us; 0us; 17033us; 0us; 17034us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 178us; 1238us; 1us; 17041us; 98us; 1245us; 0us; 17038us; 33us; 17043us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 68us; 1249us; 82us; 1185us; 90us; 1485us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1099us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 78us; 1571us; 0us; 17036us; 0us; 17037us; 0us; 17040us; 1us; 32768us; 82us; 1246us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 1us; 32768us; 83us; 1248us; 0us; 17042us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1251us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 17044us; 10us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 83us; 1252us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 180us; 1430us; 0us; 17045us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 6us; 17262us; 31us; 1387us; 61us; 1401us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 25us; 17039us; 62us; 1177us; 64us; 1206us; 82us; 1183us; 96us; 1159us; 110us; 1158us; 122us; 1163us; 135us; 1157us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 178us; 703us; 179us; 704us; 0us; 17052us; 2us; 17241us; 18us; 1543us; 74us; 1544us; 0us; 17047us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 2us; 17241us; 18us; 1543us; 74us; 1544us; 0us; 17048us; 1us; 32768us; 177us; 1477us; 2us; 32768us; 60us; 1264us; 67us; 1479us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 2us; 17241us; 18us; 1543us; 74us; 1544us; 0us; 17049us; 1us; 32768us; 177us; 1477us; 2us; 32768us; 60us; 1269us; 67us; 1479us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 2us; 17241us; 18us; 1543us; 74us; 1544us; 1us; 32768us; 17us; 1272us; 0us; 17050us; 1us; 17240us; 177us; 1477us; 2us; 32768us; 60us; 1275us; 67us; 1479us; 63us; 32768us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 3us; 17239us; 18us; 1555us; 23us; 1286us; 77us; 1284us; 1us; 17239us; 18us; 1555us; 3us; 17065us; 13us; 469us; 101us; 468us; 180us; 1295us; 0us; 17053us; 2us; 32768us; 13us; 469us; 101us; 468us; 0us; 17054us; 0us; 17056us; 0us; 17059us; 4us; 16486us; 19us; 432us; 63us; 184us; 123us; 656us; 180us; 660us; 0us; 17061us; 3us; 16486us; 63us; 184us; 123us; 656us; 180us; 660us; 1us; 32768us; 17us; 1288us; 0us; 17062us; 3us; 17233us; 16us; 1550us; 17us; 1551us; 128us; 1552us; 0us; 17063us; 3us; 17065us; 13us; 469us; 101us; 468us; 180us; 1295us; 0us; 17064us; 3us; 17065us; 13us; 469us; 101us; 468us; 180us; 1295us; 0us; 17066us; 3us; 17065us; 13us; 469us; 101us; 468us; 180us; 1295us; 0us; 17067us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 8us; 17060us; 23us; 1286us; 31us; 1386us; 61us; 1401us; 77us; 1284us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 3us; 17233us; 16us; 1550us; 17us; 1551us; 128us; 1552us; 1us; 17239us; 18us; 1555us; 0us; 17068us; 0us; 17069us; 0us; 17070us; 32us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 86us; 1306us; 65us; 32768us; 19us; 825us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 1308us; 0us; 17071us; 0us; 17072us; 32us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 64us; 761us; 65us; 771us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 1us; 32768us; 86us; 1311us; 66us; 32768us; 10us; 858us; 15us; 1314us; 21us; 1309us; 22us; 1320us; 26us; 946us; 27us; 614us; 28us; 934us; 29us; 610us; 32us; 623us; 52us; 1061us; 61us; 1120us; 62us; 1177us; 64us; 1206us; 65us; 1114us; 76us; 892us; 79us; 1076us; 80us; 1079us; 82us; 1185us; 86us; 951us; 90us; 1485us; 96us; 1159us; 97us; 877us; 103us; 888us; 104us; 873us; 107us; 1082us; 110us; 1158us; 111us; 903us; 112us; 1304us; 113us; 1317us; 114us; 883us; 117us; 941us; 120us; 890us; 122us; 1163us; 133us; 1091us; 134us; 1093us; 135us; 1157us; 141us; 1111us; 142us; 1170us; 145us; 1070us; 146us; 1073us; 147us; 928us; 148us; 604us; 149us; 924us; 150us; 926us; 151us; 702us; 152us; 701us; 153us; 699us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 168us; 1067us; 169us; 1064us; 172us; 1107us; 177us; 1477us; 178us; 703us; 179us; 704us; 180us; 856us; 1us; 32768us; 17us; 1313us; 0us; 17073us; 1us; 32768us; 17us; 1315us; 0us; 17074us; 0us; 17075us; 1us; 17245us; 49us; 1558us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 0us; 17076us; 1us; 17245us; 49us; 1558us; 34us; 32768us; 34us; 407us; 35us; 406us; 36us; 408us; 57us; 770us; 61us; 764us; 62us; 767us; 63us; 184us; 64us; 761us; 65us; 771us; 72us; 751us; 82us; 779us; 90us; 1485us; 96us; 777us; 110us; 776us; 135us; 778us; 142us; 1170us; 151us; 702us; 152us; 701us; 153us; 700us; 154us; 698us; 155us; 697us; 156us; 695us; 157us; 696us; 158us; 694us; 159us; 692us; 160us; 690us; 161us; 688us; 162us; 693us; 163us; 691us; 165us; 689us; 166us; 687us; 177us; 1477us; 178us; 703us; 179us; 704us; 2us; 32768us; 17us; 1323us; 180us; 1324us; 0us; 17077us; 1us; 32768us; 17us; 1325us; 0us; 17078us; 1us; 17079us; 75us; 1327us; 4us; 32768us; 43us; 507us; 81us; 1471us; 82us; 522us; 174us; 1474us; 1us; 17081us; 75us; 1329us; 4us; 32768us; 43us; 507us; 81us; 1471us; 82us; 522us; 174us; 1474us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 17084us; 1us; 17086us; 86us; 1333us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 17085us; 1us; 17088us; 84us; 1336us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 17087us; 1us; 17090us; 84us; 1339us; 9us; 32768us; 57us; 1398us; 63us; 184us; 65us; 1352us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 17089us; 8us; 32768us; 57us; 1398us; 65us; 1345us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 7us; 17093us; 31us; 1386us; 61us; 1401us; 68us; 1343us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 6us; 17091us; 31us; 1386us; 61us; 1401us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 1us; 32768us; 177us; 1477us; 1us; 32768us; 68us; 1347us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 6us; 17092us; 31us; 1386us; 61us; 1401us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 7us; 17096us; 31us; 1386us; 61us; 1401us; 68us; 1350us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 6us; 17094us; 31us; 1386us; 61us; 1401us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 1us; 32768us; 177us; 1477us; 1us; 32768us; 68us; 1354us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 6us; 17095us; 31us; 1386us; 61us; 1401us; 81us; 1471us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 2us; 17111us; 67us; 1357us; 70us; 1396us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 17097us; 0us; 17098us; 1us; 17100us; 86us; 1361us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 17099us; 8us; 17104us; 31us; 1386us; 61us; 1401us; 81us; 1471us; 84us; 1364us; 103us; 1390us; 171us; 1368us; 174us; 1474us; 177us; 1477us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 17101us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 17102us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 17103us; 8us; 17107us; 31us; 1386us; 61us; 1401us; 81us; 1471us; 84us; 1371us; 103us; 1390us; 171us; 1373us; 174us; 1474us; 177us; 1477us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 17105us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 17106us; 7us; 17109us; 31us; 1386us; 61us; 1401us; 81us; 1471us; 84us; 1376us; 103us; 1390us; 174us; 1474us; 177us; 1477us; 7us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 0us; 17108us; 1us; 17110us; 67us; 1479us; 0us; 17111us; 1us; 17111us; 70us; 1396us; 1us; 17113us; 174us; 1383us; 3us; 17113us; 30us; 1437us; 131us; 1439us; 174us; 1383us; 1us; 32768us; 163us; 1384us; 0us; 17112us; 0us; 17114us; 1us; 32768us; 61us; 1401us; 1us; 17261us; 61us; 1401us; 0us; 17115us; 0us; 17116us; 0us; 17117us; 9us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 180us; 1430us; 1us; 32768us; 83us; 1393us; 3us; 32768us; 81us; 1471us; 174us; 1474us; 177us; 1477us; 0us; 17118us; 0us; 17119us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 17120us; 1us; 17134us; 70us; 1399us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 17121us; 2us; 32768us; 50us; 1402us; 85us; 1403us; 0us; 17122us; 2us; 32768us; 50us; 1404us; 85us; 1405us; 0us; 17123us; 2us; 32768us; 50us; 1406us; 85us; 1407us; 0us; 17124us; 1us; 32768us; 50us; 1408us; 0us; 17125us; 4us; 32768us; 10us; 858us; 83us; 1427us; 85us; 1410us; 180us; 856us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 17128us; 1us; 17126us; 85us; 1414us; 2us; 32768us; 85us; 1414us; 132us; 1445us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 17127us; 2us; 17129us; 67us; 1433us; 174us; 1417us; 2us; 32768us; 52us; 1419us; 163us; 1418us; 0us; 17130us; 1us; 32768us; 163us; 1420us; 0us; 17131us; 7us; 32768us; 57us; 1424us; 78us; 1421us; 81us; 1471us; 82us; 1425us; 163us; 1429us; 174us; 1474us; 177us; 1477us; 1us; 17132us; 67us; 1433us; 0us; 17133us; 0us; 17134us; 9us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 180us; 1430us; 3us; 32768us; 10us; 858us; 83us; 1427us; 180us; 856us; 0us; 17135us; 0us; 17136us; 0us; 17137us; 1us; 32768us; 83us; 1431us; 0us; 17138us; 0us; 17139us; 1us; 32768us; 177us; 1477us; 3us; 17140us; 30us; 1437us; 67us; 1479us; 131us; 1439us; 0us; 17141us; 0us; 17142us; 1us; 32768us; 131us; 1439us; 0us; 17143us; 9us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 132us; 1440us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 17144us; 2us; 32768us; 85us; 1443us; 132us; 1442us; 0us; 17145us; 8us; 32768us; 57us; 1398us; 78us; 1421us; 81us; 1471us; 82us; 1391us; 163us; 1429us; 171us; 1366us; 174us; 1474us; 177us; 1477us; 0us; 17128us; 0us; 17146us; 7us; 32768us; 57us; 1449us; 81us; 1471us; 82us; 1453us; 163us; 1461us; 171us; 1470us; 174us; 1474us; 177us; 1477us; 3us; 32768us; 84us; 1468us; 132us; 1448us; 171us; 1469us; 0us; 17147us; 1us; 32768us; 132us; 1450us; 0us; 17148us; 1us; 17149us; 67us; 1479us; 0us; 17150us; 6us; 32768us; 81us; 1471us; 82us; 1453us; 163us; 1461us; 171us; 1470us; 174us; 1474us; 177us; 1477us; 3us; 32768us; 83us; 1455us; 84us; 1468us; 171us; 1469us; 0us; 17151us; 1us; 17152us; 174us; 1457us; 2us; 32768us; 52us; 1459us; 163us; 1458us; 0us; 17153us; 1us; 32768us; 163us; 1460us; 0us; 17154us; 0us; 17155us; 5us; 17156us; 81us; 1471us; 82us; 1453us; 163us; 1461us; 174us; 1474us; 177us; 1477us; 0us; 17157us; 0us; 17158us; 0us; 17159us; 0us; 17160us; 0us; 17161us; 6us; 32768us; 81us; 1471us; 82us; 1453us; 163us; 1461us; 171us; 1470us; 174us; 1474us; 177us; 1477us; 6us; 32768us; 81us; 1471us; 82us; 1453us; 163us; 1461us; 171us; 1470us; 174us; 1474us; 177us; 1477us; 6us; 32768us; 81us; 1471us; 82us; 1453us; 163us; 1461us; 171us; 1470us; 174us; 1474us; 177us; 1477us; 1us; 32768us; 177us; 1477us; 0us; 17162us; 0us; 17163us; 1us; 32768us; 177us; 1477us; 1us; 17176us; 177us; 1477us; 0us; 17164us; 0us; 17165us; 0us; 17166us; 2us; 32768us; 177us; 1477us; 180us; 1481us; 0us; 17167us; 0us; 17168us; 27us; 32768us; 49us; 1521us; 52us; 1502us; 53us; 1500us; 60us; 1504us; 65us; 1508us; 73us; 1512us; 79us; 1509us; 80us; 1510us; 84us; 1503us; 92us; 1505us; 129us; 1516us; 130us; 1511us; 131us; 1506us; 132us; 1507us; 142us; 1518us; 145us; 1514us; 146us; 1515us; 167us; 1513us; 168us; 1501us; 169us; 1498us; 170us; 1497us; 171us; 1499us; 172us; 1492us; 173us; 1496us; 174us; 1495us; 175us; 1494us; 176us; 1493us; 1us; 32768us; 83us; 1484us; 0us; 17169us; 0us; 17170us; 1us; 32768us; 49us; 1487us; 3us; 32768us; 57us; 1489us; 83us; 1488us; 177us; 1520us; 0us; 17171us; 1us; 32768us; 49us; 1490us; 1us; 32768us; 83us; 1491us; 0us; 17172us; 0us; 17173us; 0us; 17174us; 0us; 17175us; 0us; 17176us; 0us; 17177us; 0us; 17178us; 0us; 17179us; 0us; 17180us; 0us; 17181us; 0us; 17182us; 0us; 17183us; 0us; 17184us; 0us; 17185us; 0us; 17186us; 0us; 17187us; 0us; 17188us; 0us; 17189us; 0us; 17190us; 0us; 17191us; 0us; 17192us; 0us; 17193us; 0us; 17194us; 0us; 17195us; 0us; 17196us; 1us; 17197us; 129us; 1517us; 0us; 17198us; 1us; 32768us; 143us; 1519us; 0us; 17199us; 0us; 17200us; 1us; 32768us; 177us; 1520us; 0us; 17201us; 0us; 17202us; 0us; 17203us; 0us; 17204us; 1us; 17205us; 67us; 1528us; 0us; 17206us; 4us; 32768us; 82us; 1482us; 90us; 1485us; 177us; 1477us; 180us; 1530us; 0us; 17207us; 0us; 17208us; 0us; 17209us; 0us; 17210us; 0us; 17211us; 0us; 17212us; 3us; 17213us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 0us; 17214us; 0us; 17215us; 0us; 17216us; 2us; 17217us; 18us; 1538us; 74us; 1537us; 0us; 17218us; 3us; 17222us; 18us; 1534us; 58us; 1533us; 74us; 1532us; 0us; 17221us; 1us; 17223us; 74us; 1545us; 1us; 17224us; 18us; 1546us; 0us; 17225us; 0us; 17226us; 0us; 17227us; 0us; 17228us; 0us; 17229us; 0us; 17230us; 0us; 17231us; 0us; 17232us; 0us; 17234us; 0us; 17236us; 0us; 17238us; 0us; 17240us; 0us; 17242us; 0us; 17244us; 0us; 17246us; 0us; 17248us; 0us; 17250us; 0us; 17251us; 0us; 17252us; 0us; 17253us; 0us; 17254us; 0us; 17255us; 0us; 17256us; 0us; 17257us; 0us; 17258us; 0us; 17259us; 0us; 17260us; 0us; 17261us; 0us; 17263us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 88us; 89us; 97us; 98us; 99us; 100us; 101us; 103us; 104us; 106us; 107us; 108us; 109us; 110us; 111us; 116us; 117us; 122us; 123us; 128us; 129us; 135us; 136us; 142us; 143us; 149us; 150us; 163us; 164us; 168us; 236us; 258us; 259us; 262us; 263us; 265us; 266us; 271us; 272us; 275us; 276us; 278us; 279us; 284us; 285us; 289us; 291us; 293us; 295us; 297us; 300us; 301us; 304us; 305us; 307us; 309us; 321us; 322us; 325us; 326us; 329us; 330us; 332us; 334us; 409us; 410us; 414us; 419us; 433us; 434us; 435us; 439us; 507us; 584us; 585us; 586us; 587us; 591us; 595us; 607us; 608us; 612us; 617us; 618us; 619us; 623us; 691us; 716us; 791us; 792us; 793us; 797us; 802us; 807us; 825us; 826us; 901us; 902us; 906us; 911us; 912us; 913us; 914us; 918us; 926us; 927us; 930us; 931us; 996us; 997us; 999us; 1001us; 1002us; 1024us; 1025us; 1026us; 1028us; 1030us; 1035us; 1036us; 1037us; 1045us; 1048us; 1049us; 1051us; 1058us; 1060us; 1061us; 1065us; 1066us; 1067us; 1068us; 1069us; 1071us; 1146us; 1150us; 1151us; 1152us; 1153us; 1158us; 1159us; 1161us; 1168us; 1172us; 1173us; 1174us; 1175us; 1179us; 1184us; 1187us; 1192us; 1193us; 1194us; 1195us; 1196us; 1198us; 1200us; 1202us; 1204us; 1206us; 1210us; 1214us; 1217us; 1219us; 1229us; 1231us; 1232us; 1296us; 1318us; 1325us; 1327us; 1328us; 1340us; 1342us; 1344us; 1345us; 1357us; 1359us; 1360us; 1361us; 1363us; 1364us; 1369us; 1372us; 1374us; 1376us; 1377us; 1378us; 1383us; 1384us; 1387us; 1413us; 1414us; 1416us; 1418us; 1421us; 1447us; 1448us; 1449us; 1450us; 1481us; 1482us; 1484us; 1485us; 1487us; 1489us; 1490us; 1493us; 1501us; 1502us; 1503us; 1514us; 1516us; 1520us; 1522us; 1524us; 1526us; 1527us; 1529us; 1530us; 1531us; 1532us; 1534us; 1544us; 1545us; 1546us; 1552us; 1556us; 1557us; 1558us; 1560us; 1561us; 1566us; 1570us; 1571us; 1572us; 1578us; 1582us; 1583us; 1584us; 1589us; 1593us; 1594us; 1595us; 1596us; 1599us; 1608us; 1609us; 1613us; 1622us; 1623us; 1624us; 1625us; 1626us; 1627us; 1628us; 1629us; 1631us; 1632us; 1636us; 1637us; 1641us; 1644us; 1645us; 1646us; 1648us; 1652us; 1653us; 1657us; 1661us; 1674us; 1697us; 1699us; 1703us; 1707us; 1710us; 1712us; 1722us; 1725us; 1727us; 1728us; 1736us; 1743us; 1751us; 1758us; 1760us; 1761us; 1763us; 1764us; 1766us; 1767us; 1769us; 1779us; 1780us; 1784us; 1786us; 1787us; 1789us; 1791us; 1792us; 1829us; 1836us; 1837us; 1841us; 1843us; 1845us; 1847us; 1849us; 1856us; 1857us; 1867us; 1869us; 1874us; 1876us; 1878us; 1880us; 1881us; 1883us; 1884us; 1885us; 1886us; 1888us; 1898us; 1899us; 1900us; 1906us; 1910us; 1911us; 1912us; 1917us; 1918us; 1923us; 1927us; 1928us; 1929us; 1934us; 1938us; 1939us; 1940us; 1941us; 1944us; 1953us; 1954us; 1963us; 1964us; 1966us; 1967us; 1969us; 1972us; 1973us; 1974us; 1976us; 1978us; 1979us; 2013us; 2015us; 2017us; 2082us; 2083us; 2117us; 2119us; 2123us; 2188us; 2189us; 2190us; 2192us; 2193us; 2197us; 2201us; 2219us; 2247us; 2248us; 2249us; 2251us; 2253us; 2254us; 2262us; 2270us; 2271us; 2273us; 2277us; 2280us; 2282us; 2292us; 2295us; 2297us; 2298us; 2299us; 2301us; 2302us; 2304us; 2305us; 2338us; 2340us; 2342us; 2407us; 2409us; 2410us; 2412us; 2413us; 2414us; 2418us; 2419us; 2420us; 2421us; 2422us; 2423us; 2424us; 2427us; 2431us; 2432us; 2439us; 2443us; 2444us; 2450us; 2454us; 2455us; 2463us; 2496us; 2497us; 2523us; 2525us; 2526us; 2527us; 2529us; 2530us; 2531us; 2534us; 2535us; 2536us; 2538us; 2542us; 2543us; 2544us; 2545us; 2548us; 2560us; 2561us; 2564us; 2568us; 2571us; 2573us; 2574us; 2575us; 2576us; 2577us; 2581us; 2592us; 2593us; 2594us; 2595us; 2605us; 2607us; 2608us; 2611us; 2615us; 2616us; 2617us; 2619us; 2620us; 2629us; 2631us; 2632us; 2633us; 2634us; 2635us; 2636us; 2637us; 2642us; 2646us; 2648us; 2650us; 2651us; 2652us; 2654us; 2657us; 2658us; 2661us; 2663us; 2665us; 2668us; 2669us; 2670us; 2673us; 2674us; 2676us; 2678us; 2680us; 2681us; 2682us; 2683us; 2685us; 2690us; 2692us; 2694us; 2695us; 2696us; 2718us; 2723us; 2725us; 2727us; 2729us; 2734us; 2735us; 2736us; 2739us; 2741us; 2750us; 2751us; 2754us; 2763us; 2764us; 2770us; 2771us; 2775us; 2776us; 2777us; 2779us; 2781us; 2782us; 2785us; 2787us; 2790us; 2792us; 2794us; 2796us; 2798us; 2800us; 2801us; 2804us; 2805us; 2806us; 2808us; 2809us; 2811us; 2813us; 2814us; 2817us; 2818us; 2820us; 2822us; 2823us; 2827us; 2831us; 2836us; 2837us; 2846us; 2848us; 2849us; 2859us; 2861us; 2862us; 2880us; 2882us; 2883us; 2884us; 2914us; 2916us; 2917us; 2919us; 2921us; 2922us; 2927us; 2928us; 2946us; 2948us; 2988us; 2989us; 2998us; 2999us; 3000us; 3008us; 3016us; 3017us; 3020us; 3025us; 3026us; 3027us; 3029us; 3030us; 3034us; 3036us; 3038us; 3047us; 3048us; 3050us; 3051us; 3053us; 3054us; 3055us; 3057us; 3061us; 3063us; 3065us; 3066us; 3068us; 3077us; 3078us; 3080us; 3082us; 3084us; 3086us; 3088us; 3092us; 3093us; 3094us; 3159us; 3160us; 3162us; 3166us; 3170us; 3171us; 3236us; 3240us; 3241us; 3242us; 3243us; 3244us; 3245us; 3246us; 3247us; 3249us; 3253us; 3255us; 3257us; 3259us; 3262us; 3264us; 3265us; 3267us; 3269us; 3271us; 3272us; 3274us; 3275us; 3278us; 3284us; 3285us; 3287us; 3292us; 3294us; 3296us; 3297us; 3298us; 3299us; 3301us; 3303us; 3304us; 3307us; 3309us; 3310us; 3314us; 3316us; 3317us; 3382us; 3383us; 3385us; 3386us; 3387us; 3389us; 3423us; 3425us; 3427us; 3493us; 3494us; 3495us; 3559us; 3563us; 3564us; 3565us; 3566us; 3567us; 3569us; 3570us; 3574us; 3577us; 3642us; 3643us; 3647us; 3648us; 3649us; 3651us; 3660us; 3661us; 3662us; 3663us; 3664us; 3665us; 3666us; 3667us; 3668us; 3669us; 3670us; 3671us; 3672us; 3673us; 3674us; 3675us; 3677us; 3678us; 3679us; 3680us; 3681us; 3683us; 3685us; 3686us; 3692us; 3693us; 3695us; 3696us; 3698us; 3701us; 3710us; 3711us; 3715us; 3719us; 3720us; 3727us; 3731us; 3732us; 3733us; 3734us; 3736us; 3737us; 3738us; 3742us; 3744us; 3747us; 3750us; 3752us; 3754us; 3761us; 3768us; 3770us; 3771us; 3805us; 3839us; 3841us; 3842us; 3843us; 3877us; 3911us; 3945us; 3979us; 4003us; 4037us; 4038us; 4071us; 4072us; 4080us; 4082us; 4083us; 4117us; 4118us; 4151us; 4152us; 4153us; 4155us; 4156us; 4158us; 4160us; 4161us; 4196us; 4198us; 4199us; 4234us; 4236us; 4237us; 4238us; 4240us; 4242us; 4243us; 4244us; 4245us; 4246us; 4247us; 4248us; 4310us; 4314us; 4315us; 4316us; 4318us; 4319us; 4320us; 4328us; 4334us; 4339us; 4343us; 4348us; 4353us; 4357us; 4361us; 4369us; 4379us; 4390us; 4399us; 4408us; 4410us; 4411us; 4446us; 4448us; 4450us; 4459us; 4460us; 4495us; 4530us; 4539us; 4540us; 4541us; 4576us; 4611us; 4646us; 4681us; 4682us; 4685us; 4686us; 4688us; 4689us; 4692us; 4727us; 4728us; 4763us; 4764us; 4828us; 4832us; 4833us; 4834us; 4835us; 4899us; 4901us; 4902us; 4924us; 4926us; 4927us; 4932us; 4941us; 4942us; 4951us; 4952us; 4961us; 4962us; 4971us; 4972us; 4998us; 5025us; 5053us; 5117us; 5118us; 5182us; 5183us; 5185us; 5249us; 5251us; 5252us; 5253us; 5255us; 5256us; 5259us; 5324us; 5325us; 5326us; 5327us; 5394us; 5395us; 5396us; 5462us; 5463us; 5464us; 5465us; 5466us; 5467us; 5531us; 5536us; 5537us; 5538us; 5602us; 5608us; 5609us; 5610us; 5675us; 5676us; 5742us; 5768us; 5769us; 5770us; 5771us; 5835us; 5836us; 5892us; 5893us; 5958us; 5984us; 6050us; 6055us; 6056us; 6057us; 6060us; 6061us; 6062us; 6065us; 6066us; 6102us; 6108us; 6174us; 6177us; 6178us; 6179us; 6182us; 6183us; 6186us; 6252us; 6257us; 6258us; 6259us; 6262us; 6263us; 6266us; 6331us; 6334us; 6335us; 6338us; 6339us; 6403us; 6425us; 6489us; 6511us; 6545us; 6610us; 6612us; 6614us; 6679us; 6680us; 6714us; 6779us; 6783us; 6785us; 6851us; 6852us; 6853us; 6917us; 6919us; 6921us; 6986us; 6987us; 7052us; 7056us; 7057us; 7062us; 7063us; 7127us; 7128us; 7150us; 7168us; 7177us; 7195us; 7211us; 7227us; 7236us; 7245us; 7254us; 7263us; 7272us; 7281us; 7290us; 7292us; 7300us; 7305us; 7310us; 7312us; 7314us; 7316us; 7338us; 7360us; 7382us; 7404us; 7428us; 7448us; 7468us; 7491us; 7512us; 7533us; 7557us; 7579us; 7602us; 7624us; 7648us; 7670us; 7692us; 7714us; 7736us; 7758us; 7822us; 7824us; 7889us; 7890us; 7892us; 7956us; 8020us; 8084us; 8148us; 8212us; 8276us; 8340us; 8404us; 8468us; 8532us; 8596us; 8660us; 8724us; 8788us; 8852us; 8916us; 8980us; 9044us; 9108us; 9109us; 9173us; 9175us; 9176us; 9240us; 9277us; 9278us; 9315us; 9319us; 9320us; 9321us; 9322us; 9358us; 9359us; 9360us; 9361us; 9362us; 9364us; 9367us; 9403us; 9404us; 9405us; 9406us; 9470us; 9534us; 9535us; 9539us; 9540us; 9604us; 9606us; 9670us; 9674us; 9675us; 9676us; 9740us; 9742us; 9806us; 9810us; 9811us; 9812us; 9876us; 9877us; 9941us; 10005us; 10047us; 10089us; 10090us; 10132us; 10174us; 10175us; 10217us; 10259us; 10260us; 10302us; 10344us; 10345us; 10387us; 10429us; 10430us; 10472us; 10514us; 10515us; 10557us; 10599us; 10600us; 10608us; 10616us; 10653us; 10660us; 10687us; 10714us; 10715us; 10721us; 10722us; 10764us; 10765us; 10807us; 10808us; 10841us; 10877us; 10878us; 10883us; 10915us; 10920us; 10925us; 10927us; 10932us; 10964us; 10966us; 10967us; 10999us; 11031us; 11039us; 11040us; 11042us; 11050us; 11051us; 11055us; 11059us; 11060us; 11063us; 11064us; 11065us; 11130us; 11134us; 11135us; 11136us; 11138us; 11139us; 11140us; 11141us; 11142us; 11143us; 11225us; 11227us; 11229us; 11231us; 11232us; 11234us; 11235us; 11301us; 11303us; 11304us; 11307us; 11308us; 11374us; 11377us; 11378us; 11444us; 11447us; 11448us; 11514us; 11516us; 11517us; 11581us; 11645us; 11646us; 11647us; 11648us; 11649us; 11650us; 11651us; 11652us; 11653us; 11654us; 11655us; 11721us; 11725us; 11726us; 11727us; 11729us; 11730us; 11731us; 11796us; 11862us; 11866us; 11867us; 11868us; 11870us; 11871us; 11936us; 11940us; 11941us; 11942us; 11944us; 11945us; 12014us; 12099us; 12184us; 12188us; 12189us; 12190us; 12191us; 12192us; 12201us; 12202us; 12204us; 12206us; 12208us; 12210us; 12274us; 12275us; 12276us; 12277us; 12278us; 12280us; 12282us; 12284us; 12285us; 12351us; 12355us; 12356us; 12357us; 12359us; 12360us; 12361us; 12362us; 12363us; 12364us; 12365us; 12366us; 12430us; 12494us; 12558us; 12622us; 12623us; 12687us; 12688us; 12723us; 12725us; 12730us; 12731us; 12733us; 12738us; 12739us; 12805us; 12806us; 12807us; 12871us; 12935us; 12937us; 12939us; 12940us; 12974us; 12976us; 12977us; 12978us; 12979us; 12981us; 12990us; 12992us; 12993us; 13002us; 13003us; 13014us; 13015us; 13023us; 13030us; 13056us; 13057us; 13060us; 13061us; 13125us; 13128us; 13129us; 13131us; 13134us; 13198us; 13201us; 13202us; 13204us; 13207us; 13271us; 13274us; 13276us; 13277us; 13279us; 13282us; 13346us; 13350us; 13352us; 13356us; 13357us; 13360us; 13361us; 13362us; 13363us; 13368us; 13369us; 13373us; 13375us; 13376us; 13380us; 13381us; 13385us; 13386us; 13390us; 13391us; 13395us; 13396us; 13404us; 13413us; 13417us; 13419us; 13420us; 13421us; 13422us; 13455us; 13457us; 13523us; 13524us; 13525us; 13558us; 13560us; 13627us; 13629us; 13630us; 13632us; 13633us; 13634us; 13636us; 13671us; 13672us; 13674us; 13709us; 13712us; 13713us; 13715us; 13716us; 13718us; 13723us; 13725us; 13730us; 13740us; 13741us; 13743us; 13753us; 13754us; 13756us; 13766us; 13767us; 13769us; 13779us; 13780us; 13789us; 13797us; 13805us; 13812us; 13814us; 13816us; 13824us; 13831us; 13839us; 13847us; 13854us; 13856us; 13858us; 13866us; 13873us; 13876us; 13885us; 13886us; 13887us; 13889us; 13898us; 13899us; 13908us; 13916us; 13917us; 13925us; 13926us; 13934us; 13935us; 13944us; 13952us; 13953us; 13961us; 13962us; 13970us; 13978us; 13979us; 13981us; 13982us; 13984us; 13986us; 13990us; 13992us; 13993us; 13994us; 13996us; 13998us; 13999us; 14000us; 14001us; 14011us; 14013us; 14017us; 14018us; 14019us; 14028us; 14029us; 14031us; 14040us; 14041us; 14044us; 14045us; 14048us; 14049us; 14052us; 14053us; 14055us; 14056us; 14061us; 14070us; 14071us; 14073us; 14076us; 14085us; 14086us; 14089us; 14092us; 14093us; 14095us; 14096us; 14104us; 14106us; 14107us; 14108us; 14118us; 14122us; 14123us; 14124us; 14125us; 14127us; 14128us; 14129us; 14131us; 14135us; 14136us; 14137us; 14139us; 14140us; 14150us; 14151us; 14154us; 14155us; 14164us; 14165us; 14166us; 14174us; 14178us; 14179us; 14181us; 14182us; 14184us; 14185us; 14192us; 14196us; 14197us; 14199us; 14202us; 14203us; 14205us; 14206us; 14207us; 14213us; 14214us; 14215us; 14216us; 14217us; 14218us; 14225us; 14232us; 14239us; 14241us; 14242us; 14243us; 14245us; 14247us; 14248us; 14249us; 14250us; 14253us; 14254us; 14255us; 14283us; 14285us; 14286us; 14287us; 14289us; 14293us; 14294us; 14296us; 14298us; 14299us; 14300us; 14301us; 14302us; 14303us; 14304us; 14305us; 14306us; 14307us; 14308us; 14309us; 14310us; 14311us; 14312us; 14313us; 14314us; 14315us; 14316us; 14317us; 14318us; 14319us; 14320us; 14321us; 14322us; 14323us; 14325us; 14326us; 14328us; 14329us; 14330us; 14332us; 14333us; 14334us; 14335us; 14336us; 14338us; 14339us; 14344us; 14345us; 14346us; 14347us; 14348us; 14349us; 14350us; 14354us; 14355us; 14356us; 14357us; 14360us; 14361us; 14365us; 14366us; 14368us; 14370us; 14371us; 14372us; 14373us; 14374us; 14375us; 14376us; 14377us; 14378us; 14379us; 14380us; 14381us; 14382us; 14383us; 14384us; 14385us; 14386us; 14387us; 14388us; 14389us; 14390us; 14391us; 14392us; 14393us; 14394us; 14395us; 14396us; 14397us; 14398us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 0us; 2us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 1us; 2us; 3us; 1us; 2us; 3us; 2us; 2us; 3us; 2us; 3us; 2us; 1us; 2us; 2us; 1us; 4us; 1us; 2us; 2us; 1us; 4us; 4us; 1us; 4us; 1us; 1us; 1us; 0us; 3us; 3us; 2us; 1us; 0us; 5us; 4us; 3us; 1us; 1us; 2us; 3us; 1us; 2us; 3us; 1us; 1us; 3us; 3us; 3us; 5us; 5us; 3us; 6us; 1us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 3us; 3us; 0us; 2us; 2us; 3us; 1us; 1us; 5us; 5us; 3us; 3us; 2us; 12us; 0us; 2us; 3us; 5us; 3us; 1us; 0us; 1us; 2us; 5us; 1us; 3us; 3us; 5us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 3us; 2us; 7us; 2us; 1us; 1us; 3us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 0us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 0us; 2us; 3us; 3us; 1us; 3us; 11us; 4us; 4us; 4us; 5us; 5us; 5us; 3us; 3us; 0us; 1us; 3us; 8us; 7us; 2us; 1us; 1us; 3us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 2us; 0us; 2us; 3us; 3us; 1us; 3us; 5us; 5us; 4us; 1us; 2us; 3us; 4us; 5us; 5us; 10us; 3us; 4us; 5us; 8us; 5us; 1us; 2us; 0us; 1us; 1us; 1us; 1us; 1us; 0us; 3us; 0us; 3us; 0us; 3us; 0us; 3us; 5us; 1us; 0us; 2us; 1us; 0us; 2us; 2us; 3us; 3us; 1us; 3us; 2us; 4us; 3us; 1us; 1us; 3us; 3us; 3us; 5us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 3us; 1us; 3us; 3us; 1us; 2us; 5us; 3us; 1us; 1us; 0us; 5us; 1us; 0us; 1us; 0us; 0us; 2us; 3us; 1us; 4us; 3us; 3us; 4us; 3us; 5us; 9us; 4us; 4us; 2us; 3us; 1us; 1us; 3us; 1us; 4us; 6us; 6us; 6us; 1us; 3us; 4us; 2us; 4us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 2us; 2us; 5us; 2us; 2us; 1us; 5us; 1us; 3us; 0us; 2us; 2us; 3us; 1us; 2us; 4us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 8us; 1us; 1us; 0us; 3us; 3us; 2us; 3us; 1us; 4us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 0us; 2us; 2us; 1us; 6us; 6us; 3us; 3us; 1us; 2us; 2us; 0us; 4us; 3us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 2us; 3us; 2us; 1us; 3us; 3us; 2us; 3us; 3us; 2us; 3us; 3us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 4us; 2us; 1us; 2us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 2us; 1us; 0us; 3us; 3us; 1us; 1us; 3us; 2us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; 2us; 3us; 3us; 0us; 2us; 3us; 3us; 3us; 1us; 3us; 1us; 2us; 1us; 3us; 3us; 3us; 3us; 1us; 3us; 2us; 1us; 3us; 5us; 1us; 1us; 3us; 3us; 2us; 2us; 2us; 3us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 4us; 3us; 3us; 2us; 2us; 2us; 1us; 5us; 5us; 5us; 3us; 3us; 5us; 3us; 5us; 5us; 5us; 5us; 5us; 4us; 2us; 2us; 7us; 7us; 7us; 5us; 3us; 4us; 2us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 2us; 2us; 3us; 3us; 1us; 2us; 2us; 1us; 2us; 2us; 4us; 4us; 3us; 2us; 0us; 2us; 2us; 2us; 4us; 4us; 0us; 2us; 4us; 4us; 3us; 3us; 3us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 4us; 4us; 2us; 2us; 1us; 2us; 1us; 2us; 1us; 3us; 3us; 2us; 3us; 3us; 2us; 3us; 1us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 5us; 3us; 3us; 3us; 5us; 7us; 9us; 3us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 0us; 2us; 6us; 1us; 1us; 1us; 5us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 0us; 1us; 1us; 3us; 3us; 5us; 2us; 2us; 4us; 3us; 3us; 3us; 3us; 5us; 6us; 2us; 0us; 0us; 1us; 0us; 4us; 0us; 2us; 3us; 0us; 6us; 5us; 7us; 8us; 5us; 0us; 4us; 3us; 2us; 5us; 4us; 2us; 1us; 0us; 2us; 3us; 3us; 2us; 0us; 2us; 2us; 5us; 1us; 1us; 4us; 4us; 5us; 5us; 4us; 3us; 4us; 5us; 1us; 3us; 1us; 3us; 0us; 2us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 5us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 1us; 3us; 2us; 3us; 1us; 3us; 3us; 1us; 3us; 1us; 1us; 1us; 3us; 1us; 2us; 3us; 2us; 2us; 4us; 1us; 3us; 3us; 2us; 3us; 4us; 5us; 4us; 3us; 0us; 1us; 3us; 4us; 2us; 1us; 1us; 3us; 3us; 1us; 3us; 2us; 3us; 4us; 1us; 2us; 2us; 3us; 6us; 3us; 3us; 1us; 1us; 3us; 1us; 3us; 4us; 1us; 1us; 2us; 1us; 3us; 3us; 2us; 2us; 1us; 2us; 1us; 1us; 3us; 3us; 3us; 1us; 4us; 6us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 1us; 2us; 3us; 1us; 1us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 2us; 2us; 0us; 2us; 0us; 1us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 0us; 1us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 4us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 11us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 15us; 16us; 16us; 17us; 17us; 18us; 19us; 19us; 20us; 20us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 24us; 25us; 25us; 25us; 26us; 26us; 27us; 27us; 27us; 27us; 27us; 28us; 28us; 28us; 28us; 28us; 29us; 29us; 30us; 30us; 30us; 30us; 30us; 30us; 30us; 30us; 31us; 31us; 32us; 32us; 32us; 32us; 32us; 32us; 33us; 33us; 33us; 34us; 34us; 34us; 35us; 36us; 36us; 36us; 36us; 36us; 36us; 36us; 37us; 38us; 38us; 39us; 39us; 39us; 40us; 40us; 41us; 41us; 42us; 43us; 43us; 44us; 44us; 45us; 45us; 45us; 45us; 46us; 47us; 47us; 48us; 48us; 49us; 49us; 50us; 50us; 50us; 51us; 51us; 51us; 51us; 52us; 52us; 52us; 52us; 53us; 53us; 53us; 54us; 54us; 55us; 55us; 55us; 55us; 55us; 55us; 56us; 56us; 56us; 57us; 57us; 57us; 57us; 58us; 58us; 59us; 59us; 59us; 59us; 59us; 59us; 59us; 60us; 61us; 61us; 62us; 62us; 62us; 63us; 63us; 64us; 64us; 64us; 65us; 65us; 65us; 65us; 66us; 66us; 67us; 67us; 67us; 68us; 68us; 68us; 69us; 69us; 69us; 70us; 70us; 71us; 72us; 72us; 73us; 73us; 74us; 74us; 74us; 74us; 74us; 74us; 74us; 74us; 74us; 74us; 75us; 75us; 76us; 76us; 77us; 77us; 77us; 78us; 78us; 79us; 79us; 80us; 80us; 81us; 81us; 82us; 82us; 83us; 83us; 84us; 85us; 85us; 86us; 86us; 87us; 87us; 87us; 88us; 88us; 89us; 89us; 90us; 90us; 91us; 91us; 91us; 91us; 92us; 92us; 92us; 93us; 94us; 94us; 94us; 95us; 95us; 96us; 96us; 96us; 97us; 97us; 98us; 98us; 99us; 100us; 101us; 101us; 101us; 101us; 102us; 103us; 103us; 104us; 104us; 105us; 105us; 106us; 106us; 107us; 107us; 107us; 107us; 107us; 107us; 107us; 107us; 107us; 108us; 108us; 108us; 109us; 110us; 110us; 111us; 111us; 111us; 111us; 112us; 112us; 112us; 113us; 113us; 113us; 114us; 114us; 115us; 115us; 115us; 116us; 116us; 117us; 118us; 119us; 120us; 121us; 122us; 123us; 123us; 124us; 124us; 125us; 126us; 126us; 127us; 128us; 129us; 130us; 130us; 130us; 130us; 131us; 131us; 132us; 133us; 133us; 133us; 134us; 134us; 135us; 135us; 136us; 136us; 136us; 136us; 136us; 137us; 137us; 138us; 139us; 139us; 140us; 140us; 140us; 141us; 141us; 142us; 142us; 142us; 143us; 144us; 144us; 145us; 146us; 146us; 147us; 147us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 148us; 149us; 149us; 150us; 151us; 151us; 151us; 151us; 152us; 152us; 153us; 153us; 153us; 153us; 153us; 154us; 154us; 154us; 154us; 154us; 154us; 155us; 155us; 156us; 156us; 157us; 157us; 157us; 157us; 157us; 158us; 158us; 158us; 159us; 159us; 159us; 159us; 159us; 159us; 159us; 159us; 159us; 159us; 159us; 159us; 159us; 159us; 159us; 159us; 160us; 160us; 161us; 161us; 161us; 161us; 161us; 161us; 161us; 161us; 161us; 162us; 162us; 163us; 163us; 164us; 165us; 165us; 166us; 167us; 167us; 167us; 168us; 168us; 168us; 169us; 169us; 170us; 170us; 171us; 171us; 171us; 171us; 171us; 172us; 172us; 172us; 172us; 172us; 173us; 173us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 174us; 175us; 175us; 176us; 177us; 177us; 177us; 178us; 178us; 178us; 178us; 179us; 180us; 180us; 180us; 180us; 181us; 181us; 182us; 183us; 184us; 184us; 184us; 185us; 185us; 185us; 185us; 185us; 186us; 186us; 187us; 187us; 187us; 187us; 187us; 187us; 187us; 187us; 187us; 187us; 187us; 187us; 188us; 188us; 189us; 189us; 190us; 190us; 190us; 190us; 190us; 190us; 190us; 190us; 190us; 190us; 190us; 190us; 191us; 191us; 191us; 191us; 191us; 191us; 191us; 191us; 191us; 191us; 192us; 192us; 192us; 192us; 193us; 193us; 193us; 193us; 193us; 193us; 193us; 193us; 193us; 194us; 194us; 194us; 194us; 195us; 195us; 195us; 196us; 196us; 196us; 197us; 197us; 197us; 197us; 198us; 198us; 198us; 198us; 198us; 199us; 199us; 200us; 200us; 200us; 201us; 201us; 201us; 202us; 202us; 203us; 203us; 204us; 204us; 204us; 205us; 205us; 205us; 205us; 206us; 206us; 206us; 207us; 208us; 209us; 209us; 210us; 210us; 211us; 211us; 212us; 212us; 212us; 213us; 213us; 213us; 213us; 213us; 214us; 214us; 215us; 215us; 215us; 216us; 216us; 216us; 217us; 217us; 218us; 218us; 218us; 219us; 220us; 220us; 220us; 221us; 222us; 222us; 223us; 223us; 223us; 223us; 223us; 224us; 224us; 224us; 225us; 225us; 226us; 226us; 227us; 227us; 228us; 228us; 229us; 229us; 230us; 230us; 231us; 231us; 231us; 231us; 231us; 231us; 232us; 232us; 233us; 233us; 234us; 234us; 234us; 234us; 235us; 235us; 235us; 236us; 236us; 237us; 237us; 238us; 238us; 239us; 239us; 239us; 239us; 239us; 239us; 239us; 239us; 240us; 240us; 240us; 240us; 241us; 242us; 242us; 243us; 243us; 243us; 244us; 244us; 244us; 244us; 244us; 244us; 244us; 244us; 244us; 244us; 245us; 245us; 246us; 246us; 246us; 247us; 247us; 248us; 248us; 248us; 249us; 249us; 249us; 249us; 250us; 250us; 251us; 251us; 251us; 251us; 252us; 252us; 253us; 254us; 255us; 255us; 255us; 256us; 256us; 256us; 256us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 257us; 258us; 259us; 259us; 260us; 260us; 261us; 261us; 261us; 261us; 262us; 263us; 263us; 263us; 264us; 264us; 265us; 265us; 266us; 266us; 267us; 267us; 268us; 268us; 269us; 269us; 269us; 269us; 270us; 270us; 270us; 271us; 271us; 271us; 271us; 272us; 272us; 273us; 273us; 274us; 274us; 275us; 275us; 276us; 276us; 277us; 277us; 278us; 278us; 279us; 279us; 280us; 280us; 281us; 281us; 282us; 282us; 283us; 283us; 284us; 284us; 285us; 286us; 286us; 287us; 287us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 16387us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 16393us; 16394us; 16395us; 16396us; 65535us; 16397us; 65535us; 16398us; 65535us; 16399us; 65535us; 16400us; 65535us; 16401us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 65535us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 65535us; 16411us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 16417us; 65535us; 65535us; 65535us; 16419us; 65535us; 16421us; 65535us; 16422us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 16425us; 16426us; 65535us; 65535us; 65535us; 16427us; 16428us; 16429us; 65535us; 65535us; 65535us; 16432us; 65535us; 65535us; 16433us; 16435us; 65535us; 65535us; 65535us; 65535us; 16437us; 16440us; 65535us; 65535us; 65535us; 65535us; 16442us; 65535us; 16443us; 65535us; 65535us; 16446us; 16447us; 16448us; 65535us; 65535us; 16449us; 65535us; 16450us; 65535us; 16451us; 65535us; 65535us; 16452us; 65535us; 16453us; 16454us; 65535us; 65535us; 65535us; 16455us; 16456us; 65535us; 65535us; 16457us; 65535us; 65535us; 65535us; 16459us; 65535us; 16460us; 16461us; 16462us; 16463us; 65535us; 65535us; 65535us; 16465us; 16466us; 16467us; 65535us; 16469us; 65535us; 65535us; 65535us; 16471us; 16472us; 16473us; 65535us; 65535us; 65535us; 65535us; 16474us; 16475us; 16476us; 16477us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16479us; 65535us; 65535us; 65535us; 65535us; 16482us; 65535us; 65535us; 65535us; 16483us; 65535us; 65535us; 16484us; 16485us; 65535us; 16488us; 65535us; 65535us; 65535us; 65535us; 16489us; 16490us; 65535us; 16491us; 65535us; 65535us; 16492us; 65535us; 65535us; 65535us; 65535us; 16493us; 16494us; 16495us; 65535us; 16497us; 65535us; 16498us; 65535us; 65535us; 16499us; 65535us; 65535us; 16501us; 16502us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16503us; 65535us; 16504us; 16505us; 16506us; 65535us; 65535us; 16507us; 16508us; 65535us; 65535us; 16509us; 16510us; 65535us; 16511us; 65535us; 65535us; 16512us; 16513us; 65535us; 65535us; 16514us; 16515us; 65535us; 65535us; 16516us; 16517us; 16518us; 65535us; 65535us; 16519us; 65535us; 65535us; 16521us; 16522us; 16523us; 16524us; 16525us; 16526us; 16527us; 65535us; 16529us; 65535us; 16531us; 65535us; 65535us; 16532us; 16533us; 65535us; 65535us; 16535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16536us; 65535us; 65535us; 65535us; 65535us; 65535us; 16539us; 65535us; 16540us; 65535us; 16541us; 65535us; 65535us; 16542us; 65535us; 65535us; 16543us; 65535us; 65535us; 16544us; 65535us; 65535us; 16547us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16548us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16549us; 65535us; 16550us; 16551us; 16552us; 65535us; 65535us; 16553us; 16554us; 65535us; 65535us; 16555us; 16556us; 65535us; 16557us; 65535us; 65535us; 16558us; 16559us; 65535us; 65535us; 16560us; 16561us; 16562us; 65535us; 65535us; 16563us; 65535us; 16564us; 65535us; 16566us; 65535us; 65535us; 16567us; 16568us; 65535us; 65535us; 16570us; 65535us; 65535us; 65535us; 65535us; 16571us; 65535us; 65535us; 65535us; 65535us; 16572us; 16573us; 65535us; 16575us; 65535us; 65535us; 65535us; 65535us; 16576us; 16577us; 65535us; 65535us; 16578us; 65535us; 65535us; 16579us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16580us; 16581us; 65535us; 16582us; 65535us; 16583us; 65535us; 65535us; 65535us; 65535us; 65535us; 16584us; 65535us; 16585us; 16586us; 65535us; 16587us; 16589us; 16590us; 16591us; 16592us; 16593us; 65535us; 65535us; 16595us; 65535us; 65535us; 16597us; 65535us; 65535us; 16599us; 65535us; 65535us; 16601us; 65535us; 65535us; 16602us; 16603us; 65535us; 16605us; 16606us; 65535us; 16608us; 16609us; 65535us; 65535us; 16610us; 16611us; 16612us; 65535us; 65535us; 16613us; 65535us; 65535us; 65535us; 65535us; 16615us; 16616us; 16617us; 16618us; 65535us; 65535us; 16619us; 16620us; 16621us; 65535us; 65535us; 16622us; 65535us; 65535us; 16623us; 16624us; 65535us; 16625us; 65535us; 65535us; 16626us; 16627us; 16628us; 16629us; 16630us; 16631us; 65535us; 65535us; 65535us; 65535us; 16634us; 16635us; 65535us; 65535us; 16636us; 65535us; 65535us; 65535us; 65535us; 16637us; 16638us; 65535us; 16639us; 65535us; 65535us; 65535us; 16640us; 16641us; 16642us; 65535us; 65535us; 65535us; 65535us; 16645us; 16646us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16652us; 16653us; 65535us; 65535us; 65535us; 16654us; 65535us; 65535us; 16655us; 65535us; 16656us; 65535us; 16657us; 16658us; 65535us; 65535us; 16659us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16660us; 65535us; 16661us; 16662us; 65535us; 16663us; 65535us; 65535us; 16664us; 65535us; 16666us; 65535us; 65535us; 16667us; 65535us; 65535us; 65535us; 16669us; 65535us; 65535us; 16670us; 65535us; 65535us; 16671us; 65535us; 65535us; 16672us; 16673us; 65535us; 65535us; 16674us; 65535us; 65535us; 16675us; 65535us; 16676us; 65535us; 65535us; 65535us; 16678us; 65535us; 16679us; 16681us; 65535us; 65535us; 16682us; 65535us; 65535us; 16684us; 16685us; 65535us; 16686us; 65535us; 65535us; 65535us; 65535us; 16687us; 65535us; 16688us; 65535us; 16689us; 16690us; 65535us; 65535us; 65535us; 65535us; 16691us; 65535us; 65535us; 16693us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16697us; 16698us; 65535us; 16699us; 65535us; 65535us; 65535us; 16700us; 65535us; 65535us; 16701us; 16702us; 16703us; 16704us; 16705us; 16706us; 16707us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16708us; 65535us; 65535us; 65535us; 16712us; 65535us; 16713us; 65535us; 65535us; 16715us; 65535us; 65535us; 65535us; 65535us; 16717us; 16718us; 16719us; 65535us; 65535us; 16720us; 65535us; 65535us; 16723us; 65535us; 65535us; 16724us; 65535us; 16726us; 65535us; 16727us; 16728us; 65535us; 65535us; 65535us; 65535us; 65535us; 16729us; 16730us; 65535us; 65535us; 16731us; 16732us; 16733us; 65535us; 65535us; 16735us; 65535us; 65535us; 65535us; 16737us; 65535us; 16738us; 16739us; 65535us; 65535us; 16740us; 16741us; 16742us; 16743us; 16744us; 16745us; 16746us; 16747us; 16748us; 16749us; 16750us; 16751us; 16752us; 16753us; 16754us; 65535us; 16755us; 16756us; 16757us; 16758us; 65535us; 65535us; 16760us; 65535us; 16762us; 65535us; 16763us; 65535us; 65535us; 65535us; 16764us; 65535us; 65535us; 16767us; 65535us; 65535us; 16768us; 16769us; 16770us; 65535us; 16771us; 16772us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16773us; 65535us; 65535us; 65535us; 65535us; 16778us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16784us; 65535us; 16785us; 65535us; 65535us; 16787us; 65535us; 16788us; 65535us; 16789us; 16791us; 65535us; 16792us; 65535us; 65535us; 16793us; 65535us; 65535us; 16794us; 65535us; 65535us; 16795us; 16796us; 65535us; 65535us; 16797us; 16798us; 16799us; 16800us; 16801us; 16802us; 65535us; 65535us; 16803us; 16804us; 65535us; 16805us; 16806us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16809us; 65535us; 65535us; 65535us; 65535us; 16813us; 65535us; 65535us; 65535us; 16816us; 16817us; 65535us; 65535us; 65535us; 65535us; 16822us; 65535us; 16823us; 65535us; 16824us; 65535us; 65535us; 16827us; 65535us; 16828us; 65535us; 65535us; 16829us; 16830us; 16831us; 65535us; 65535us; 16832us; 65535us; 65535us; 16834us; 65535us; 65535us; 16836us; 65535us; 16837us; 65535us; 16838us; 65535us; 16839us; 65535us; 65535us; 65535us; 65535us; 16841us; 65535us; 16844us; 65535us; 65535us; 65535us; 16845us; 16846us; 65535us; 16847us; 65535us; 65535us; 16848us; 16849us; 16850us; 65535us; 16851us; 16852us; 65535us; 16853us; 16854us; 16855us; 16856us; 16857us; 65535us; 65535us; 16858us; 16859us; 65535us; 65535us; 16860us; 16861us; 65535us; 16862us; 65535us; 65535us; 16863us; 16864us; 16865us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16869us; 16870us; 65535us; 16871us; 16872us; 65535us; 16873us; 65535us; 65535us; 65535us; 65535us; 16874us; 16875us; 65535us; 16876us; 65535us; 65535us; 65535us; 16877us; 16878us; 65535us; 16879us; 65535us; 65535us; 65535us; 16880us; 65535us; 16881us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16884us; 65535us; 65535us; 65535us; 65535us; 65535us; 16885us; 16886us; 65535us; 65535us; 65535us; 65535us; 16887us; 65535us; 65535us; 16888us; 65535us; 16889us; 65535us; 16890us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16892us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16914us; 65535us; 65535us; 16915us; 65535us; 65535us; 16917us; 65535us; 65535us; 16918us; 16919us; 16920us; 65535us; 16921us; 16922us; 16923us; 16924us; 65535us; 65535us; 65535us; 16926us; 16927us; 16928us; 65535us; 65535us; 16931us; 65535us; 16932us; 65535us; 65535us; 65535us; 65535us; 16934us; 16935us; 65535us; 65535us; 65535us; 65535us; 16938us; 16939us; 65535us; 16940us; 65535us; 65535us; 65535us; 65535us; 16943us; 65535us; 65535us; 16944us; 65535us; 65535us; 16945us; 65535us; 65535us; 16946us; 65535us; 65535us; 16947us; 65535us; 65535us; 16948us; 65535us; 65535us; 16949us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16950us; 65535us; 16951us; 65535us; 16952us; 65535us; 16953us; 65535us; 65535us; 16955us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16960us; 65535us; 65535us; 65535us; 16962us; 65535us; 65535us; 16963us; 65535us; 65535us; 16964us; 65535us; 16965us; 16966us; 65535us; 65535us; 16967us; 16968us; 65535us; 16969us; 16970us; 16971us; 16972us; 16973us; 65535us; 65535us; 65535us; 65535us; 16974us; 65535us; 16975us; 65535us; 65535us; 16976us; 65535us; 16977us; 65535us; 65535us; 16978us; 65535us; 65535us; 16979us; 65535us; 65535us; 16980us; 65535us; 65535us; 16984us; 16985us; 16986us; 16987us; 16988us; 16989us; 16990us; 16991us; 16992us; 16993us; 65535us; 65535us; 16994us; 16995us; 65535us; 16996us; 16997us; 65535us; 65535us; 65535us; 16998us; 16999us; 65535us; 17000us; 65535us; 65535us; 17001us; 17002us; 65535us; 17003us; 65535us; 65535us; 65535us; 65535us; 17004us; 17005us; 17006us; 17007us; 65535us; 17009us; 65535us; 65535us; 65535us; 65535us; 65535us; 17010us; 17011us; 17012us; 17013us; 65535us; 65535us; 65535us; 17014us; 65535us; 65535us; 17015us; 17016us; 65535us; 17017us; 17018us; 17019us; 17020us; 17021us; 17023us; 17024us; 65535us; 65535us; 65535us; 65535us; 17028us; 65535us; 17029us; 65535us; 65535us; 65535us; 17030us; 65535us; 65535us; 17031us; 65535us; 17033us; 17034us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 17036us; 17037us; 17040us; 65535us; 65535us; 65535us; 17042us; 65535us; 17044us; 65535us; 17045us; 65535us; 65535us; 65535us; 65535us; 65535us; 17047us; 65535us; 65535us; 17048us; 65535us; 65535us; 65535us; 65535us; 17049us; 65535us; 65535us; 65535us; 65535us; 65535us; 17050us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 17053us; 65535us; 17054us; 17056us; 17059us; 65535us; 17061us; 65535us; 65535us; 17062us; 65535us; 17063us; 65535us; 17064us; 65535us; 17066us; 65535us; 17067us; 65535us; 65535us; 65535us; 65535us; 17068us; 17069us; 17070us; 65535us; 65535us; 65535us; 17071us; 17072us; 65535us; 65535us; 65535us; 65535us; 17073us; 65535us; 17074us; 17075us; 65535us; 65535us; 17076us; 65535us; 65535us; 65535us; 17077us; 65535us; 17078us; 65535us; 65535us; 65535us; 65535us; 65535us; 17084us; 65535us; 65535us; 17085us; 65535us; 65535us; 17087us; 65535us; 65535us; 17089us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 17097us; 17098us; 65535us; 65535us; 17099us; 65535us; 65535us; 17101us; 65535us; 17102us; 65535us; 17103us; 65535us; 65535us; 17105us; 65535us; 17106us; 65535us; 65535us; 17108us; 65535us; 17111us; 65535us; 65535us; 65535us; 65535us; 17112us; 17114us; 65535us; 65535us; 17115us; 17116us; 17117us; 65535us; 65535us; 65535us; 17118us; 17119us; 65535us; 17120us; 65535us; 65535us; 17121us; 65535us; 17122us; 65535us; 17123us; 65535us; 17124us; 65535us; 17125us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 17127us; 65535us; 65535us; 17130us; 65535us; 17131us; 65535us; 65535us; 17133us; 17134us; 65535us; 65535us; 17135us; 17136us; 17137us; 65535us; 17138us; 17139us; 65535us; 65535us; 17141us; 17142us; 65535us; 17143us; 65535us; 17144us; 65535us; 17145us; 65535us; 65535us; 17146us; 65535us; 65535us; 17147us; 65535us; 17148us; 65535us; 17150us; 65535us; 65535us; 17151us; 65535us; 65535us; 17153us; 65535us; 17154us; 17155us; 65535us; 17157us; 17158us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 17162us; 17163us; 65535us; 65535us; 17164us; 17165us; 17166us; 65535us; 17167us; 17168us; 65535us; 65535us; 17169us; 17170us; 65535us; 65535us; 17171us; 65535us; 65535us; 17172us; 17173us; 17174us; 17175us; 17176us; 17177us; 17178us; 17179us; 17180us; 17181us; 17182us; 17183us; 17184us; 17185us; 17186us; 17187us; 17188us; 17189us; 17190us; 17191us; 17192us; 17193us; 17194us; 17195us; 17196us; 65535us; 17198us; 65535us; 17199us; 17200us; 65535us; 17201us; 17202us; 17203us; 17204us; 65535us; 17206us; 65535us; 17207us; 17208us; 17209us; 17210us; 17211us; 17212us; 65535us; 17214us; 17215us; 17216us; 65535us; 17218us; 65535us; 17221us; 65535us; 65535us; 17225us; 17226us; 17227us; 17228us; 17229us; 17230us; 17231us; 17232us; 17234us; 17236us; 17238us; 17240us; 17242us; 17244us; 17246us; 17248us; 17250us; 17251us; 17252us; 17253us; 17254us; 17255us; 17256us; 17257us; 17258us; 17259us; 17260us; 17261us; 17263us; |]
let _fsyacc_reductions ()  =    [| 
# 2427 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ParsedSigFile)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Internal.Utilities.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startsignatureFile));
# 2436 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ParsedImplFile)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Internal.Utilities.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startimplementationFile));
# 2445 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.interaction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Internal.Utilities.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startinteraction));
# 2454 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveItemsTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 426 "..\pars.mly"
                      IDefns (_1,lhs(parseState)) 
                   )
# 426 "..\pars.mly"
                 : Ast.interaction));
# 2465 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 428 "..\pars.mly"
                      warning(Error("A semicolon is not expected at this point",rhs parseState 1));
                            IDefns ([],lhs(parseState)) 
                   )
# 428 "..\pars.mly"
                 : Ast.interaction));
# 2476 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 431 "..\pars.mly"
                      IDefns ([],lhs(parseState)) 
                   )
# 431 "..\pars.mly"
                 : Ast.interaction));
# 2486 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'hashDirectiveArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 435 "..\pars.mly"
                      HashDirective (_2,_3,lhs(parseState)) 
                   )
# 435 "..\pars.mly"
                 : 'hashDirective));
# 2498 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 439 "..\pars.mly"
                      _1 
                   )
# 439 "..\pars.mly"
                 : 'hashDirectiveArg));
# 2509 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 443 "..\pars.mly"
                      [] 
                   )
# 443 "..\pars.mly"
                 : 'hashDirectiveArgs));
# 2519 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hashDirectiveArgs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'hashDirectiveArg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 445 "..\pars.mly"
                      _1 @ [_2] 
                   )
# 445 "..\pars.mly"
                 : 'hashDirectiveArgs));
# 2531 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 448 "..\pars.mly"
                   )
# 448 "..\pars.mly"
                 : 'interactiveTerminator));
# 2540 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.lexcont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 449 "..\pars.mly"
                   )
# 449 "..\pars.mly"
                 : 'interactiveTerminator));
# 2550 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 461 "..\pars.mly"
                      [] 
                   )
# 461 "..\pars.mly"
                 : 'interactiveItemsTerminator));
# 2561 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveModuleDefns)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 462 "..\pars.mly"
                      _1 
                   )
# 462 "..\pars.mly"
                 : 'interactiveItemsTerminator));
# 2573 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 463 "..\pars.mly"
                      _1 
                   )
# 463 "..\pars.mly"
                 : 'interactiveItemsTerminator));
# 2585 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveHash)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 464 "..\pars.mly"
                      _1 
                   )
# 464 "..\pars.mly"
                 : 'interactiveItemsTerminator));
# 2597 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveModuleDefns)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'itop_seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveItemsTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 465 "..\pars.mly"
                      _1 @ _3 
                   )
# 465 "..\pars.mly"
                 : 'interactiveItemsTerminator));
# 2610 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'itop_seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveItemsTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 466 "..\pars.mly"
                      _1 @ _3 
                   )
# 466 "..\pars.mly"
                 : 'interactiveItemsTerminator));
# 2623 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveHash)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'itop_seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveItemsTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 467 "..\pars.mly"
                      _1 @ _3 
                   )
# 467 "..\pars.mly"
                 : 'interactiveItemsTerminator));
# 2636 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 471 "..\pars.mly"
                      _1 
                   )
# 471 "..\pars.mly"
                 : 'interactiveModuleDefns));
# 2647 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefn)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'interactiveModuleDefns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 472 "..\pars.mly"
                      _1 @ _2 
                   )
# 472 "..\pars.mly"
                 : 'interactiveModuleDefns));
# 2659 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 476 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations are not permitted here",rhs parseState 3));
                             let attrDecls = if nonNil _1 then [ Def_attributes (_1,rhs parseState 1) ] else [] in 
                             attrDecls @ [ mk_Def_expr(_3,rhs parseState 3)] 
                   )
# 476 "..\pars.mly"
                 : 'interactiveExpr));
# 2674 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hashDirective)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 481 "..\pars.mly"
                      [Def_hash(_1,rhs parseState 1)] 
                   )
# 481 "..\pars.mly"
                 : 'interactiveHash));
# 2685 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceSpecs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.lexcont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 487 "..\pars.mly"
                      checkEndOfFileError _2; _1 
                   )
# 487 "..\pars.mly"
                 : Ast.ParsedSigFile));
# 2697 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceSpecs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.lexcont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 489 "..\pars.mly"
                      _1 
                   )
# 489 "..\pars.mly"
                 : Ast.ParsedSigFile));
# 2709 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.lexcont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 495 "..\pars.mly"
                      let emptySigFileFrag = AnonTopModuleSpec([],rhs parseState 1) in 
                            ParsedSigFile([],[emptySigFileFrag]) 
                   )
# 495 "..\pars.mly"
                 : Ast.ParsedSigFile));
# 2721 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceImpls)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.lexcont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 500 "..\pars.mly"
                      checkEndOfFileError _2; _1 
                   )
# 500 "..\pars.mly"
                 : Ast.ParsedImplFile));
# 2733 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceImpls)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.lexcont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 502 "..\pars.mly"
                      _1 
                   )
# 502 "..\pars.mly"
                 : Ast.ParsedImplFile));
# 2745 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.lexcont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 508 "..\pars.mly"
                      let emptyImplFileFrag = AnonTopModuleImpl([],rhs parseState 1) in 
                            ParsedImplFile([],[emptyImplFileFrag]) 
                   )
# 508 "..\pars.mly"
                 : Ast.ParsedImplFile));
# 2757 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 512 "..\pars.mly"
                      _3,true,grabXmlDoc(parseState,1),_2 
                   )
# 512 "..\pars.mly"
                 : 'moduleIntro));
# 2769 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 515 "..\pars.mly"
                      _2,false,grabXmlDoc(parseState,1)  
                   )
# 515 "..\pars.mly"
                 : 'namespaceIntro));
# 2780 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileModuleSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 519 "..\pars.mly"
                      ParsedSigFile([],[ (_1 ([],emptyPreXmlDoc)) ]) 
                   )
# 519 "..\pars.mly"
                 : 'fileNamespaceSpecs));
# 2791 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileModuleSpec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceSpecList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 521 "..\pars.mly"
                      (* If there are namespaces, the first fileModuleImpl may only contain # directives *)
                             let decls = 
                                 match (_1 ([],emptyPreXmlDoc)) with 
                                 | AnonTopModuleSpec(decls,m) -> decls  
                                 | AnonNamespaceFragmentSpec(_,_, decls, _,_,_) -> decls 
                                 | NamedTopModuleSpec(ModuleOrNamespaceSpec(_,_,_,_,_,_,m)) ->
                                     raiseParseErrorAt m "only '#' compiler directives may occur prior to the first 'namespace' declaration" in
                             let decls = 
                                 decls |> List.collect (function 
                                     | (Spec_hash (hd,_)) -> [hd]
                                     | d ->  
                                          reportParseErrorAt (range_of_synspec d) "only '#' compiler directives may occur prior to the first 'namespace' declaration";
                                          []) in
                             ParsedSigFile(decls, _2) 
                   )
# 521 "..\pars.mly"
                 : 'fileNamespaceSpecs));
# 2816 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceSpec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceSpecList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 537 "..\pars.mly"
                      _1 :: _2 
                   )
# 537 "..\pars.mly"
                 : 'fileNamespaceSpecList));
# 2828 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 538 "..\pars.mly"
                      [_1] 
                   )
# 538 "..\pars.mly"
                 : 'fileNamespaceSpecList));
# 2839 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'namespaceIntro)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'deprecated_opt_equals)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileModuleSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 542 "..\pars.mly"
                      let path,_,xml = _2 in (_4 (path,xml)) 
                   )
# 542 "..\pars.mly"
                 : 'fileNamespaceSpec));
# 2853 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileModuleImpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 546 "..\pars.mly"
                      ParsedImplFile([], [ (_1 ([],emptyPreXmlDoc)) ]) 
                   )
# 546 "..\pars.mly"
                 : 'fileNamespaceImpls));
# 2864 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileModuleImpl)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceImplList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 548 "..\pars.mly"
                      (* If there are namespaces, the first fileModuleImpl may only contain # directives *)
                             let decls = 
                                 match (_1 ([],emptyPreXmlDoc)) with 
                                 | AnonTopModuleImpl(decls,m) -> decls  
                                 | AnonNamespaceFragmentImpl(_,_, decls, _,_,_) -> decls 
                                 | NamedTopModuleImpl(ModuleOrNamespaceImpl(_,_,_,_,_,_,m)) ->
                                     raiseParseErrorAt m "only '#' compiler directives may occur prior to the first 'namespace' declaration" in
                             let decls = 
                                 decls |> List.collect (function 
                                     | (Def_hash (hd,_)) -> [hd]
                                     | d ->  
                                          reportParseErrorAt (range_of_syndecl d) "only '#' compiler directives may occur prior to the first 'namespace' declaration";
                                          []) in
                             ParsedImplFile(decls, _2) 
                   )
# 548 "..\pars.mly"
                 : 'fileNamespaceImpls));
# 2889 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceImpl)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceImplList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 565 "..\pars.mly"
                      _1 :: _2 
                   )
# 565 "..\pars.mly"
                 : 'fileNamespaceImplList));
# 2901 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileNamespaceImpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 566 "..\pars.mly"
                      [_1] 
                   )
# 566 "..\pars.mly"
                 : 'fileNamespaceImplList));
# 2912 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'namespaceIntro)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'deprecated_opt_equals)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'fileModuleImpl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 570 "..\pars.mly"
                      let path,_,xml = _2 in (_4 (path,xml)) 
                   )
# 570 "..\pars.mly"
                 : 'fileNamespaceImpl));
# 2926 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleIntro)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpfnsPossiblyEmpty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 574 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                           let m = (rhs2 parseState 3 4) in
                           (fun (path,_) -> 
                             let path2,_,xml,vis = _3 in 
                             let lid = path@path2 in 
                             NamedTopModuleSpec(ModuleOrNamespaceSpec(lid,true, _4, xml,_1,vis,m)))  
                   )
# 574 "..\pars.mly"
                 : 'fileModuleSpec));
# 2945 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpfnsPossiblyEmpty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 581 "..\pars.mly"
                      let m = (rhs parseState 1) in 
                           (fun (path,xml) -> 
                             match path with 
                             | [] -> AnonTopModuleSpec(_1, m)  
                             | _ -> AnonNamespaceFragmentSpec(path,false, _1, xml,[],m))  
                   )
# 581 "..\pars.mly"
                 : 'fileModuleSpec));
# 2960 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleIntro)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnsOrExprPossiblyEmpty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 589 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                           let m = (rhs2 parseState 3 4) in 
                           (fun (path,_) -> 
                             let path2,isModule,xml,vis = _3 in 
                             let lid = path@path2 in 
                             NamedTopModuleImpl(ModuleOrNamespaceImpl(lid,isModule, _4, xml,_1,vis,m))) 
                   )
# 589 "..\pars.mly"
                 : 'fileModuleImpl));
# 2979 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnsOrExprPossiblyEmpty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 596 "..\pars.mly"
                      let m = (rhs parseState 1) in 
                           (fun (path,xml) -> 
                             match path with 
                             | [] -> AnonTopModuleImpl(_1,m)  
                             | _ -> AnonNamespaceFragmentImpl(path,false, _1, xml,[],m)) 
                   )
# 596 "..\pars.mly"
                 : 'fileModuleImpl));
# 2994 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpfns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 604 "..\pars.mly"
                      _1 
                   )
# 604 "..\pars.mly"
                 : 'moduleSpfnsPossiblyEmpty));
# 3005 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 606 "..\pars.mly"
                      [] 
                   )
# 606 "..\pars.mly"
                 : 'moduleSpfnsPossiblyEmpty));
# 3015 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 608 "..\pars.mly"
                      [] 
                   )
# 608 "..\pars.mly"
                 : 'moduleSpfnsPossiblyEmpty));
# 3025 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpfn)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_top_seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpfns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 612 "..\pars.mly"
                      _1 :: _3 
                   )
# 612 "..\pars.mly"
                 : 'moduleSpfns));
# 3038 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpfns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 614 "..\pars.mly"
                      (* silent recovery *) _3 
                   )
# 614 "..\pars.mly"
                 : 'moduleSpfns));
# 3050 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpfn)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_top_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 616 "..\pars.mly"
                      [_1] 
                   )
# 616 "..\pars.mly"
                 : 'moduleSpfns));
# 3062 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnsOrExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 621 "..\pars.mly"
                      _1 
                   )
# 621 "..\pars.mly"
                 : 'moduleDefnsOrExprPossiblyEmpty));
# 3073 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 623 "..\pars.mly"
                      [] 
                   )
# 623 "..\pars.mly"
                 : 'moduleDefnsOrExprPossiblyEmpty));
# 3083 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_seps)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnsOrExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 628 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations are not permitted here",rhs parseState 3));
                             let attrDecls = if nonNil _1 then [ Def_attributes (_1,rhs parseState 1) ] else [] in 
                             attrDecls @ mk_Def_expr (_3,rhs parseState 3) :: _5 
                   )
# 628 "..\pars.mly"
                 : 'moduleDefnsOrExpr));
# 3100 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 632 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations are not permitted here",rhs parseState 3));
                             let attrDecls = if nonNil _1 then [ Def_attributes (_1,rhs parseState 1) ] else [] in 
                             attrDecls @ [ mk_Def_expr(_3,rhs parseState 3) ] 
                   )
# 632 "..\pars.mly"
                 : 'moduleDefnsOrExpr));
# 3116 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 636 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations are not permitted here",rhs parseState 3));
                             let attrDecls = if nonNil _1 then [ Def_attributes (_1,rhs parseState 1) ] else [] in 
                             attrDecls @ [ mk_Def_expr(_3,rhs parseState 3) ] 
                   )
# 636 "..\pars.mly"
                 : 'moduleDefnsOrExpr));
# 3131 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 640 "..\pars.mly"
                      _1 
                   )
# 640 "..\pars.mly"
                 : 'moduleDefnsOrExpr));
# 3142 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 642 "..\pars.mly"
                      [] 
                   )
# 642 "..\pars.mly"
                 : 'moduleDefnsOrExpr));
# 3152 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnOrDirective)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 646 "..\pars.mly"
                       _1 @ _2 
                   )
# 646 "..\pars.mly"
                 : 'moduleDefns));
# 3164 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnOrDirective)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnsOrExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 648 "..\pars.mly"
                       _1 @ _3 
                   )
# 648 "..\pars.mly"
                 : 'moduleDefns));
# 3177 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnOrDirective)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 650 "..\pars.mly"
                      _1 
                   )
# 650 "..\pars.mly"
                 : 'moduleDefns));
# 3188 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnOrDirective)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 652 "..\pars.mly"
                      _1 
                   )
# 652 "..\pars.mly"
                 : 'moduleDefns));
# 3200 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnsOrExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 654 "..\pars.mly"
                       _3 
                   )
# 654 "..\pars.mly"
                 : 'moduleDefns));
# 3212 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 658 "..\pars.mly"
                       _1  
                   )
# 658 "..\pars.mly"
                 : 'moduleDefnOrDirective));
# 3223 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hashDirective)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 660 "..\pars.mly"
                      [ Def_hash (_1,rhs2 parseState 1 1) ] 
                   )
# 660 "..\pars.mly"
                 : 'moduleDefnOrDirective));
# 3234 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'defnBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 669 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             new_arg_uniq_ref := 0;
                             mkDefnBindings (rhs parseState 3,_3,_1,_2,rhs parseState 3)  
                   )
# 669 "..\pars.mly"
                 : 'moduleDefn));
# 3249 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteLetBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 674 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             new_arg_uniq_ref := 0;
                             mkDefnBindings (rhs parseState 3,_3,_1,_2,rhs parseState 3)  
                   )
# 674 "..\pars.mly"
                 : 'moduleDefn));
# 3264 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'doBinding)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 679 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             let letm = rhs parseState 3 in 
                             mkDefnBindings (letm,_3,_1,_2,rhs parseState 3) 
                   )
# 679 "..\pars.mly"
                 : 'moduleDefn));
# 3279 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefn)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefnList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 684 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             let      (TyconDefn(ComponentInfo(cas   ,kind     ,a,cs,b,c,d,d2,d3),e,f,g)) = _4 in
                             let tc = (TyconDefn(ComponentInfo(_1@cas,TMK_Tycon,a,cs,b,c,d,d2,d3),e,f,g)) in
                             [ Def_tycons(tc :: _5,rhs2 parseState 3 5) ] 
                   )
# 684 "..\pars.mly"
                 : 'moduleDefn));
# 3296 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeNameInfo)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefnAugmentation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 690 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             if nonNil _1 then warning(Error("Attributes on augmentations are ignored, they must be placed on the original declaration",rhs parseState 1));
                             [ Def_partial_tycon(_4,_5,rhs2 parseState 3 5) ] 
                   )
# 690 "..\pars.mly"
                 : 'moduleDefn));
# 3312 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exconDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 695 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             let (ExconDefn(ExconCore(cas,a,b,c,d,d2),e,f)) = _3 in 
                             let ec = (ExconDefn(ExconCore(_1@cas,a,b,c,d,d2),e,f)) in 
                             [ Def_exn(ec, rhs2 parseState 3 3) ] 
                   )
# 695 "..\pars.mly"
                 : 'moduleDefn));
# 3328 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleIntro)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_signature)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'namedModuleDefnBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 702 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             let attribs,(path,isModule,xml,vis),mty = _1,_3,_4 in 
                             if not isModule          then raiseParseErrorAt (rhs parseState 3) "namespaces must be declared at the head of a file";
                             match _6 with 
                             | Choice1Of2 eqn -> 
                                 if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                                 if isSome mty            then raiseParseErrorAt (rhs parseState 3) "a module abbreviation may not be given a constraint";
                                 if List.length path <> 1 then raiseParseErrorAt (rhs parseState 3) "a module abbreviation must be a simple name, not a path";
                                 if List.length _1 <> 0   then raiseParseErrorAt (rhs parseState 1) "ignorning attributes on module abbreviation";
                                 if isSome vis            then raiseParseErrorAt (rhs parseState 1) "ignorning accessibility attribute on module abbreviation. Module abbreviations are always private";
                                 [ Def_module_abbrev(List.hd path,eqn,rhs2 parseState 3 6) ]
                             | Choice2Of2 def -> 
                                 if List.length path <> 1 then raiseParseErrorAt (rhs parseState 3) "a module definition must be a simple name, not a path";
                                 let info = ComponentInfo(attribs,TMK_Module,[],[],path,xml,false,vis,rhs parseState 3) in
                                 [ Def_module(info,def,mty,rhs2 parseState 3 6) ] 
                   )
# 702 "..\pars.mly"
                 : 'moduleDefn));
# 3357 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'openDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 719 "..\pars.mly"
                      [Def_open(_1,rhs parseState 1)] 
                   )
# 719 "..\pars.mly"
                 : 'moduleDefn));
# 3368 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 725 "..\pars.mly"
                      _2 
                   )
# 725 "..\pars.mly"
                 : 'namedModuleAbbrevBlock));
# 3379 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 727 "..\pars.mly"
                      _1 
                   )
# 727 "..\pars.mly"
                 : 'namedModuleAbbrevBlock));
# 3390 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'wrappedNamedModuleDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 731 "..\pars.mly"
                      
                              Choice2Of2 _2 
                            
                   )
# 731 "..\pars.mly"
                 : 'namedModuleDefnBlock));
# 3403 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnsOrExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 735 "..\pars.mly"
                      // BUG 2644 FSharp 1.0: 
                              // There is an ambiguity here 
                              // In particular, consider the following two:
                              // module M2 = 
                              //    System.DateTime.Now
                              // module M2 = 
                              //    Microsoft.FSharp.Core.List
                              // The second is a module abbreviation , the first a module containing a single expression.
                              // This is a bit unfortunate. For F# v1 the resolution is in favour of 
                              // the module abbreviation, i.e. anything of the form 
                              //    module M2 = ID.ID.ID.ID
                              // will be taken as a module abbreviation, regardles of the identifiers themselves.
                              // In a later version (Dev11) we could actually try resolving the names 
                              // to both expressions and module identifiers and base the resolution of that semantic lookup
                              //
                              // This is similar to the ambiguitty between 
                              //    type X = int
                              // and 
                              //    type X = OneValue
                              // However in that case we do use type name lookup to make the resolution.
                              match _2 with 
                              | [ Def_expr (_,Expr_lid_or_id_get(false,path,_),_) ] -> 
                                  Choice1Of2  path
                              | _ -> 
                                  Choice2Of2 _2 
                            
                   )
# 735 "..\pars.mly"
                 : 'namedModuleDefnBlock));
# 3439 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnsOrExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 764 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unclosed block in #light syntax";   
                              Choice2Of2 _2 
                            
                   )
# 764 "..\pars.mly"
                 : 'namedModuleDefnBlock));
# 3453 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 768 "..\pars.mly"
                      
                              Choice2Of2 [] 
                            
                   )
# 768 "..\pars.mly"
                 : 'namedModuleDefnBlock));
# 3465 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'wrappedNamedModuleDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 772 "..\pars.mly"
                              Choice2Of2 _1 
                             
                   )
# 772 "..\pars.mly"
                 : 'namedModuleDefnBlock));
# 3477 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 776 "..\pars.mly"
                              Choice1Of2 _1 
                             
                   )
# 776 "..\pars.mly"
                 : 'namedModuleDefnBlock));
# 3489 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'structOrBegin)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnsOrExprPossiblyEmpty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 782 "..\pars.mly"
                      _2 
                   )
# 782 "..\pars.mly"
                 : 'wrappedNamedModuleDefn));
# 3501 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'structOrBegin)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleDefnsOrExprPossiblyEmpty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 784 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched 'begin' or 'struct'";  
                              _2 
                   )
# 784 "..\pars.mly"
                 : 'wrappedNamedModuleDefn));
# 3515 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'structOrBegin)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 787 "..\pars.mly"
                      [] 
                   )
# 787 "..\pars.mly"
                 : 'wrappedNamedModuleDefn));
# 3526 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 791 "..\pars.mly"
                      None 
                   )
# 791 "..\pars.mly"
                 : 'opt_signature));
# 3536 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpecBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 793 "..\pars.mly"
                      deprecatedWithError "Signature types must be given in a .fsi or .mli file" (lhs(parseState));
                              Some(Sign_explicit(_2)) 
                   )
# 793 "..\pars.mly"
                 : 'opt_signature));
# 3548 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 796 "..\pars.mly"
                      deprecatedWithError "Signature types must be given in a .fsi or .mli file" (lhs(parseState));
                              Some(Sign_named(_2)) 
                   )
# 796 "..\pars.mly"
                 : 'opt_signature));
# 3560 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnBlock)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl_end)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 801 "..\pars.mly"
                      _2 
                   )
# 801 "..\pars.mly"
                 : 'tyconDefnAugmentation));
# 3572 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hashDirective)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 806 "..\pars.mly"
                      Spec_hash (_1,rhs2 parseState 1 1)  
                   )
# 806 "..\pars.mly"
                 : 'moduleSpfn));
# 3583 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'valSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 808 "..\pars.mly"
                      _1 
                   )
# 808 "..\pars.mly"
                 : 'moduleSpfn));
# 3594 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleIntro)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'colonOrEquals)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'namedModuleAbbrevBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 811 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             let path,isModule,xml,vis = _3 in 
                             if not isModule          then raiseParseErrorAt (rhs parseState 3) "namespaces must be declared at the head of a file";
                             if List.length path <> 1 then raiseParseErrorAt (rhs parseState 3) "a module abbreviation must be a simple name, not a path";
                             if List.length _1 <> 0   then raiseParseErrorAt (rhs parseState 1) "ignorning attributes on module abbreviation";
                             if isSome(vis)           then raiseParseErrorAt (rhs parseState 1) "ignorning visibility attribute on module abbreviation. Module abbreviations are always private";
                             Spec_module_abbrev(List.hd path,_5,rhs2 parseState 3 5) 
                   )
# 811 "..\pars.mly"
                 : 'moduleSpfn));
# 3615 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleIntro)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'colonOrEquals)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpecBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 820 "..\pars.mly"
                      let path,isModule,xml,vis = _3 in 
                             if not isModule          then raiseParseErrorAt (rhs parseState 3) "namespaces must be declared at the head of a file";
                             if List.length path <> 1 then raiseParseErrorAt (rhs parseState 3) "a module moduleDefn must be a simple name, not a path";
                             let info = ComponentInfo(_1,TMK_Module,[],[],path,xml,false,vis,rhs parseState 3) in
                             if isSome(_2) then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             Spec_module(info,_5,rhs2 parseState 3 5) 
                   )
# 820 "..\pars.mly"
                 : 'moduleSpfn));
# 3635 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynTyconSpfn list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 828 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             let (TyconSpfn(ComponentInfo(cas,k,a,cs,b,c,d,d2,d3),e,f,g)),rest = 
                                match _3 with
                                | [] -> raiseParseErrorAt (rhs parseState 3) "Unexpected empty type moduleDefn list"
                                | h::t -> h,t in 
                             let tc = (TyconSpfn(ComponentInfo(_1@cas,k,a,cs,b,c,d,d2,d3),e,f,g))in 
                             Spec_tycon (tc::rest,rhs parseState 3) 
                   )
# 828 "..\pars.mly"
                 : 'moduleSpfn));
# 3654 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exconSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 837 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             let (ExconSpfn(ExconCore(cas,a,b,c,d,d2),e,f)) = _3 in 
                             let ec = (ExconSpfn(ExconCore(_1@cas,a,b,c,d,d2),e,f)) in 
                             Spec_exn(ec, rhs parseState 3) 
                   )
# 837 "..\pars.mly"
                 : 'moduleSpfn));
# 3670 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 842 "..\pars.mly"
                      Spec_open (_2, rhs2 parseState 1 2) 
                   )
# 842 "..\pars.mly"
                 : 'moduleSpfn));
# 3681 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inline)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_mutable)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'nameop)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_explicitValTyparDecls)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'topTypeWithTypeConstraints)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_literalValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 846 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             (let attr1,attr2,inlineFlag,mutableFlag,vis2,id,doc,explicitValTyparDecls,(ty,arity),konst = (_1),(_4),(_5),(_6),(_7),(_8),grabXmlDoc(parseState,3),(_9),(_11),(_12) in 
                             if nonNil attr2 then errorR(Deprecated("Attributes should be placed before 'val'",rhs parseState 4));
                             let m = rhs2 parseState 3 11 in 
                             let valSpfn = ValSpfn((attr1@attr2),id,explicitValTyparDecls,ty,arity,inlineFlag,mutableFlag,doc, vis2,konst,m) in 
                             Spec_val(valSpfn,m))
                           
                   )
# 846 "..\pars.mly"
                 : 'valSpfn));
# 3707 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 855 "..\pars.mly"
                      None 
                   )
# 855 "..\pars.mly"
                 : 'opt_literalValue));
# 3717 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 856 "..\pars.mly"
                      Some(_2) 
                   )
# 856 "..\pars.mly"
                 : 'opt_literalValue));
# 3728 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpfns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 860 "..\pars.mly"
                      _2 
                   )
# 860 "..\pars.mly"
                 : 'moduleSpecBlock));
# 3739 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'sigOrBegin)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpfnsPossiblyEmpty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 861 "..\pars.mly"
                      _3 
                   )
# 861 "..\pars.mly"
                 : 'moduleSpecBlock));
# 3751 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sigOrBegin)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleSpfnsPossiblyEmpty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 862 "..\pars.mly"
                      _2 
                   )
# 862 "..\pars.mly"
                 : 'moduleSpecBlock));
# 3763 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 865 "..\pars.mly"
                      _1 
                   )
# 865 "..\pars.mly"
                 : 'opt_attributes));
# 3774 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 866 "..\pars.mly"
                      [] 
                   )
# 866 "..\pars.mly"
                 : 'opt_attributes));
# 3784 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 870 "..\pars.mly"
                      _1 
                   )
# 870 "..\pars.mly"
                 : 'attributes));
# 3795 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 872 "..\pars.mly"
                      _1 @ _2 
                   )
# 872 "..\pars.mly"
                 : 'attributes));
# 3807 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeListElements)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 875 "..\pars.mly"
                       MatchPair parseState 1 4; _2 
                   )
# 875 "..\pars.mly"
                 : 'attributeList));
# 3820 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attribute)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 879 "..\pars.mly"
                      [_1] 
                   )
# 879 "..\pars.mly"
                 : 'attributeListElements));
# 3831 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeListElements)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'attribute)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 881 "..\pars.mly"
                      _1 @ [_3] 
                   )
# 881 "..\pars.mly"
                 : 'attributeListElements));
# 3844 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_atomicExprAfterType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 885 "..\pars.mly"
                      let arg = match _3 with None -> mksyn_unit (range_of_lid _1) | Some e -> e in 
                            Attr(_1,arg,None,range_of_lid _1) 
                   )
# 885 "..\pars.mly"
                 : 'attribute));
# 3858 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeTarget)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_atomicExprAfterType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 888 "..\pars.mly"
                      let arg = match _5 with None -> mksyn_unit (range_of_lid _3) | Some e -> e in 
                            Attr(_3,arg,Some _1,range_of_lid _3) 
                   )
# 888 "..\pars.mly"
                 : 'attribute));
# 3873 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 892 "..\pars.mly"
                      ident("module",lhs(parseState)) 
                   )
# 892 "..\pars.mly"
                 : 'attributeTarget));
# 3883 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 893 "..\pars.mly"
                      ident("type",lhs(parseState)) 
                   )
# 893 "..\pars.mly"
                 : 'attributeTarget));
# 3893 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 894 "..\pars.mly"
                      _1 
                   )
# 894 "..\pars.mly"
                 : 'attributeTarget));
# 3904 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 895 "..\pars.mly"
                      if _1 then reportParseErrorAt (rhs parseState 1) "syntax error";
                                              ident("return",lhs(parseState)) 
                   )
# 895 "..\pars.mly"
                 : 'attributeTarget));
# 3916 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconSpfn_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 901 "..\pars.mly"
                      _2 
                   )
# 901 "..\pars.mly"
                 : Ast.SynTyconSpfn list));
# 3927 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconSpfn)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconSpfn_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 905 "..\pars.mly"
                      _1 :: _3 
                   )
# 905 "..\pars.mly"
                 : 'tyconSpfn_list));
# 3939 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 907 "..\pars.mly"
                      [_1] 
                   )
# 907 "..\pars.mly"
                 : 'tyconSpfn_list));
# 3950 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeNameInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconSpfnRhsBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 911 "..\pars.mly"
                      _3 _1 
                   )
# 911 "..\pars.mly"
                 : 'tyconSpfn));
# 3962 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeNameInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_classSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 913 "..\pars.mly"
                      TyconSpfn(_1,TyconSpfnRepr_simple (TyconCore_no_repr (lhs(parseState)),lhs(parseState)),_2,lhs(parseState)) 
                   )
# 913 "..\pars.mly"
                 : 'tyconSpfn));
# 3974 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconSpfnRhs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnMembers)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_classSpfn)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_classSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 925 "..\pars.mly"
                      let m = lhs(parseState) in 
                            (fun nameInfo -> 
                                _2 nameInfo (checkForMultipleAugmentations m (_4 @ _5) _7)) 
                   )
# 925 "..\pars.mly"
                 : 'tyconSpfnRhsBlock));
# 3991 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconSpfnRhs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_classSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 929 "..\pars.mly"
                      let m = lhs(parseState) in 
                            (fun nameInfo -> 
                                _1 nameInfo _2) 
                   )
# 929 "..\pars.mly"
                 : 'tyconSpfnRhsBlock));
# 4005 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefnOrSpfnSimpleRepr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 935 "..\pars.mly"
                      let m = lhs(parseState) in 
                            (fun nameInfo augmentation -> 
                                TyconSpfn(nameInfo,TyconSpfnRepr_simple (_1,m),augmentation,m)) 
                   )
# 935 "..\pars.mly"
                 : 'tyconSpfnRhs));
# 4018 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconClassSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 939 "..\pars.mly"
                      let m = lhs(parseState) in 
                            (fun nameInfo augmentation -> 
                                TyconSpfn(nameInfo,TyconSpfnRepr_class (fst _1,snd _1,m),augmentation,m)) 
                   )
# 939 "..\pars.mly"
                 : 'tyconSpfnRhs));
# 4031 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'topType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 943 "..\pars.mly"
                      let m = lhs(parseState) in 
                            let ty,arity = _3 in
                            let invoke = ClassMemberSpfn_binding(ValSpfn([],mksyn_id m "Invoke",inferredTyparDecls,ty,arity,false,false,emptyPreXmlDoc,None,None,m),AbstractMemberFlags None MemberKindMember,m) in 
                            (fun nameInfo augmentation -> 
                                if nonNil augmentation then raiseParseErrorAt m "augmentations are not permitted on delegate type moduleDefns";
                                TyconSpfn(nameInfo,TyconSpfnRepr_class (TyconDelegate (ty,arity),[invoke],m),[],m)) 
                   )
# 943 "..\pars.mly"
                 : 'tyconSpfnRhs));
# 4047 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnBlockKindUnspecified)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 952 "..\pars.mly"
                      (TyconUnspecified, _1) 
                   )
# 952 "..\pars.mly"
                 : 'tyconClassSpfn));
# 4058 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classOrInterfaceOrStruct)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 954 "..\pars.mly"
                      (_1,_2) 
                   )
# 954 "..\pars.mly"
                 : 'tyconClassSpfn));
# 4070 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classOrInterfaceOrStruct)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnBlock)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 956 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched 'class', 'interface' or 'struct'";
                            (_1,_2) 
                   )
# 956 "..\pars.mly"
                 : 'tyconClassSpfn));
# 4084 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classOrInterfaceOrStruct)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 959 "..\pars.mly"
                      (* silent recovery *) (_1,[]) 
                   )
# 959 "..\pars.mly"
                 : 'tyconClassSpfn));
# 4095 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 963 "..\pars.mly"
                      _2 
                   )
# 963 "..\pars.mly"
                 : 'classSpfnBlockKindUnspecified));
# 4106 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnMembers)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 965 "..\pars.mly"
                      _2 
                   )
# 965 "..\pars.mly"
                 : 'classSpfnBlockKindUnspecified));
# 4118 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 968 "..\pars.mly"
                      _2 
                   )
# 968 "..\pars.mly"
                 : 'classSpfnBlockKindUnspecified));
# 4129 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnBlock)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 970 "..\pars.mly"
                      _2 
                   )
# 970 "..\pars.mly"
                 : 'classSpfnBlockKindUnspecified));
# 4141 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 975 "..\pars.mly"
                      _2 
                   )
# 975 "..\pars.mly"
                 : 'classSpfnBlock));
# 4152 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnMembers)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 976 "..\pars.mly"
                      _2 
                   )
# 976 "..\pars.mly"
                 : 'classSpfnBlock));
# 4164 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 977 "..\pars.mly"
                      _1 
                   )
# 977 "..\pars.mly"
                 : 'classSpfnBlock));
# 4175 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classMemberSpfn)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 981 "..\pars.mly"
                      _1 :: _3 
                   )
# 981 "..\pars.mly"
                 : 'classSpfnMembers));
# 4188 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 983 "..\pars.mly"
                      []  
                   )
# 983 "..\pars.mly"
                 : 'classSpfnMembers));
# 4198 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 987 "..\pars.mly"
                      StaticMemberFlags 
                   )
# 987 "..\pars.mly"
                 : 'memberFlags));
# 4208 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 988 "..\pars.mly"
                      NonVirtualMemberFlags 
                   )
# 988 "..\pars.mly"
                 : 'memberFlags));
# 4218 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 989 "..\pars.mly"
                      raiseParseErrorAt (rhs parseState 1) "use 'member x.MyMethod(arg) = ...' to declare a new method" 
                   )
# 989 "..\pars.mly"
                 : 'memberFlags));
# 4228 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 990 "..\pars.mly"
                      raiseParseErrorAt (rhs parseState 1) "use 'abstract' to declare a new virtual method slot, and 'default' or 'override' to specify the default implemenation for that slot" 
                   )
# 990 "..\pars.mly"
                 : 'memberFlags));
# 4238 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 991 "..\pars.mly"
                      OverrideMemberFlags 
                   )
# 991 "..\pars.mly"
                 : 'memberFlags));
# 4248 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 992 "..\pars.mly"
                      OverrideMemberFlags 
                   )
# 992 "..\pars.mly"
                 : 'memberFlags));
# 4258 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberFlags)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 995 "..\pars.mly"
                      _1 
                   )
# 995 "..\pars.mly"
                 : 'memberSpecFlags));
# 4269 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 996 "..\pars.mly"
                      AbstractMemberFlags 
                   )
# 996 "..\pars.mly"
                 : 'memberSpecFlags));
# 4279 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 997 "..\pars.mly"
                      AbstractMemberFlags 
                   )
# 997 "..\pars.mly"
                 : 'memberSpecFlags));
# 4289 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1001 "..\pars.mly"
                      (fun arity -> (match arity with ValSynInfo([],_) -> MemberKindPropertyGet | _ -> MemberKindMember)) 
                   )
# 1001 "..\pars.mly"
                 : 'classMemberSpfnGetSet));
# 4299 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classMemberSpfnGetSetElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1003 "..\pars.mly"
                      (fun arity -> _2) 
                   )
# 1003 "..\pars.mly"
                 : 'classMemberSpfnGetSet));
# 4310 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classMemberSpfnGetSetElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1005 "..\pars.mly"
                      (fun arity -> _2) 
                   )
# 1005 "..\pars.mly"
                 : 'classMemberSpfnGetSet));
# 4321 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classMemberSpfnGetSetElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1007 "..\pars.mly"
                       reportParseErrorAt (rhs parseState 1) "unmatched 'with' or badly formatted 'with' block";
                            (fun arity -> _2) 
                   )
# 1007 "..\pars.mly"
                 : 'classMemberSpfnGetSet));
# 4333 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'nameop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1013 "..\pars.mly"
                      (let (id:ident) = _1 in 
                            if id.idText = "get" then MemberKindPropertyGet 
                            else if id.idText = "set" then MemberKindPropertySet 
                            else raiseParseErrorAt (rhs parseState 1) "'get', 'set' or 'get,set' required") 
                   )
# 1013 "..\pars.mly"
                 : 'classMemberSpfnGetSetElements));
# 4347 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'nameop)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'nameop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1018 "..\pars.mly"
                      let (id:ident) = _1 in 
                           if not ((id.idText = "get" && _3.idText = "set") or 
                                   (id.idText = "set" && _3.idText = "get")) then 
                              raiseParseErrorAt (rhs2 parseState 1 3) "'get', 'set' or 'get,set' required";
                           MemberKindPropertyGetSet 
                   )
# 1018 "..\pars.mly"
                 : 'classMemberSpfnGetSetElements));
# 4363 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberSpecFlags)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inline)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'nameop)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_explicitValTyparDecls)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'topTypeWithTypeConstraints)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'classMemberSpfnGetSet)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_literalValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1026 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                            let inlineFlag,doc,vis2,id,explicitValTyparDecls,(ty,arity),optLiteralValue = _4,grabXmlDoc(parseState,3),_5,_6,_7,_9,_11 in
                            let m = rhs2 parseState 3 10 in 
                            let valSpfn = ValSpfn(_1,id,explicitValTyparDecls,ty,arity, inlineFlag,false,doc, vis2,optLiteralValue,m) in 
                            ClassMemberSpfn_binding(valSpfn, _3 (computeOverloadQualifier _1) (_10 arity),m) 
                   )
# 1026 "..\pars.mly"
                 : 'classMemberSpfn));
# 4387 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'interfaceMember)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1032 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                            ClassMemberSpfn_interface (_4,union_ranges (rhs parseState 3) (range_of_syntype _4)) 
                   )
# 1032 "..\pars.mly"
                 : 'classMemberSpfn));
# 4402 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1035 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                            ClassMemberSpfn_inherit (_4,union_ranges (rhs parseState 3) (range_of_syntype _4)) 
                   )
# 1035 "..\pars.mly"
                 : 'classMemberSpfn));
# 4416 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'fieldDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1038 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                            let fld = _4 _1 false  in
                            ClassMemberSpfn_field(fld,rhs2 parseState 3 4) 
                   )
# 1038 "..\pars.mly"
                 : 'classMemberSpfn));
# 4431 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'fieldDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1042 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                            ClassMemberSpfn_field(_5 _1 true,rhs2 parseState 3 5) 
                   )
# 1042 "..\pars.mly"
                 : 'classMemberSpfn));
# 4445 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1045 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                            ClassMemberSpfn_tycon(_5,rhs2 parseState 3 5) 
                   )
# 1045 "..\pars.mly"
                 : 'classMemberSpfn));
# 4459 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'topTypeWithTypeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1048 "..\pars.mly"
                      let vis,doc,(ty,arity) = _2,grabXmlDoc(parseState,3),_5 in 
                            let m = union_ranges (rhs parseState 3) (range_of_syntype ty) in
                            let inlineFlag = false in
                            let valSpfn = ValSpfn(_1,mksyn_id (rhs parseState 3) "new",noInferredTypars,ty,arity,inlineFlag,false, doc, vis,None,m) in
                            ClassMemberSpfn_binding(valSpfn, CtorMemberFlags  (computeOverloadQualifier _1),m) 
                   )
# 1048 "..\pars.mly"
                 : 'classMemberSpfn));
# 4476 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconNameAndTyparDecls)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_typeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1056 "..\pars.mly"
                      let typars,lid,fixity,tpcs1,vis,xmlDoc = _2 in 
                            let tpcs2 = _3 in 
                            ComponentInfo(_1,TMK_Tycon,typars,(tpcs1 @ tpcs2),lid,xmlDoc,fixity,vis,range_of_lid lid)  
                   )
# 1056 "..\pars.mly"
                 : 'typeNameInfo));
# 4491 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefn)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefnList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1062 "..\pars.mly"
                      _2 :: _3 
                   )
# 1062 "..\pars.mly"
                 : 'tyconDefnList));
# 4503 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1064 "..\pars.mly"
                      [] 
                   )
# 1064 "..\pars.mly"
                 : 'tyconDefnList));
# 4513 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeNameInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1068 "..\pars.mly"
                      TyconDefn(_1,TyconDefnRepr_simple(TyconCore_no_repr(lhs(parseState)),lhs(parseState)),[],lhs(parseState)) 
                   )
# 1068 "..\pars.mly"
                 : 'tyconDefn));
# 4524 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeNameInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefnRhsBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1070 "..\pars.mly"
                      let tcDefRepr,members = _3 in
                            TyconDefn(_1,tcDefRepr,members,lhs(parseState)) 
                   )
# 1070 "..\pars.mly"
                 : 'tyconDefn));
# 4537 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeNameInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'simplePatterns)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'optAsSpec)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefnRhsBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1073 "..\pars.mly"
                      let vis,spats, az,(tcDefRepr,members) = _3,_5,_6,_8 in
                            let (ComponentInfo(_,_,_,_,lid,_,_,_,_)) = _1 in 
                            let memberCtorPattern = ClassMemberDefn_implicit_ctor (vis,_2,spats,az,range_of_lid lid) in
                            let tcDefRepr = 
                              match tcDefRepr with
                              | TyconDefnRepr_class (k,cspec,m) -> TyconDefnRepr_class (k,memberCtorPattern::cspec,m)
                              | _ -> reportParseErrorAt (rhs2 parseState 1 5) "Only class types may take value arguments"; tcDefRepr
                            in
                            TyconDefn(_1,tcDefRepr,members,lhs(parseState))  
                   )
# 1073 "..\pars.mly"
                 : 'tyconDefn));
# 4562 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefnRhs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMembers)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_classDefn)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_classDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1093 "..\pars.mly"
                      let m = lhs(parseState) in 
                            _2 (checkForMultipleAugmentations m (_4 @ _5) _7) 
                   )
# 1093 "..\pars.mly"
                 : 'tyconDefnRhsBlock));
# 4578 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefnRhs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_classDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1096 "..\pars.mly"
                      let m = lhs(parseState) in 
                            _1 _2 
                   )
# 1096 "..\pars.mly"
                 : 'tyconDefnRhsBlock));
# 4591 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefnOrSpfnSimpleRepr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1101 "..\pars.mly"
                      let m = lhs(parseState) in (fun augmentation -> TyconDefnRepr_simple (_1,m),augmentation) 
                   )
# 1101 "..\pars.mly"
                 : 'tyconDefnRhs));
# 4602 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconClassDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1103 "..\pars.mly"
                      let m = lhs(parseState) in (fun augmentation -> TyconDefnRepr_class (fst _1,snd _1,m),augmentation) 
                   )
# 1103 "..\pars.mly"
                 : 'tyconDefnRhs));
# 4613 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'topType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1105 "..\pars.mly"
                      let m = lhs(parseState) in 
                            let ty,arity = _3 in
                            (fun augmentation -> 
                                let valSpfn = ValSpfn([],mksyn_id m "Invoke",inferredTyparDecls,ty,arity,false,false,emptyPreXmlDoc,None,None,m) in 
                                let invoke = ClassMemberDefn_slotsig(valSpfn,AbstractMemberFlags None MemberKindMember,m) in 
                                if nonNil augmentation then raiseParseErrorAt m "augmentations are not permitted on delegate type moduleDefns";
                                TyconDefnRepr_class (TyconDelegate (ty,arity),[invoke],m),[]) 
                   )
# 1105 "..\pars.mly"
                 : 'tyconDefnRhs));
# 4630 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnBlockKindUnspecified)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1115 "..\pars.mly"
                      (TyconUnspecified, _1) 
                   )
# 1115 "..\pars.mly"
                 : 'tyconClassDefn));
# 4641 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classOrInterfaceOrStruct)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1117 "..\pars.mly"
                      (_1,_2) 
                   )
# 1117 "..\pars.mly"
                 : 'tyconClassDefn));
# 4653 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classOrInterfaceOrStruct)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnBlock)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1119 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched 'class', 'interface' or 'struct'";
                            (_1,_2) 
                   )
# 1119 "..\pars.mly"
                 : 'tyconClassDefn));
# 4667 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classOrInterfaceOrStruct)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1122 "..\pars.mly"
                      (* silent recovery *) (_1,[]) 
                   )
# 1122 "..\pars.mly"
                 : 'tyconClassDefn));
# 4678 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMembers)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1126 "..\pars.mly"
                      (* silent recovery *) _2 
                   )
# 1126 "..\pars.mly"
                 : 'classDefnBlockKindUnspecified));
# 4690 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1128 "..\pars.mly"
                      _2 
                   )
# 1128 "..\pars.mly"
                 : 'classDefnBlockKindUnspecified));
# 4701 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMembers)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1141 "..\pars.mly"
                      (* silent recovery *) _2 
                   )
# 1141 "..\pars.mly"
                 : 'classDefnBlock));
# 4713 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1142 "..\pars.mly"
                      _2 
                   )
# 1142 "..\pars.mly"
                 : 'classDefnBlock));
# 4724 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1143 "..\pars.mly"
                      _1 
                   )
# 1143 "..\pars.mly"
                 : 'classDefnBlock));
# 4735 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMember)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1147 "..\pars.mly"
                      _1 @  _3 
                   )
# 1147 "..\pars.mly"
                 : 'classDefnMembers));
# 4748 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1150 "..\pars.mly"
                      _2 
                   )
# 1150 "..\pars.mly"
                 : 'classDefnMembers));
# 4759 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1152 "..\pars.mly"
                      [] 
                   )
# 1152 "..\pars.mly"
                 : 'classDefnMembers));
# 4769 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMemberGetSetElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1156 "..\pars.mly"
                      _2  
                   )
# 1156 "..\pars.mly"
                 : 'classDefnMemberGetSet));
# 4780 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMemberGetSetElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1158 "..\pars.mly"
                      _2  
                   )
# 1158 "..\pars.mly"
                 : 'classDefnMemberGetSet));
# 4791 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMemberGetSetElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1160 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched 'with' or badly formatted 'with' block";
                            _2  
                   )
# 1160 "..\pars.mly"
                 : 'classDefnMemberGetSet));
# 4803 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMemberGetSetElement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1165 "..\pars.mly"
                      [_1]  
                   )
# 1165 "..\pars.mly"
                 : 'classDefnMemberGetSetElements));
# 4814 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMemberGetSetElement)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMemberGetSetElement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1167 "..\pars.mly"
                      [_1;_3] 
                   )
# 1167 "..\pars.mly"
                 : 'classDefnMemberGetSetElements));
# 4826 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inline)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bindingPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_topReturnTypeWithTypeConstraints)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1171 "..\pars.mly"
                      let rhsm = (range_of_synexpr _5) in 
                            (_1,_2,_3,_5,rhsm) 
                   )
# 1171 "..\pars.mly"
                 : 'classDefnMemberGetSetElement));
# 4841 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inline)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bindingPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_topReturnTypeWithTypeConstraints)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1177 "..\pars.mly"
                       let rhsm = (range_of_synexpr _5) in 
                             let wholem = union_ranges (rhs2 parseState 3 4) rhsm in 
                             let mpat = rhs parseState 2 in 
                             let optReturnType = _3 in 
                             let bindingBuilder,bindm = _2 in 
                             (fun vis memFlagsBuilder attrs -> 
                                  [ ClassMemberDefn_member_binding (bindingBuilder (vis,_1,false,bindm,NoSequencePointAtInvisibleBinding,wholem,optReturnType,_5,rhsm,[],attrs,Some(memFlagsBuilder (computeOverloadQualifier attrs) MemberKindMember)),bindm) ]) 
                   )
# 1177 "..\pars.mly"
                 : 'memberCore));
# 4861 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inline)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bindingPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_topReturnTypeWithTypeConstraints)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnMemberGetSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1187 "..\pars.mly"
                      let wholem = rhs2 parseState 2 4 in 
                            let propertyNameBindingBuilder,_ = _2 in 
                            let optPropertyType = _3 in 
                            let mutableFlag = false in
                            (fun visNoLongerUsed memFlagsBuilder attrs -> 
                                  _4 |> List.map (fun (optInline,(bindingBuilder,bindm),optReturnType,expr,exprm) ->
                                        let optInline = _1 || optInline in 
                                        let overloadQualifier =  (computeOverloadQualifier attrs) in 
                                        
                                        let binding = bindingBuilder (visNoLongerUsed,optInline,mutableFlag,bindm,NoSequencePointAtInvisibleBinding,wholem,optReturnType,expr,exprm,[],attrs,Some (memFlagsBuilder overloadQualifier MemberKindMember)) in
                                        let (Binding (vis,_,pseudo,_,attrs,doc,valSynData,pv,_,bindm,spBind)) = binding in 
                                        let memberKind = 
                                              let getset = 
                                                    let rec go p = 
                                                        match p with 
                                                        | Pat_lid ([id],_,_,_,_) ->  id.idText
                                                        | Pat_as (_,nm,_,_,_) ->  nm.idText
                                                        | Pat_typed (p,_,_) ->  go p
                                                        | Pat_attrib (p,_,_) ->  go p
                                                       | _ -> raiseParseErrorAt bindm "invalid declaration syntax"  in
                                                    go pv in 
                                              if getset = "get" then MemberKindPropertyGet 
                                              else if getset = "set" then MemberKindPropertySet 
                                              else raiseParseErrorAt bindm "get and/or set required" in
                                        // REVIEW: It's hard not to ignore the optPropertyType type annotation for 'set' properties. To apply it, 
                                        // we should apply it to the last argument, but at this point we've already pushed the patterns that 
                                        // make up the arguments onto the RHS. So we just always give a warning. 
                                        begin match optPropertyType with 
                                        | Some _ -> errorR(Error("type annotations on property getters and setters must be given after the 'get()' or 'set(v)', e.g. 'with get() : string = ...'",bindm))
                                        | None -> ()
                                        end;
                                        
                                        let optReturnType = 
                                            match (memberKind, optReturnType) with 
                                            | MemberKindPropertySet,_ -> optReturnType
                                            | _, None -> optPropertyType
                                            | _ -> optReturnType in 
                                        (* REDO with the correct member kind *)
                                        let binding = bindingBuilder(vis,pseudo,mutableFlag,bindm,NoSequencePointAtInvisibleBinding,wholem,optReturnType,expr,exprm,[],attrs,Some(memFlagsBuilder overloadQualifier memberKind)) in 
                                        let (Binding (vis,_,pseudo,_,attrs,doc,valSynData,pv,rhsAfterPats,bindm,spBind)) = binding in 
                                     
                                        let (ValSynData(_,valSynInfo,_)) = valSynData  in
                                        // Setters have all arguments tupled in their internal TAST form, though they don't appear to be tupled from the syntax
                                        let memFlags = memFlagsBuilder overloadQualifier memberKind in
                                        let valSynInfo = 
                                            match memberKind, valSynInfo with 
                                            | MemberKindPropertyGet,ValSynInfo ([],_)          when not memFlags.MemberIsInstance  -> raiseParseErrorAt bindm  "A getter property must at least have one argument, e.g. 'with get() = ...'"
                                            | MemberKindPropertyGet,ValSynInfo ([thisArg],_)   when memFlags.MemberIsInstance      -> raiseParseErrorAt bindm  "A getter property must at least have one argument, e.g. 'with get() = ...'"
                                            | MemberKindPropertySet,ValSynInfo (thisArg::indexAndValueArgs,ret) when     memFlags.MemberIsInstance -> ValSynInfo ([thisArg;List.concat indexAndValueArgs],ret)
                                            | MemberKindPropertySet,ValSynInfo (indexAndValueArgs,ret)          when not memFlags.MemberIsInstance -> ValSynInfo ([List.concat indexAndValueArgs],ret)
                                            | _ -> valSynInfo in
                                        let valSynData = ValSynData(Some(memFlags), valSynInfo,None) in 
                                        // Create the binding from the first lambda pattern in order to extract out the pattern of the 
                                        // 'this' variable and put it into the pattern for the get/set binding, replacing the get/set part 
                                        // A little gross. 
                                        let pv',doc' = 
                                            let bindingOuter = propertyNameBindingBuilder(vis,optInline,mutableFlag,bindm,spBind,bindm,optReturnType,expr,exprm,[],attrs,Some(memFlagsBuilder overloadQualifier MemberKindMember)) in
                                            let (Binding (_,_,_,_,_,doc2,_,pvOuter,_,_,_)) = bindingOuter in 
                                            
                                        
                                            let lidOuter,lidVisOuter = 
                                                match pvOuter with 
                                                | Pat_lid (lid,None,[],lidVisOuter,m) ->  lid,lidVisOuter
                                                | p -> raiseParseErrorAt bindm "invalid declaration syntax"  in
                                            // Merge the visibility from the outer point with the inner point, e.g.
                                            //    member <VIS1>  this.Size with <VIS2> get ()      = m_size
                                            
                                            let mergeLidVisOuter lidVisInner =
                                                match lidVisInner,lidVisOuter with 
                                                | None,None -> None
                                                | Some lidVisInner,None | None,Some lidVisInner -> Some lidVisInner
                                                | Some _, Some _ ->  
                                                    errorR(Error("multiple accessibilities given for property getter or setter",bindm));
                                                    lidVisInner in
                                        
                                            // Replace the "get" or the "set" with the right name
                                            let rec go p = 
                                                match p with 
                                                | Pat_lid ([id],tyargs,args,lidVisInner,m) ->  
                                                    // Setters have all arguments tupled in their internal form, though they don't 
                                                    // appear to be tupled from the syntax. Somewhat unfortunate
                                                    let args = 
                                                        if id.idText = "set" then 
                                                            match args with 
                                                            | [Pat_paren(Pat_tuple (indexPats,_),indexPatRange);valuePat] when id.idText = "set" -> 
                                                                [Pat_tuple(indexPats@[valuePat],union_ranges indexPatRange (range_of_synpat valuePat))] 
                                                            | [indexPat;valuePat] -> 
                                                                [Pat_tuple(args,union_ranges (range_of_synpat indexPat) (range_of_synpat valuePat))] 
                                                            | [valuePat] -> 
                                                                [valuePat] 
                                                            | _ -> 
                                                                raiseParseErrorAt m "property setters must be defined using 'set value = ', 'set idx value = ' or 'set (idx1,...,idxN) value = ... '" 
                                                        else 
                                                            args in
                                                    Pat_lid (lidOuter,tyargs,args,mergeLidVisOuter lidVisInner,m)
                                                | Pat_as (_,nm,_,lidVisInner,m) ->  Pat_lid (lidOuter,None,[],mergeLidVisOuter lidVisInner,m)
                                                | Pat_typed (p,ty,m) ->  Pat_typed(go p,ty,m)
                                                | Pat_attrib (p,attribs,m) ->  Pat_attrib(go p,attribs,m)
                                                | Pat_wild(m) ->  Pat_wild(m)
                                                | _ -> raiseParseErrorAt bindm "invalid declaration syntax"  in
                                            go pv,MergePreXmlDoc doc2 doc in
                                        ClassMemberDefn_member_binding (Binding (vis,NormalBinding,pseudo,mutableFlag,attrs,doc',valSynData,pv',rhsAfterPats,bindm,spBind),bindm)))
                            
                   )
# 1187 "..\pars.mly"
                 : 'memberCore));
# 4977 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1303 "..\pars.mly"
                   )
# 1303 "..\pars.mly"
                 : 'abstractMemberFlags));
# 4986 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1304 "..\pars.mly"
                   )
# 1304 "..\pars.mly"
                 : 'abstractMemberFlags));
# 4995 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1308 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                            [mkClassMemberLocalBindings(false,rhs2 parseState 3 3,_1,_2,_3)] 
                   )
# 1308 "..\pars.mly"
                 : 'classDefnMember));
# 5009 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1312 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                            [mkClassMemberLocalBindings(true,rhs2 parseState 3 4,_1,_2,_4)] 
                   )
# 1312 "..\pars.mly"
                 : 'classDefnMember));
# 5023 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberFlags)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberCore)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_ODECLEND)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1322 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                            _4 _2 _3 _1 
                   )
# 1322 "..\pars.mly"
                 : 'classDefnMember));
# 5039 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'interfaceMember)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_interfaceImplDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1326 "..\pars.mly"
                       if nonNil _1 then errorR(Error("attributes are not permitted on interface implementations",rhs parseState 1));
                             if isSome _2 then errorR(Error("interfaces always have the same visibility as the enclosing type",rhs parseState 3));
                             [ ClassMemberDefn_interface (_4, _5,rhs2 parseState 3 5) ] 
                   )
# 1326 "..\pars.mly"
                 : 'classDefnMember));
# 5056 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'abstractMemberFlags)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inline)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'nameop)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_explicitValTyparDecls)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'topTypeWithTypeConstraints)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'classMemberSpfnGetSet)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_ODECLEND)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1331 "..\pars.mly"
                      let ty,arity = _8 in
                            let inlineFlag,doc,id,explicitValTyparDecls = _4,grabXmlDoc(parseState,3),_5,_6 in
                            let m = rhs2 parseState 3 9 in
                            if isSome _2 then errorR(Error("Accessibility modifiers are not allowed on this member. Abstract slots always have the same visibility as the enclosing type",m));
                            let valSpfn = ValSpfn(_1,id,explicitValTyparDecls,ty,arity, inlineFlag,false,doc, None,None,m) in
                            [ ClassMemberDefn_slotsig(valSpfn,AbstractMemberFlags (computeOverloadQualifier _1) (_9 arity), m) ] 
                   )
# 1331 "..\pars.mly"
                 : 'classDefnMember));
# 5080 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'inheritsDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1339 "..\pars.mly"
                       if nonNil _1 then errorR(Error("attributes are not permitted on 'inherit' declarations",rhs parseState 1));
                             if isSome _2 then errorR(Error("Visibility declarations are not permitted on an 'inherits' declaration",rhs parseState 1));
                             [ _3 ] 
                   )
# 1339 "..\pars.mly"
                 : 'classDefnMember));
# 5095 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'fieldDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1344 "..\pars.mly"
                       if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             [ ClassMemberDefn_field(_4 _1 false,rhs2 parseState 3 4) ] 
                   )
# 1344 "..\pars.mly"
                 : 'classDefnMember));
# 5109 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'fieldDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1348 "..\pars.mly"
                       if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             [ ClassMemberDefn_field(_5 _1 true,rhs2 parseState 3 5) ] 
                   )
# 1348 "..\pars.mly"
                 : 'classDefnMember));
# 5123 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPattern)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'optAsSpec)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_ODECLEND)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1352 "..\pars.mly"
                       let m = union_ranges (rhs2 parseState 3 6) (range_of_synexpr _7) in 
                             let expr = _7 in
                             let valSynData = ValSynData (Some(CtorMemberFlags (computeOverloadQualifier _1)), ValSynInfo([SynInfo.InferArgSynInfoFromPat _4],SynInfo.unnamedRetVal), _5) in 
                             let vis = _2 in 
                             [ ClassMemberDefn_member_binding(Binding (None,NormalBinding,false,false,_1,grabXmlDoc(parseState,3),valSynData, Pat_lid ([mksyn_id (rhs parseState 3) "new"],Some noInferredTypars,[_4],vis,rhs parseState 3),BindingRhs([],None,expr),m,NoSequencePointAtInvisibleBinding),m) ] 
                   )
# 1352 "..\pars.mly"
                 : 'classDefnMember));
# 5143 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyconDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1359 "..\pars.mly"
                       if isSome _2 then errorR(Error("Visibility declarations should come immediately prior to the identifier naming a construct",rhs parseState 2));
                             [ ClassMemberDefn_tycon(_5,None,rhs2 parseState 3 5) ] 
                   )
# 1359 "..\pars.mly"
                 : 'classDefnMember));
# 5157 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pathop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1363 "..\pars.mly"
                      (None,_1) 
                   )
# 1363 "..\pars.mly"
                 : 'atomicPatternLongIdent));
# 5168 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'access)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'pathop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1364 "..\pars.mly"
                      (Some(_1), _2) 
                   )
# 1364 "..\pars.mly"
                 : 'atomicPatternLongIdent));
# 5180 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1367 "..\pars.mly"
                      None 
                   )
# 1367 "..\pars.mly"
                 : 'opt_access));
# 5190 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1368 "..\pars.mly"
                      Some(_1) 
                   )
# 1368 "..\pars.mly"
                 : 'opt_access));
# 5201 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1371 "..\pars.mly"
                      accessPrivate 
                   )
# 1371 "..\pars.mly"
                 : 'access));
# 5211 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1372 "..\pars.mly"
                      accessPublic 
                   )
# 1372 "..\pars.mly"
                 : 'access));
# 5221 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1373 "..\pars.mly"
                      accessInternal 
                   )
# 1373 "..\pars.mly"
                 : 'access));
# 5231 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1377 "..\pars.mly"
                      Some(_1) 
                   )
# 1377 "..\pars.mly"
                 : 'opt_decl_visibility));
# 5242 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1378 "..\pars.mly"
                      None 
                   )
# 1378 "..\pars.mly"
                 : 'opt_decl_visibility));
# 5252 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectImplementationBlock)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl_end)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1381 "..\pars.mly"
                      Some(_2) 
                   )
# 1381 "..\pars.mly"
                 : 'opt_interfaceImplDefn));
# 5264 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1382 "..\pars.mly"
                      None 
                   )
# 1382 "..\pars.mly"
                 : 'opt_interfaceImplDefn));
# 5274 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classDefnBlock)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl_end)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1385 "..\pars.mly"
                      _2 
                   )
# 1385 "..\pars.mly"
                 : 'opt_classDefn));
# 5286 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1386 "..\pars.mly"
                      [] 
                   )
# 1386 "..\pars.mly"
                 : 'opt_classDefn));
# 5296 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'classSpfnBlock)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl_end)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1389 "..\pars.mly"
                      _2 
                   )
# 1389 "..\pars.mly"
                 : 'opt_classSpfn));
# 5308 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1390 "..\pars.mly"
                      [] 
                   )
# 1390 "..\pars.mly"
                 : 'opt_classSpfn));
# 5318 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'optBaseSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1395 "..\pars.mly"
                      let mDecl = union_ranges (rhs parseState 1) (range_of_syntype _2) in
                            ClassMemberDefn_inherit(_2,_3,mDecl) 
                   )
# 1395 "..\pars.mly"
                 : 'inheritsDefn));
# 5331 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExprAfterType)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'optBaseSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1398 "..\pars.mly"
                      let mDecl = union_ranges (rhs parseState 1) (range_of_synexpr _4) in
                            ClassMemberDefn_implicit_inherit(_2,_4,_5,mDecl) 
                   )
# 1398 "..\pars.mly"
                 : 'inheritsDefn));
# 5346 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'asSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1402 "..\pars.mly"
                      Some(_1) 
                   )
# 1402 "..\pars.mly"
                 : 'optAsSpec));
# 5357 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1403 "..\pars.mly"
                      None 
                   )
# 1403 "..\pars.mly"
                 : 'optAsSpec));
# 5367 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1406 "..\pars.mly"
                      _2 
                   )
# 1406 "..\pars.mly"
                 : 'asSpec));
# 5378 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'baseSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1409 "..\pars.mly"
                      Some(_1) 
                   )
# 1409 "..\pars.mly"
                 : 'optBaseSpec));
# 5389 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1410 "..\pars.mly"
                      None 
                   )
# 1410 "..\pars.mly"
                 : 'optBaseSpec));
# 5399 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1414 "..\pars.mly"
                      if (_2).idText <> "base" then 
                                  errorR(Error("'inherit' declarations may not have 'as'  bindings. The keyword 'base' may be used instead. Remove this 'as' binding",rhs2 parseState 1 2)); 
                             ident("base",rhs parseState 2) 
                   )
# 1414 "..\pars.mly"
                 : 'baseSpec));
# 5412 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1419 "..\pars.mly"
                      errorR(Error("'inherit' declarations may not have 'as' bindings. The keyword 'base' may be used instead. Remove this 'as' binding",rhs2 parseState 1 2)); 
                             ident("base",rhs parseState 2) 
                   )
# 1419 "..\pars.mly"
                 : 'baseSpec));
# 5423 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectImplementationMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1424 "..\pars.mly"
                      _2 
                   )
# 1424 "..\pars.mly"
                 : 'objectImplementationBlock));
# 5434 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectImplementationMembers)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1425 "..\pars.mly"
                      _2 
                   )
# 1425 "..\pars.mly"
                 : 'objectImplementationBlock));
# 5446 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectImplementationMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1426 "..\pars.mly"
                      _1 
                   )
# 1426 "..\pars.mly"
                 : 'objectImplementationBlock));
# 5457 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectImplementationMember)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectImplementationMembers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1429 "..\pars.mly"
                      _1 @  _3 
                   )
# 1429 "..\pars.mly"
                 : 'objectImplementationMembers));
# 5470 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectImplementationMember)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1430 "..\pars.mly"
                      _1 
                   )
# 1430 "..\pars.mly"
                 : 'objectImplementationMembers));
# 5482 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberOrOverride)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberCore)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_ODECLEND)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1434 "..\pars.mly"
                      _3 None OverrideMemberFlags _1 
                   )
# 1434 "..\pars.mly"
                 : 'objectImplementationMember));
# 5496 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberOrOverride)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1435 "..\pars.mly"
                      [] 
                   )
# 1435 "..\pars.mly"
                 : 'objectImplementationMember));
# 5508 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1438 "..\pars.mly"
                   )
# 1438 "..\pars.mly"
                 : 'memberOrOverride));
# 5517 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1439 "..\pars.mly"
                   )
# 1439 "..\pars.mly"
                 : 'memberOrOverride));
# 5526 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1444 "..\pars.mly"
                      if nonNil _1 then errorR(Error("Attributes are not allowed here",rhs parseState 1));
                            if isSome _2 then errorR(Error("Visibility declarations are not permitted on type abbreviations",rhs parseState 2));
                            TyconCore_abbrev (_3, lhs(parseState)) 
                   )
# 1444 "..\pars.mly"
                 : 'tyconDefnOrSpfnSimpleRepr));
# 5541 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionRepr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1448 "..\pars.mly"
                      if nonNil _1 then errorR(Error("Attributes are not allowed here",rhs parseState 1));
                            if _3 |> List.exists (function Choice1Of2 _ -> true | _ -> false) then (
                                if isSome _2 then errorR(Error("Visibility declarations are not permitted on enum types",rhs parseState 2));
                                TyconCore_enum (_3 |> List.choose (function 
                                                                   | Choice1Of2 data ->  
                                                                     Some(data) 
                                                                   | Choice2Of2(UnionCase(_,_,_,_,_,m)) -> 
                                                                     errorR(Error("All enum fields must be given values",m)); None),
                                                lhs(parseState))
                            ) else 
                                TyconCore_union (_2, 
                                                 _3 |> List.choose (function Choice2Of2 data -> Some(data) | Choice1Of2 _ -> failwith "huh?"),
                                                 lhs(parseState)) 
                   )
# 1448 "..\pars.mly"
                 : 'tyconDefnOrSpfnSimpleRepr));
# 5566 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'braceFieldDeclList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1462 "..\pars.mly"
                      if nonNil _1 then errorR(Error("Attributes are not allowed here",rhs parseState 1));
                            TyconCore_recd (_2,_3,lhs(parseState)) 
                   )
# 1462 "..\pars.mly"
                 : 'tyconDefnOrSpfnSimpleRepr));
# 5580 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_visibility)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'inlineAssemblyTyconRepr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1465 "..\pars.mly"
                      if nonNil _1 then errorR(Error("Attributes are not allowed here",rhs parseState 1));
                            libraryOnlyWarning (lhs(parseState));
                            if isSome _2 then errorR(Error("Visibility declarations are not permitted on inline assembly code types",rhs parseState 2));
                            MatchPair parseState 3 5;  
                            _4 
                   )
# 1465 "..\pars.mly"
                 : 'tyconDefnOrSpfnSimpleRepr));
# 5597 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdFieldDeclList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1474 "..\pars.mly"
                      MatchPair parseState 1 3;   _2 
                   )
# 1474 "..\pars.mly"
                 : 'braceFieldDeclList));
# 5608 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdFieldDeclList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1476 "..\pars.mly"
                      _2 
                   )
# 1476 "..\pars.mly"
                 : 'braceFieldDeclList));
# 5620 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1478 "..\pars.mly"
                      MatchPair parseState 1 3;   [] 
                   )
# 1478 "..\pars.mly"
                 : 'braceFieldDeclList));
# 5630 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HASH)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1482 "..\pars.mly"
                      libraryOnlyWarning (lhs(parseState));
                            let lhsm = lhs(parseState) in 
                            TyconCore_asm (ParseAssemblyCodeType _2 (rhs parseState 2),lhsm) 
                   )
# 1482 "..\pars.mly"
                 : 'inlineAssemblyTyconRepr));
# 5644 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1487 "..\pars.mly"
                      TyconClass 
                   )
# 1487 "..\pars.mly"
                 : 'classOrInterfaceOrStruct));
# 5654 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1488 "..\pars.mly"
                      TyconInterface 
                   )
# 1488 "..\pars.mly"
                 : 'classOrInterfaceOrStruct));
# 5664 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1489 "..\pars.mly"
                      TyconStruct 
                   )
# 1489 "..\pars.mly"
                 : 'classOrInterfaceOrStruct));
# 5674 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1492 "..\pars.mly"
                      
                   )
# 1492 "..\pars.mly"
                 : 'interfaceMember));
# 5684 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1493 "..\pars.mly"
                      
                   )
# 1493 "..\pars.mly"
                 : 'interfaceMember));
# 5694 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1497 "..\pars.mly"
                      [], _2,false,[],_1,grabXmlDoc(parseState,2) 
                   )
# 1497 "..\pars.mly"
                 : 'tyconNameAndTyparDecls));
# 5706 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'prefixTyparDecls)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1499 "..\pars.mly"
                      _2, _3,false,[],_1,grabXmlDoc(parseState,2) 
                   )
# 1499 "..\pars.mly"
                 : 'tyconNameAndTyparDecls));
# 5719 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'postfixTyparDecls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1501 "..\pars.mly"
                      let tps,tpcs = _3 in 
                             tps, _2,true,tpcs,_1,grabXmlDoc(parseState,2) 
                   )
# 1501 "..\pars.mly"
                 : 'tyconNameAndTyparDecls));
# 5733 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1505 "..\pars.mly"
                      [ TyparDecl([],_1) ] 
                   )
# 1505 "..\pars.mly"
                 : 'prefixTyparDecls));
# 5744 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'prefixTyparDeclList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1506 "..\pars.mly"
                       MatchPair parseState 1 3; List.rev _2 
                   )
# 1506 "..\pars.mly"
                 : 'prefixTyparDecls));
# 5755 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prefixTyparDeclList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typarDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1509 "..\pars.mly"
                      _3 :: _1 
                   )
# 1509 "..\pars.mly"
                 : 'prefixTyparDeclList));
# 5767 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typarDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1510 "..\pars.mly"
                      [_1] 
                   )
# 1510 "..\pars.mly"
                 : 'prefixTyparDeclList));
# 5778 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1513 "..\pars.mly"
                      TyparDecl(_1,_2) 
                   )
# 1513 "..\pars.mly"
                 : 'typarDecl));
# 5790 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_TYAPP)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'prefixTyparDeclList)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_typeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1516 "..\pars.mly"
                      List.rev _3, _4 
                   )
# 1516 "..\pars.mly"
                 : 'postfixTyparDecls));
# 5803 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prefixTyparDeclList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1520 "..\pars.mly"
                      (List.rev _1,true) 
                   )
# 1520 "..\pars.mly"
                 : 'explicitValTyparDeclsCore));
# 5814 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1522 "..\pars.mly"
                      deprecatedWithError "Either specify all relevant type parameters or none" (lhs(parseState));
                             ([],true) 
                   )
# 1522 "..\pars.mly"
                 : 'explicitValTyparDeclsCore));
# 5825 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prefixTyparDeclList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1525 "..\pars.mly"
                      (List.rev _1,false) 
                   )
# 1525 "..\pars.mly"
                 : 'explicitValTyparDeclsCore));
# 5836 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1527 "..\pars.mly"
                      ([],false) 
                   )
# 1527 "..\pars.mly"
                 : 'explicitValTyparDeclsCore));
# 5846 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_TYAPP)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'explicitValTyparDeclsCore)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_typeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1531 "..\pars.mly"
                      let tps,flex = _3 in 
                              SynValTyparDecls(tps,flex,_4) 
                   )
# 1531 "..\pars.mly"
                 : 'explicitValTyparDecls));
# 5860 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'explicitValTyparDecls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1536 "..\pars.mly"
                      _1 
                   )
# 1536 "..\pars.mly"
                 : 'opt_explicitValTyparDecls));
# 5871 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1538 "..\pars.mly"
                      SynValTyparDecls([],true,[]) 
                   )
# 1538 "..\pars.mly"
                 : 'opt_explicitValTyparDecls));
# 5881 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'explicitValTyparDecls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1542 "..\pars.mly"
                      Some _1 
                   )
# 1542 "..\pars.mly"
                 : 'opt_explicitValTyparDecls2));
# 5892 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1544 "..\pars.mly"
                      None 
                   )
# 1544 "..\pars.mly"
                 : 'opt_explicitValTyparDecls2));
# 5902 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1548 "..\pars.mly"
                      [] 
                   )
# 1548 "..\pars.mly"
                 : 'opt_typeConstraints));
# 5912 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1550 "..\pars.mly"
                      List.rev _2 
                   )
# 1550 "..\pars.mly"
                 : 'opt_typeConstraints));
# 5923 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeConstraints)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeConstraint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1553 "..\pars.mly"
                      _3 :: _1 
                   )
# 1553 "..\pars.mly"
                 : 'typeConstraints));
# 5935 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeConstraint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1554 "..\pars.mly"
                      [_1] 
                   )
# 1554 "..\pars.mly"
                 : 'typeConstraints));
# 5946 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1558 "..\pars.mly"
                      libraryOnlyWarning (lhs(parseState)); WhereTyparDefaultsToType(_2,_4,lhs(parseState)) 
                   )
# 1558 "..\pars.mly"
                 : 'typeConstraint));
# 5958 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1560 "..\pars.mly"
                      WhereTyparSubtypeOfType(_1,_3,lhs(parseState)) 
                   )
# 1560 "..\pars.mly"
                 : 'typeConstraint));
# 5970 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1562 "..\pars.mly"
                      WhereTyparIsValueType(_1,lhs(parseState)) 
                   )
# 1562 "..\pars.mly"
                 : 'typeConstraint));
# 5981 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1564 "..\pars.mly"
                      if _3 <> "not" then reportParseErrorAt (rhs parseState 3) ("Unexpected identifier: '"^ _3 ^"'");  
                             WhereTyparIsReferenceType(_1,lhs(parseState)) 
                   )
# 1564 "..\pars.mly"
                 : 'typeConstraint));
# 5994 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1567 "..\pars.mly"
                      WhereTyparSupportsNull(_1,lhs(parseState)) 
                   )
# 1567 "..\pars.mly"
                 : 'typeConstraint));
# 6005 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'classMemberSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1569 "..\pars.mly"
                      WhereTyparSupportsMember([ _1 ],_4,lhs(parseState)) 
                   )
# 1569 "..\pars.mly"
                 : 'typeConstraint));
# 6017 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'classMemberSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1571 "..\pars.mly"
                      WhereTyparSupportsMember([ _2 ; _4 ],_8,lhs(parseState)) 
                   )
# 1571 "..\pars.mly"
                 : 'typeConstraint));
# 6030 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1573 "..\pars.mly"
                      WhereTyparIsDelegate(_1,_4,lhs(parseState)) 
                   )
# 1573 "..\pars.mly"
                 : 'typeConstraint));
# 6042 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1575 "..\pars.mly"
                      match _3 with 
                             | "enum" -> WhereTyparIsEnum(_1,_4,lhs(parseState))
                             | nm -> raiseParseErrorAt (rhs parseState 3) ("Unexpected identifier: '"^ nm ^"'") 
                   )
# 1575 "..\pars.mly"
                 : 'typeConstraint));
# 6057 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'barAndgrabXmlDoc)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'attrUnionCaseDecls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1583 "..\pars.mly"
                      _2 _1 
                   )
# 1583 "..\pars.mly"
                 : 'unionRepr));
# 6069 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'firstUnionCaseDeclOfMany)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'barAndgrabXmlDoc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'attrUnionCaseDecls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1585 "..\pars.mly"
                      _1 :: _3 _2 
                   )
# 1585 "..\pars.mly"
                 : 'unionRepr));
# 6082 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'firstUnionCaseDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1587 "..\pars.mly"
                      [_1] 
                   )
# 1587 "..\pars.mly"
                 : 'unionRepr));
# 6093 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1590 "..\pars.mly"
                      grabXmlDoc(parseState,1) 
                   )
# 1590 "..\pars.mly"
                 : 'barAndgrabXmlDoc));
# 6103 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attrUnionCaseDecl)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'barAndgrabXmlDoc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'attrUnionCaseDecls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1593 "..\pars.mly"
                      (fun xmlDoc -> _1 xmlDoc  :: _3 _2) 
                   )
# 1593 "..\pars.mly"
                 : 'attrUnionCaseDecls));
# 6116 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attrUnionCaseDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1594 "..\pars.mly"
                      (fun xmlDoc -> [ _1 xmlDoc ]) 
                   )
# 1594 "..\pars.mly"
                 : 'attrUnionCaseDecls));
# 6127 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionCaseName)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1598 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations are not permitted on union cases. Use 'type U = internal ...' or 'type U = private ...' to give an accessibility to the whole representation",rhs parseState 2));
                             let mDecl = rhs parseState 3 in
                             (fun xmlDoc -> Choice2Of2 (UnionCase ( _1, _3,UnionCaseFields [],xmlDoc,None,mDecl))) 
                           
                   )
# 1598 "..\pars.mly"
                 : 'attrUnionCaseDecl));
# 6144 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionCaseName)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionCaseRepr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1603 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations are not permitted on union cases. Use 'type U = internal ...' or 'type U = private ...' to give an accessibility to the whole representation",rhs parseState 2));
                             let mDecl = rhs2 parseState 3 5 in
                             (fun xmlDoc -> Choice2Of2 (UnionCase ( _1, _3,UnionCaseFields _5,xmlDoc,None,mDecl))) 
                           
                   )
# 1603 "..\pars.mly"
                 : 'attrUnionCaseDecl));
# 6162 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionCaseName)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'topType)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1608 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations are not permitted on union cases. Use 'type U = internal ...' or 'type U = private ...' to give an accessibility to the whole representation",rhs parseState 2));
                             libraryOnlyWarning(lhs(parseState));
                             let mDecl = rhs2 parseState 3 5 in
                             (fun xmlDoc -> Choice2Of2 (UnionCase ( _1, _3,UnionCaseFullType _5,xmlDoc,None,mDecl))) 
                           
                   )
# 1608 "..\pars.mly"
                 : 'attrUnionCaseDecl));
# 6181 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionCaseName)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1614 "..\pars.mly"
                      if isSome _2 then errorR(Error("Visibility declarations are not permitted on enumeration fields",rhs parseState 2));
                             let mDecl = rhs2 parseState 3 5 in
                             (fun xmlDoc -> Choice1Of2 (EnumCase ( _1, _3,_5,xmlDoc,mDecl))) 
                           
                   )
# 1614 "..\pars.mly"
                 : 'attrUnionCaseDecl));
# 6199 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'nameop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1622 "..\pars.mly"
                      _1 
                   )
# 1622 "..\pars.mly"
                 : 'unionCaseName));
# 6210 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1624 "..\pars.mly"
                       MatchPair parseState 1 3; ident(opname_Cons,rhs parseState 2) 
                   )
# 1624 "..\pars.mly"
                 : 'unionCaseName));
# 6220 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1626 "..\pars.mly"
                       MatchPair parseState 1 4; ident(opname_Nil,rhs2 parseState 2 3) 
                   )
# 1626 "..\pars.mly"
                 : 'unionCaseName));
# 6230 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1630 "..\pars.mly"
                      
                             Choice2Of2 (UnionCase ( [], _1,UnionCaseFields [],emptyPreXmlDoc,None,rhs parseState 1)) 
                           
                   )
# 1630 "..\pars.mly"
                 : 'firstUnionCaseDeclOfMany));
# 6244 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1634 "..\pars.mly"
                      
                             Choice1Of2 (EnumCase ([],_1,_3,emptyPreXmlDoc,rhs2 parseState 1 3)) 
                           
                   )
# 1634 "..\pars.mly"
                 : 'firstUnionCaseDeclOfMany));
# 6259 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'firstUnionCaseDecl)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1638 "..\pars.mly"
                      _1 
                   )
# 1638 "..\pars.mly"
                 : 'firstUnionCaseDeclOfMany));
# 6271 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionCaseRepr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1642 "..\pars.mly"
                      
                            Choice2Of2 (UnionCase ( [],_1,UnionCaseFields _3,emptyPreXmlDoc,None,rhs2 parseState 1 3)) 
                         
                   )
# 1642 "..\pars.mly"
                 : 'firstUnionCaseDecl));
# 6285 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1646 "..\pars.mly"
                      
                             Choice1Of2 (EnumCase ([],_1,_3,emptyPreXmlDoc,rhs2 parseState 1 3)) 
                           
                   )
# 1646 "..\pars.mly"
                 : 'firstUnionCaseDecl));
# 6300 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'braceFieldDeclList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1652 "..\pars.mly"
                      errorR(Deprecated("Consider using a separate record type instead",lhs(parseState))); 
                            _1 
                   )
# 1652 "..\pars.mly"
                 : 'unionCaseRepr));
# 6312 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleTypeElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1655 "..\pars.mly"
                      List.map anon_field_of_typ (_1 :: _3) 
                   )
# 1655 "..\pars.mly"
                 : 'unionCaseRepr));
# 6324 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1657 "..\pars.mly"
                      [anon_field_of_typ _1] 
                   )
# 1657 "..\pars.mly"
                 : 'unionCaseRepr));
# 6335 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdFieldDecl)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdFieldDeclList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1661 "..\pars.mly"
                      _1 :: _3 
                   )
# 1661 "..\pars.mly"
                 : 'recdFieldDeclList));
# 6348 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdFieldDecl)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1663 "..\pars.mly"
                      [_1] 
                   )
# 1663 "..\pars.mly"
                 : 'recdFieldDeclList));
# 6360 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fieldDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1667 "..\pars.mly"
                      let fld = _2 _1 false in 
                            let (Field(a,b,c,d,e,f,vis,g)) = fld in 
                            if isSome vis then errorR(Error("Visibility declarations are not permitted on record fields. Use 'type R = internal ...' or 'type R = private ...' to give an accessibility to the whole representation",rhs parseState 2));
                            Field(a,b,c,d,e,f,None,g)  
                   )
# 1667 "..\pars.mly"
                 : 'recdFieldDecl));
# 6375 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_mutable)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'polyType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1674 "..\pars.mly"
                      let rhsm = rhs2 parseState 3 5 in 
                            (fun attrs stat -> Field(attrs, stat,Some _3,_5,_1,grabXmlDoc(parseState,3),_2,rhsm)) 
                   )
# 1674 "..\pars.mly"
                 : 'fieldDecl));
# 6390 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exconCore)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_classDefn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1680 "..\pars.mly"
                      ExconDefn(_1,_2, lhs(parseState)) 
                   )
# 1680 "..\pars.mly"
                 : 'exconDefn));
# 6402 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exconCore)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_classSpfn)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1684 "..\pars.mly"
                      ExconSpfn(_1,_2,lhs(parseState)) 
                   )
# 1684 "..\pars.mly"
                 : 'exconSpfn));
# 6414 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1687 "..\pars.mly"
                      grabXmlDoc(parseState,1) 
                   )
# 1687 "..\pars.mly"
                 : 'exceptionAndGrabDoc));
# 6424 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exceptionAndGrabDoc)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exconIntro)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exconRepr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1691 "..\pars.mly"
                      ExconCore(_2,_4, _5,_1,_3,lhs(parseState)) 
                   )
# 1691 "..\pars.mly"
                 : 'exconCore));
# 6439 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1695 "..\pars.mly"
                      UnionCase ( [], _1,UnionCaseFields [],emptyPreXmlDoc,None,lhs(parseState)) 
                   )
# 1695 "..\pars.mly"
                 : 'exconIntro));
# 6450 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionCaseRepr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1697 "..\pars.mly"
                      UnionCase ( [], _1,UnionCaseFields _3,emptyPreXmlDoc,None,lhs(parseState)) 
                   )
# 1697 "..\pars.mly"
                 : 'exconIntro));
# 6462 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1700 "..\pars.mly"
                      None 
                   )
# 1700 "..\pars.mly"
                 : 'exconRepr));
# 6472 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1701 "..\pars.mly"
                      Some (_2) 
                   )
# 1701 "..\pars.mly"
                 : 'exconRepr));
# 6483 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1704 "..\pars.mly"
                      _2 
                   )
# 1704 "..\pars.mly"
                 : 'openDecl));
# 6494 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_rec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'localBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1708 "..\pars.mly"
                      let letm = rhs parseState 1 in 
                             let isUse,isRec,bindingsPreAttrs = _1,_2,_3 in 
                             (* the first binding swallow any attributes prior to the 'let' *)
                             BindingSetPreAttrs(rhs parseState 1,isRec,isUse,(fun attrs vis -> 
                                 let binds = bindingsPreAttrs attrs vis letm in 
                                             if not isRec && List.length binds > 1 then 
                                                     ocamlCompatWarning "The declaration form 'let ... and ...' for non-recursive bindings is deprecated in F# code. In F# code simply use multiple 'let' bindings" letm; 
                                 [],binds)) 
                   )
# 1708 "..\pars.mly"
                 : 'defnBindings));
# 6514 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cPrototype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1717 "..\pars.mly"
                      BindingSetPreAttrs(lhs(parseState), false,false,_1)  
                   )
# 1717 "..\pars.mly"
                 : 'defnBindings));
# 6525 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1721 "..\pars.mly"
                      let letm = rhs parseState 1 in 
                             let wholem = rhs2 parseState 1 2 in 
                             // any attributes prior to the 'let' are left free, e.g. become top-level attributes 
                             // associated with the module, 'main' function or assembly depending on their target 
                             BindingSetPreAttrs(letm,false,false,(fun attrs vis -> attrs,[mk_Do (vis,true,_2,wholem)])) 
                   )
# 1721 "..\pars.mly"
                 : 'doBinding));
# 6540 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_rec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'localBindings)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteDefnBindingsTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1730 "..\pars.mly"
                      _4 (rhs parseState 1);  (* report unterminated error *)
                             let letm = rhs parseState 1 in 
                             let isUse,isRec,bindingsPreAttrs = _1,_2,_3 in 
                                
                             (* the first binding swallow any attributes prior to the 'let' *)
                             BindingSetPreAttrs(letm,isRec,isUse,(fun attrs vis -> 
                                 let binds = bindingsPreAttrs attrs vis letm in 
                                             if not isRec && List.length binds > 1 then 
                                                     ocamlCompatWarning "The declaration form 'let ... and ...' for non-recursive bindings is deprecated in F# code. In F# code simply use multiple 'let' bindings" letm; 
                                 [],bindingsPreAttrs attrs vis letm)) 
                   )
# 1730 "..\pars.mly"
                 : 'hardwhiteLetBindings));
# 6563 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteDefnBindingsTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1743 "..\pars.mly"
                      _3 (rhs parseState 1);  (* report unterminated error *)
                             let letm = rhs parseState 1 in 
                             let wholem = union_ranges letm (range_of_synexpr _2) in 
                             let seqPt = NoSequencePointAtDoBinding in 
                             // any attributes prior to the 'let' are left free, e.g. become top-level attributes 
                             // associated with the module, 'main' function or assembly depending on their target 
                             BindingSetPreAttrs(letm,false,false,(fun attrs vis -> attrs,[mk_Do (vis,true,_2,wholem)])), _2 
                   )
# 1743 "..\pars.mly"
                 : 'hardwhiteDoBinding));
# 6581 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'defnBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1752 "..\pars.mly"
                      _1 
                   )
# 1752 "..\pars.mly"
                 : 'classDefnBindings));
# 6592 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'doBinding)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1753 "..\pars.mly"
                      _1 
                   )
# 1753 "..\pars.mly"
                 : 'classDefnBindings));
# 6603 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteLetBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1754 "..\pars.mly"
                      _1 
                   )
# 1754 "..\pars.mly"
                 : 'classDefnBindings));
# 6614 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteDoBinding)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1755 "..\pars.mly"
                      fst _1 
                   )
# 1755 "..\pars.mly"
                 : 'classDefnBindings));
# 6625 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1760 "..\pars.mly"
                      (fun m -> ()) 
                   )
# 1760 "..\pars.mly"
                 : 'hardwhiteDefnBindingsTerminator));
# 6635 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1762 "..\pars.mly"
                      (fun m -> reportParseErrorAt m "unmatched 'let' or 'do'") 
                   )
# 1762 "..\pars.mly"
                 : 'hardwhiteDefnBindingsTerminator));
# 6646 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cRetType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_access)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'cArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1766 "..\pars.mly"
                      let rty,vis,nm,args  = _2,_3,_4,_7 in 
                             let xmlDoc = grabXmlDoc(parseState,1) in 
                             let nmm = rhs parseState 3 in 
                             let argsm = rhs parseState 6 in 
                             let bindm = lhs(parseState) in
                             let wholem = lhs(parseState) in
                             let rhsm = lhs(parseState) in 
                             let rhsExpr = Expr_app(ExprAtomicFlag.NonAtomic, Expr_id_get(ident("failwith",rhsm)),Expr_const(Const_string("extern was not given a DllImport attribute",rhsm),rhsm),rhsm) in
                             (fun attrs vis -> 
                                 let binding = mksyn_binding (xmlDoc,Pat_lid ([nm],Some(noInferredTypars),[Pat_tuple(args,argsm)],vis,nmm)) (vis,false,false,bindm,NoSequencePointAtInvisibleBinding,wholem,Some(rty),rhsExpr,rhsm,[],attrs,None) in
                                 [], [binding]) 
                   )
# 1766 "..\pars.mly"
                 : 'cPrototype));
# 6671 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cMoreArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1780 "..\pars.mly"
                      List.rev _1 
                   )
# 1780 "..\pars.mly"
                 : 'cArgs));
# 6682 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cArg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1782 "..\pars.mly"
                      [_1] 
                   )
# 1782 "..\pars.mly"
                 : 'cArgs));
# 6693 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1784 "..\pars.mly"
                      [] 
                   )
# 1784 "..\pars.mly"
                 : 'cArgs));
# 6703 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cMoreArgs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cArg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1788 "..\pars.mly"
                      _3 :: _1 
                   )
# 1788 "..\pars.mly"
                 : 'cMoreArgs));
# 6715 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cArg)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cArg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1790 "..\pars.mly"
                      [_3; _1] 
                   )
# 1790 "..\pars.mly"
                 : 'cMoreArgs));
# 6727 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1794 "..\pars.mly"
                      let m = lhs(parseState) in Pat_typed(Pat_wild m,_2,m) |> addAttribs _1 
                   )
# 1794 "..\pars.mly"
                 : 'cArg));
# 6739 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1796 "..\pars.mly"
                      let m = lhs(parseState) in Pat_typed(Pat_as (Pat_wild m,_3,false,None,m),_2,m) |> addAttribs _1 
                   )
# 1796 "..\pars.mly"
                 : 'cArg));
# 6752 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1800 "..\pars.mly"
                      let m = lhs(parseState) in 
                            Type_app(Type_lid(_1,m),[],false,m) 
                   )
# 1800 "..\pars.mly"
                 : 'cType));
# 6764 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cType)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1804 "..\pars.mly"
                      let m = lhs(parseState) in 
                            Type_app(Type_lid([ident("[]",m)],m),[_1],true,m) 
                   )
# 1804 "..\pars.mly"
                 : 'cType));
# 6777 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1808 "..\pars.mly"
                      let m = lhs(parseState) in 
                            Type_app(Type_lid([ident("nativeptr",m)],m),[_1],true,m) 
                   )
# 1808 "..\pars.mly"
                 : 'cType));
# 6789 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1812 "..\pars.mly"
                      let m = lhs(parseState) in 
                            Type_app(Type_lid([ident("byref",m)],m),[_1],true,m) 
                   )
# 1812 "..\pars.mly"
                 : 'cType));
# 6801 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1816 "..\pars.mly"
                      let m = lhs(parseState) in 
                            Type_app(Type_lid([ident("nativeint",m)],m),[],true,m) 
                   )
# 1816 "..\pars.mly"
                 : 'cType));
# 6812 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1821 "..\pars.mly"
                      (_2,ArgSynInfo(_1,false,None)),rhs parseState 2 
                   )
# 1821 "..\pars.mly"
                 : 'cRetType));
# 6824 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1823 "..\pars.mly"
                      let m = rhs parseState 2 in 
                            (Type_app(Type_lid([ident("unit",m)],m),[],false,m),ArgSynInfo(_1,false,None)),m 
                   )
# 1823 "..\pars.mly"
                 : 'cRetType));
# 6836 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attr_localBinding)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'more_localBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1829 "..\pars.mly"
                      (fun attrs vis letm -> 
                                match _1 with 
                                | Some f -> (f attrs vis letm true ::  _2) 
                                | None -> _2) 
                   )
# 1829 "..\pars.mly"
                 : 'localBindings));
# 6851 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'attr_localBinding)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'more_localBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1836 "..\pars.mly"
                      let letm = (rhs parseState 1) in
                             (match _2 with 
                              | Some f -> f [] None letm false :: _3 
                              | None -> _3) 
                   )
# 1836 "..\pars.mly"
                 : 'more_localBindings));
# 6866 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1841 "..\pars.mly"
                      [] 
                   )
# 1841 "..\pars.mly"
                 : 'more_localBindings));
# 6876 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1845 "..\pars.mly"
                      let m = union_ranges (rhs parseState 1) (range_of_synexpr _2) in 
                             Some(fun attrs vis _ isFirst -> 
                               deprecatedWithError "The declaration form 'let do ...' and 'and do ...' has been removed from the F# language" m;
                               mk_Do (vis,true,_2,m)) 
                   )
# 1845 "..\pars.mly"
                 : 'attr_localBinding));
# 6890 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'localBinding)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1850 "..\pars.mly"
                      Some(fun attrs vis letm _ -> 
                               _2 (attrs@_1) vis letm) 
                   )
# 1850 "..\pars.mly"
                 : 'attr_localBinding));
# 6903 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1853 "..\pars.mly"
                      None 
                   )
# 1853 "..\pars.mly"
                 : 'attr_localBinding));
# 6913 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inline)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_mutable)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bindingPattern)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_topReturnTypeWithTypeConstraints)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedExprWithStaticOptimizationsBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1857 "..\pars.mly"
                      let expr,opts = _6 in
                             let eqm = rhs parseState 5 in 
                             let rhsm = range_of_synexpr expr in 
                             let optReturnType = _4 in 
                             let bindingBuilder,bindm = _3 in 
                             (fun attrs vis letm -> 
                                 let wholem = union_ranges letm rhsm in
                                 let spBind = if IsControlFlowExpression expr then NoSequencePointAtLetBinding else SequencePointAtBinding(wholem) in
                                 bindingBuilder (vis,_1,_2,bindm,spBind,wholem,optReturnType,expr,rhsm,opts,attrs,None)) 
                   )
# 1857 "..\pars.mly"
                 : 'localBinding));
# 6936 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inline)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_mutable)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bindingPattern)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_topReturnTypeWithTypeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1867 "..\pars.mly"
                      let wholem = rhs2 parseState 3 5 in 
                             let rhsm = rhs parseState 5 in
                             let optReturnType = _4 in 
                             let bindingBuilder,bindm = _3 in 
                             (fun attrs vis letm -> 
                                 let spBind = SequencePointAtBinding(union_ranges letm rhsm) in
                                 bindingBuilder (vis,_1,_2,bindm,spBind,wholem,optReturnType,arbExpr(parseState),rhsm,[],attrs,None))  
                   )
# 1867 "..\pars.mly"
                 : 'localBinding));
# 6956 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedExprWithStaticOptimizations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1877 "..\pars.mly"
                      _2 
                   )
# 1877 "..\pars.mly"
                 : 'typedExprWithStaticOptimizationsBlock));
# 6967 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedExprWithStaticOptimizations)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1878 "..\pars.mly"
                      _2 (* silent recovery *) 
                   )
# 1878 "..\pars.mly"
                 : 'typedExprWithStaticOptimizationsBlock));
# 6979 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedExprWithStaticOptimizations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1879 "..\pars.mly"
                      _1 
                   )
# 1879 "..\pars.mly"
                 : 'typedExprWithStaticOptimizationsBlock));
# 6990 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_staticOptimizations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1882 "..\pars.mly"
                      _1, List.rev _2 
                   )
# 1882 "..\pars.mly"
                 : 'typedExprWithStaticOptimizations));
# 7002 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_staticOptimizations)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'staticOptimization)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1885 "..\pars.mly"
                      _2 :: _1 
                   )
# 1885 "..\pars.mly"
                 : 'opt_staticOptimizations));
# 7014 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1886 "..\pars.mly"
                      [] 
                   )
# 1886 "..\pars.mly"
                 : 'opt_staticOptimizations));
# 7024 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'staticOptimizationConditions)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1889 "..\pars.mly"
                      (_2,_4) 
                   )
# 1889 "..\pars.mly"
                 : 'staticOptimization));
# 7036 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'staticOptimizationConditions)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'staticOptimizationCondition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1892 "..\pars.mly"
                      _3 :: _1 
                   )
# 1892 "..\pars.mly"
                 : 'staticOptimizationConditions));
# 7048 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'staticOptimizationCondition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1893 "..\pars.mly"
                      [_1 ] 
                   )
# 1893 "..\pars.mly"
                 : 'staticOptimizationConditions));
# 7059 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1896 "..\pars.mly"
                      WhenTyparTyconEqualsTycon(_1,_3,lhs(parseState)) 
                   )
# 1896 "..\pars.mly"
                 : 'staticOptimizationCondition));
# 7071 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1897 "..\pars.mly"
                     WhenInlined(rhs parseState 1) 
                   )
# 1897 "..\pars.mly"
                 : 'staticOptimizationCondition));
# 7081 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : sbyte * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1900 "..\pars.mly"
                      if snd _1 then errorR(Error("This number is outside the allowable range for 8-bit signed integers", lhs(parseState)));
                                Const_int8 (fst _1) 
                   )
# 1900 "..\pars.mly"
                 : 'rawconstant));
# 7093 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : byte)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1902 "..\pars.mly"
                      Const_uint8 _1 
                   )
# 1902 "..\pars.mly"
                 : 'rawconstant));
# 7104 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int16 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1903 "..\pars.mly"
                      if snd _1 then errorR(Error("This number is outside the allowable range for 16-bit signed integers", lhs(parseState)));
                                 Const_int16 (fst _1) 
                   )
# 1903 "..\pars.mly"
                 : 'rawconstant));
# 7116 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : uint16)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1905 "..\pars.mly"
                      Const_uint16 _1 
                   )
# 1905 "..\pars.mly"
                 : 'rawconstant));
# 7127 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1906 "..\pars.mly"
                      if snd _1 then errorR(Error("This number is outside the allowable range for 32-bit signed integers", lhs(parseState)));
                                 Const_int32 (fst _1) 
                   )
# 1906 "..\pars.mly"
                 : 'rawconstant));
# 7139 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : uint32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1908 "..\pars.mly"
                      Const_uint32 _1 
                   )
# 1908 "..\pars.mly"
                 : 'rawconstant));
# 7150 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int64 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1909 "..\pars.mly"
                      if snd _1 then errorR(Error("This number is outside the allowable range for 64-bit signed integers", lhs(parseState)));
                                 Const_int64 (fst _1) 
                   )
# 1909 "..\pars.mly"
                 : 'rawconstant));
# 7162 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1911 "..\pars.mly"
                      Const_uint64 _1 
                   )
# 1911 "..\pars.mly"
                 : 'rawconstant));
# 7173 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1912 "..\pars.mly"
                      Const_nativeint _1 
                   )
# 1912 "..\pars.mly"
                 : 'rawconstant));
# 7184 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1913 "..\pars.mly"
                      Const_unativeint _1 
                   )
# 1913 "..\pars.mly"
                 : 'rawconstant));
# 7195 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : single)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1914 "..\pars.mly"
                      Const_float32 _1 
                   )
# 1914 "..\pars.mly"
                 : 'rawconstant));
# 7206 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1915 "..\pars.mly"
                      Const_float _1 
                   )
# 1915 "..\pars.mly"
                 : 'rawconstant));
# 7217 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1916 "..\pars.mly"
                      Const_char _1 
                   )
# 1916 "..\pars.mly"
                 : 'rawconstant));
# 7228 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Decimal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1917 "..\pars.mly"
                      Const_decimal _1 
                   )
# 1917 "..\pars.mly"
                 : 'rawconstant));
# 7239 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1918 "..\pars.mly"
                      Const_bignum _1 
                   )
# 1918 "..\pars.mly"
                 : 'rawconstant));
# 7250 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1919 "..\pars.mly"
                      Const_string (_1,lhs(parseState)) 
                   )
# 1919 "..\pars.mly"
                 : 'rawconstant));
# 7261 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : byte[])) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1920 "..\pars.mly"
                      Const_bytearray (_1,lhs(parseState)) 
                   )
# 1920 "..\pars.mly"
                 : 'rawconstant));
# 7272 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rawconstant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1923 "..\pars.mly"
                      _1 
                   )
# 1923 "..\pars.mly"
                 : 'constant));
# 7283 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rawconstant)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'measurearg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1924 "..\pars.mly"
                      Const_measure(_1, _3) 
                   )
# 1924 "..\pars.mly"
                 : 'constant));
# 7295 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1928 "..\pars.mly"
                       let xmlDoc = grabXmlDoc(parseState,1) in
                              mksyn_binding (xmlDoc,_1), rhs parseState 1 
                   )
# 1928 "..\pars.mly"
                 : 'bindingPattern));
# 7307 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1934 "..\pars.mly"
                      SPat_as (_1,false,false,false,rhs parseState 1) 
                   )
# 1934 "..\pars.mly"
                 : 'simplePattern));
# 7318 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1936 "..\pars.mly"
                      SPat_as (_2,false,false,true,rhs parseState 2) 
                   )
# 1936 "..\pars.mly"
                 : 'simplePattern));
# 7329 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simplePattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeWithTypeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1938 "..\pars.mly"
                      let lhsm = lhs(parseState) in 
                             SPat_typed(_1,_3,lhsm) 
                   )
# 1938 "..\pars.mly"
                 : 'simplePattern));
# 7342 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simplePattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1941 "..\pars.mly"
                      let lhsm = lhs(parseState)  in
                             SPat_attrib(_2,_1,lhsm) 
                   )
# 1941 "..\pars.mly"
                 : 'simplePattern));
# 7355 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simplePattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1945 "..\pars.mly"
                      [_1] 
                   )
# 1945 "..\pars.mly"
                 : 'simplePatternCommaList));
# 7366 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simplePattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'simplePatternCommaList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1946 "..\pars.mly"
                      _1 :: _3 
                   )
# 1946 "..\pars.mly"
                 : 'simplePatternCommaList));
# 7378 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simplePatternCommaList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1949 "..\pars.mly"
                      _2 
                   )
# 1949 "..\pars.mly"
                 : 'simplePatterns));
# 7389 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1950 "..\pars.mly"
                      [] 
                   )
# 1950 "..\pars.mly"
                 : 'simplePatterns));
# 7399 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simplePatternCommaList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1951 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched '('"; [] 
                   )
# 1951 "..\pars.mly"
                 : 'simplePatterns));
# 7411 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1952 "..\pars.mly"
                      (* silent recovery *) [] 
                   )
# 1952 "..\pars.mly"
                 : 'simplePatterns));
# 7421 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1953 "..\pars.mly"
                       reportParseErrorAt (rhs parseState 1) "unmatched '('"; [] 
                   )
# 1953 "..\pars.mly"
                 : 'simplePatterns));
# 7432 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1958 "..\pars.mly"
                      Pat_as (_1,_3,false,None,rhs2 parseState 1 3) 
                   )
# 1958 "..\pars.mly"
                 : Ast.SynPat));
# 7444 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1960 "..\pars.mly"
                      Pat_disj(_1,_3,rhs2 parseState 1 3) 
                   )
# 1960 "..\pars.mly"
                 : Ast.SynPat));
# 7456 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1962 "..\pars.mly"
                      Pat_lid (mksyn_constr (rhs parseState 2) opname_Cons, None,[Pat_tuple ([_1;_3],rhs2 parseState 1 3)],None,lhs(parseState)) 
                   )
# 1962 "..\pars.mly"
                 : Ast.SynPat));
# 7468 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tuplePatternElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1964 "..\pars.mly"
                      Pat_tuple(List.rev _1, lhs(parseState)) 
                   )
# 1964 "..\pars.mly"
                 : Ast.SynPat));
# 7479 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conjPatternElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1966 "..\pars.mly"
                      Pat_conjs(List.rev _1, lhs(parseState)) 
                   )
# 1966 "..\pars.mly"
                 : Ast.SynPat));
# 7490 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constrPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1968 "..\pars.mly"
                      _1 
                   )
# 1968 "..\pars.mly"
                 : Ast.SynPat));
# 7501 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tuplePatternElements)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1971 "..\pars.mly"
                      _3 :: _1 
                   )
# 1971 "..\pars.mly"
                 : 'tuplePatternElements));
# 7513 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1972 "..\pars.mly"
                      _3 :: _1 :: [] 
                   )
# 1972 "..\pars.mly"
                 : 'tuplePatternElements));
# 7525 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conjPatternElements)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1975 "..\pars.mly"
                      _3 :: _1 
                   )
# 1975 "..\pars.mly"
                 : 'conjPatternElements));
# 7537 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1976 "..\pars.mly"
                      _3 :: _1 :: [] 
                   )
# 1976 "..\pars.mly"
                 : 'conjPatternElements));
# 7549 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatternLongIdent)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'explicitValTyparDecls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1979 "..\pars.mly"
                      let vis,lid = _1 in Pat_lid (lid,Some _2,[],vis,lhs(parseState)) 
                   )
# 1979 "..\pars.mly"
                 : 'constrPattern));
# 7561 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatternLongIdent)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_explicitValTyparDecls2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatterns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1980 "..\pars.mly"
                      let vis,lid = _1 in Pat_lid (lid,_2,_3,vis,lhs(parseState)) 
                   )
# 1980 "..\pars.mly"
                 : 'constrPattern));
# 7574 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatternLongIdent)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_explicitValTyparDecls2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatterns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1981 "..\pars.mly"
                      let vis,lid = _1 in Pat_lid (lid,_2,_4,vis,lhs(parseState)) 
                   )
# 1981 "..\pars.mly"
                 : 'constrPattern));
# 7587 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1982 "..\pars.mly"
                      Pat_isinst(_2,lhs(parseState)) 
                   )
# 1982 "..\pars.mly"
                 : 'constrPattern));
# 7598 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1983 "..\pars.mly"
                      _1 
                   )
# 1983 "..\pars.mly"
                 : 'constrPattern));
# 7609 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatterns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1986 "..\pars.mly"
                      _1 :: _2 
                   )
# 1986 "..\pars.mly"
                 : 'atomicPatterns));
# 7621 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatterns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1988 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "Successive patterns should be separated by spaces or tupled";
                             _1 :: _3 
                   )
# 1988 "..\pars.mly"
                 : 'atomicPatterns));
# 7634 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1990 "..\pars.mly"
                      [_1] 
                   )
# 1990 "..\pars.mly"
                 : 'atomicPatterns));
# 7645 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'quoteExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1995 "..\pars.mly"
                      Pat_expr(_1,lhs(parseState)) 
                   )
# 1995 "..\pars.mly"
                 : 'atomicPattern));
# 7656 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1996 "..\pars.mly"
                      Pat_range (_1,_3,rhs2 parseState 1 3) 
                   )
# 1996 "..\pars.mly"
                 : 'atomicPattern));
# 7668 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordPatternElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1998 "..\pars.mly"
                      _2 
                   )
# 1998 "..\pars.mly"
                 : 'atomicPattern));
# 7679 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'listPatternElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2000 "..\pars.mly"
                      MatchPair parseState 1 3; Pat_array_or_list(false,_2,lhs(parseState)) 
                   )
# 2000 "..\pars.mly"
                 : 'atomicPattern));
# 7690 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'listPatternElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2002 "..\pars.mly"
                      MatchPair parseState 1 3; Pat_array_or_list(true,_2, lhs(parseState)) 
                   )
# 2002 "..\pars.mly"
                 : 'atomicPattern));
# 7701 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2003 "..\pars.mly"
                      Pat_wild (lhs(parseState)) 
                   )
# 2003 "..\pars.mly"
                 : 'atomicPattern));
# 7711 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2004 "..\pars.mly"
                      Pat_opt_var(_2,lhs(parseState)) 
                   )
# 2004 "..\pars.mly"
                 : 'atomicPattern));
# 7722 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatternLongIdent)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2006 "..\pars.mly"
                      let vis,lid = _1 in 
                             if List.length lid > 1 || (let c = (List.hd lid).idText.[0] in Char.IsUpper(c) && not (Char.IsLower c)) 
                             then mksyn_pat_maybe_var lid vis (lhs(parseState))
                             else mksyn_pat_var vis (List.hd lid) 
                   )
# 2006 "..\pars.mly"
                 : 'atomicPattern));
# 7736 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2010 "..\pars.mly"
                      Pat_const (_1,range_of_synconst _1 (lhs(parseState))) 
                   )
# 2010 "..\pars.mly"
                 : 'atomicPattern));
# 7747 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2011 "..\pars.mly"
                      Pat_const(Const_bool false,lhs(parseState)) 
                   )
# 2011 "..\pars.mly"
                 : 'atomicPattern));
# 7757 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2012 "..\pars.mly"
                      Pat_const(Const_bool true,lhs(parseState)) 
                   )
# 2012 "..\pars.mly"
                 : 'atomicPattern));
# 7767 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2013 "..\pars.mly"
                      Pat_null(lhs(parseState)) 
                   )
# 2013 "..\pars.mly"
                 : 'atomicPattern));
# 7777 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPatternBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2014 "..\pars.mly"
                       MatchPair parseState 1 3; let m = (lhs(parseState)) in Pat_paren(_2 m,m) 
                   )
# 2014 "..\pars.mly"
                 : 'atomicPattern));
# 7788 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPatternBody)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2015 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched '('"; _2 (rhs2 parseState 1 2) 
                   )
# 2015 "..\pars.mly"
                 : 'atomicPattern));
# 7800 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2016 "..\pars.mly"
                      (* silent recovery *) Pat_wild (lhs(parseState)) 
                   )
# 2016 "..\pars.mly"
                 : 'atomicPattern));
# 7810 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2017 "..\pars.mly"
                       reportParseErrorAt (rhs parseState 1) "unmatched '('"; Pat_wild (lhs(parseState))
                   )
# 2017 "..\pars.mly"
                 : 'atomicPattern));
# 7821 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2023 "..\pars.mly"
                      (fun m -> _1) 
                   )
# 2023 "..\pars.mly"
                 : 'parenPatternBody));
# 7832 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2025 "..\pars.mly"
                      (fun m -> Pat_const(Const_unit,m)) 
                   )
# 2025 "..\pars.mly"
                 : 'parenPatternBody));
# 7842 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2054 "..\pars.mly"
                      Pat_as (_1,_3,false,None,rhs2 parseState 1 3) 
                   )
# 2054 "..\pars.mly"
                 : 'parenPattern));
# 7854 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2056 "..\pars.mly"
                      Pat_disj(_1,_3,rhs2 parseState 1 3) 
                   )
# 2056 "..\pars.mly"
                 : 'parenPattern));
# 7866 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleParenPatternElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2058 "..\pars.mly"
                      Pat_tuple(List.rev _1,lhs(parseState)) 
                   )
# 2058 "..\pars.mly"
                 : 'parenPattern));
# 7877 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conjParenPatternElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2060 "..\pars.mly"
                      Pat_conjs(List.rev _1,rhs2 parseState 1 3) 
                   )
# 2060 "..\pars.mly"
                 : 'parenPattern));
# 7888 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeWithTypeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2062 "..\pars.mly"
                      let lhsm = lhs(parseState) in 
                             Pat_typed(_1,_3,lhsm) 
                   )
# 2062 "..\pars.mly"
                 : 'parenPattern));
# 7901 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2065 "..\pars.mly"
                      let lhsm = lhs(parseState)  in
                             Pat_attrib(_2,_1,lhsm) 
                   )
# 2065 "..\pars.mly"
                 : 'parenPattern));
# 7914 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2068 "..\pars.mly"
                      Pat_lid (mksyn_constr (rhs parseState 2) opname_Cons, None, [ Pat_tuple ([_1;_3],rhs2 parseState 1 3) ],None,lhs(parseState)) 
                   )
# 2068 "..\pars.mly"
                 : 'parenPattern));
# 7926 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2070 "..\pars.mly"
                      let lhsm = lhs(parseState) in 
                             deprecatedWithError "Patterns of the form 'pat :> type' have been removed from the F# language. Consider using just 'pat : type' instead" lhsm;
                             Pat_typed(_1, mksyn_anon_constraint _3 lhsm,lhsm) 
                   )
# 2070 "..\pars.mly"
                 : 'parenPattern));
# 7940 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constrPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2073 "..\pars.mly"
                      _1 
                   )
# 2073 "..\pars.mly"
                 : 'parenPattern));
# 7951 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleParenPatternElements)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2076 "..\pars.mly"
                      _3 :: _1 
                   )
# 2076 "..\pars.mly"
                 : 'tupleParenPatternElements));
# 7963 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2077 "..\pars.mly"
                      _3 :: _1 :: [] 
                   )
# 2077 "..\pars.mly"
                 : 'tupleParenPatternElements));
# 7975 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conjParenPatternElements)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2080 "..\pars.mly"
                      _3 :: _1 
                   )
# 2080 "..\pars.mly"
                 : 'conjParenPatternElements));
# 7987 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2081 "..\pars.mly"
                      _3 :: _1 :: [] 
                   )
# 2081 "..\pars.mly"
                 : 'conjParenPatternElements));
# 7999 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordPatternElementsAux)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2084 "..\pars.mly"
                      let rs,m = _1 in Pat_recd (rs,m) 
                   )
# 2084 "..\pars.mly"
                 : 'recordPatternElements));
# 8010 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordPatternElement)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2087 "..\pars.mly"
                      [_1],lhs(parseState) 
                   )
# 2087 "..\pars.mly"
                 : 'recordPatternElementsAux));
# 8022 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordPatternElement)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordPatternElementsAux)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2088 "..\pars.mly"
                      let r = _1 in let (rs,dropMark) = _3 in (r :: rs),lhs(parseState) 
                   )
# 2088 "..\pars.mly"
                 : 'recordPatternElementsAux));
# 8035 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2091 "..\pars.mly"
                      (List.frontAndBack _1,_3) 
                   )
# 2091 "..\pars.mly"
                 : 'recordPatternElement));
# 8047 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2094 "..\pars.mly"
                      [] 
                   )
# 2094 "..\pars.mly"
                 : 'listPatternElements));
# 8057 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2095 "..\pars.mly"
                      [_1] 
                   )
# 2095 "..\pars.mly"
                 : 'listPatternElements));
# 8069 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'listPatternElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2096 "..\pars.mly"
                      _1 :: _3 
                   )
# 2096 "..\pars.mly"
                 : 'listPatternElements));
# 8082 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2100 "..\pars.mly"
                      _2 
                   )
# 2100 "..\pars.mly"
                 : 'typedSeqExprBlock));
# 8093 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2101 "..\pars.mly"
                      _2 
                   )
# 2101 "..\pars.mly"
                 : 'typedSeqExprBlock));
# 8105 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2102 "..\pars.mly"
                      _1 
                   )
# 2102 "..\pars.mly"
                 : 'typedSeqExprBlock));
# 8116 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2106 "..\pars.mly"
                      _2 
                   )
# 2106 "..\pars.mly"
                 : 'declExprBlock));
# 8127 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2107 "..\pars.mly"
                      _1 
                   )
# 2107 "..\pars.mly"
                 : 'declExprBlock));
# 8138 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2112 "..\pars.mly"
                      _1 
                   )
# 2112 "..\pars.mly"
                 : 'typedSeqExprBlockR));
# 8149 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2113 "..\pars.mly"
                      _1 
                   )
# 2113 "..\pars.mly"
                 : 'typedSeqExprBlockR));
# 8160 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeWithTypeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2116 "..\pars.mly"
                      Expr_typed (_1,_3, union_ranges (range_of_synexpr _1) (range_of_syntype _3)) 
                   )
# 2116 "..\pars.mly"
                 : 'typedSeqExpr));
# 8172 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2117 "..\pars.mly"
                      Expr_isinst(_1,_3, union_ranges (range_of_synexpr _1) (range_of_syntype _3)) 
                   )
# 2117 "..\pars.mly"
                 : 'typedSeqExpr));
# 8184 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2118 "..\pars.mly"
                      Expr_upcast(_1,_3, union_ranges (range_of_synexpr _1) (range_of_syntype _3)) 
                   )
# 2118 "..\pars.mly"
                 : 'typedSeqExpr));
# 8196 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2119 "..\pars.mly"
                      Expr_downcast(_1,_3, union_ranges (range_of_synexpr _1) (range_of_syntype _3)) 
                   )
# 2119 "..\pars.mly"
                 : 'typedSeqExpr));
# 8208 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2120 "..\pars.mly"
                      _1 
                   )
# 2120 "..\pars.mly"
                 : 'typedSeqExpr));
# 8219 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2123 "..\pars.mly"
                      Expr_seq(SequencePointsAtSeq,true,_1,_3,union_ranges (range_of_synexpr _1) (range_of_synexpr _3)) 
                   )
# 2123 "..\pars.mly"
                 : 'seqExpr));
# 8232 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2124 "..\pars.mly"
                      _1 
                   )
# 2124 "..\pars.mly"
                 : 'seqExpr));
# 8244 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2125 "..\pars.mly"
                      _1 
                   )
# 2125 "..\pars.mly"
                 : 'seqExpr));
# 8255 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2126 "..\pars.mly"
                      Expr_seq(SequencePointsAtSeq,false,_1,_3,union_ranges (range_of_synexpr _1) (range_of_synexpr _3) ) 
                   )
# 2126 "..\pars.mly"
                 : 'seqExpr));
# 8267 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2127 "..\pars.mly"
                      Expr_seq(SequencePointsAtSeq,false,_1,_4,union_ranges (range_of_synexpr _1) (range_of_synexpr _4)) 
                   )
# 2127 "..\pars.mly"
                 : 'seqExpr));
# 8279 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2133 "..\pars.mly"
                      
                   )
# 2133 "..\pars.mly"
                 : 'recover));
# 8289 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.lexcont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2134 "..\pars.mly"
                      
                   )
# 2134 "..\pars.mly"
                 : 'recover));
# 8300 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'defnBindings)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2138 "..\pars.mly"
                      mkLocalBindings (rhs2 parseState 1 3,_1,_3) 
                   )
# 2138 "..\pars.mly"
                 : Ast.SynExpr));
# 8312 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'defnBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2140 "..\pars.mly"
                      mkLocalBindings (rhs2 parseState 1 2,_1,arbExpr(parseState)) 
                   )
# 2140 "..\pars.mly"
                 : Ast.SynExpr));
# 8323 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'defnBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2142 "..\pars.mly"
                      reportParseErrorAt (match _1 with (BindingSetPreAttrs(m,_,_,_))  -> m) "no matching 'in' found for this 'let'";
                           mkLocalBindings (rhs parseState 1,_1,arbExpr(parseState)) 
                   )
# 2142 "..\pars.mly"
                 : Ast.SynExpr));
# 8335 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteLetBindings)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2146 "..\pars.mly"
                      mkLocalBindings (union_ranges (rhs parseState 1) (range_of_synexpr _2),_1,_2) 
                   )
# 2146 "..\pars.mly"
                 : Ast.SynExpr));
# 8347 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteLetBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2148 "..\pars.mly"
                      reportParseErrorAt (match _1 with (BindingSetPreAttrs(m,_,_,_))  -> m) "error in the return expression for this 'let'. Possible incorrect indentation";
                            mkLocalBindings (rhs2 parseState 1 2,_1,arbExpr(parseState)) 
                   )
# 2148 "..\pars.mly"
                 : Ast.SynExpr));
# 8359 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteLetBindings)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2151 "..\pars.mly"
                      mkLocalBindings (union_ranges (rhs2 parseState 1 2) (range_of_synexpr _3) ,_1,_3) 
                   )
# 2151 "..\pars.mly"
                 : Ast.SynExpr));
# 8371 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteLetBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2153 "..\pars.mly"
                      //reportParseErrorAt (match _1 with (BindingSetPreAttrs(m,_,_,_))  -> m) "error in the return expression for this 'let'. Possible incorrect indentation";
                            mkLocalBindings (rhs2 parseState 1 2,_1,arbExpr(parseState)) 
                   )
# 2153 "..\pars.mly"
                 : Ast.SynExpr));
# 8383 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteDoBinding)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2157 "..\pars.mly"
                      let e = snd _1 in
                            Expr_do(e,range_of_synexpr e) 
                   )
# 2157 "..\pars.mly"
                 : Ast.SynExpr));
# 8395 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'anonMatchingExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2161 "..\pars.mly"
                      _1 
                   )
# 2161 "..\pars.mly"
                 : Ast.SynExpr));
# 8406 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'anonLambdaExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2162 "..\pars.mly"
                      _1 
                   )
# 2162 "..\pars.mly"
                 : Ast.SynExpr));
# 8417 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'withClauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2165 "..\pars.mly"
                      let mMatch = (rhs parseState 1) in
                             let mWith,(clauses,mLast) = _3 in 
                             let spBind = SequencePointAtBinding(union_ranges mMatch mWith) in 
                             Expr_match(spBind, _2,clauses,false,union_ranges mMatch mLast) 
                   )
# 2165 "..\pars.mly"
                 : Ast.SynExpr));
# 8432 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2171 "..\pars.mly"
                      (* Produce approximate expression during error recovery *)
                             Expr_throwaway(_2,rhs2 parseState 1 2) 
                   )
# 2171 "..\pars.mly"
                 : Ast.SynExpr));
# 8445 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlockR)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'withClauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2175 "..\pars.mly"
                      let mTry = (rhs parseState 1) in
                             let spTry = SequencePointAtTry(mTry) in 
                             let mWith,(clauses,mLast) = _3 in 
                             let spWith = SequencePointAtWith(mWith) in 
                             let mTryToWith = union_ranges mTry mWith in 
                             let mWithToLast = union_ranges mWith mLast in 
                             let mTryToLast = union_ranges mTry mLast in
                             Expr_try_catch(_2, mTryToWith, clauses,mWithToLast, mTryToLast,spTry,spWith) 
                   )
# 2175 "..\pars.mly"
                 : Ast.SynExpr));
# 8464 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlockR)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2185 "..\pars.mly"
                      (* Produce approximate expression during error recovery *)
                             (* Include any expressions to make sure they gets type checked in case that generates useful results for intellisense *)
                             _2 
                   )
# 2185 "..\pars.mly"
                 : Ast.SynExpr));
# 8478 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlockR)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2190 "..\pars.mly"
                      let mTry = rhs parseState 1 in 
                             let spTry = SequencePointAtTry(mTry) in 
                             let spFinally = SequencePointAtFinally(rhs parseState 3) in 
                             let mTryToLast = union_ranges mTry (range_of_synexpr _4) in 
                             Expr_try_finally(_2, _4,mTryToLast,spTry,spFinally) 
                   )
# 2190 "..\pars.mly"
                 : Ast.SynExpr));
# 8494 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ifExprCases)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2197 "..\pars.mly"
                      let mIf = (rhs parseState 1) in
                             _3 _2 mIf 
                   )
# 2197 "..\pars.mly"
                 : Ast.SynExpr));
# 8507 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2201 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched 'if'"; 
                             (* Produce an approximate expression during error recovery. *)
                             (* Include expressions to make sure they get type checked in case that generates useful results for intellisense. *)
                             (* Generate a throwAway for the expression so it isn't forced to have a type 'bool' *)
                             (* from the context it is used in. *)
                             Expr_throwaway(_2, rhs2 parseState 1 2) 
                   )
# 2201 "..\pars.mly"
                 : Ast.SynExpr));
# 8524 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2209 "..\pars.mly"
                      arbExpr parseState 
                   )
# 2209 "..\pars.mly"
                 : Ast.SynExpr));
# 8535 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2212 "..\pars.mly"
                      Expr_lazy(_2,union_ranges (rhs parseState 1) (range_of_synexpr _2)) 
                   )
# 2212 "..\pars.mly"
                 : Ast.SynExpr));
# 8546 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2214 "..\pars.mly"
                      Expr_assert(_2, union_ranges (rhs parseState 1) (range_of_synexpr _2)) 
                   )
# 2214 "..\pars.mly"
                 : Ast.SynExpr));
# 8557 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2215 "..\pars.mly"
                      raiseParseErrorAt (rhs parseState 1) "'assert' may no longer be used as a first class value. Use 'assert <expr>' instead" 
                   )
# 2215 "..\pars.mly"
                 : Ast.SynExpr));
# 8567 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'do_or_odo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'done_term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2218 "..\pars.mly"
                      let mWhile = union_ranges (rhs parseState 1) (range_of_synexpr _2) in
                             let spWhile = SequencePointAtWhileLoop(mWhile) in 
                             Expr_while(spWhile,_2,_4,union_ranges (rhs parseState 1) (range_of_synexpr _4)) 
                   )
# 2218 "..\pars.mly"
                 : Ast.SynExpr));
# 8583 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'do_or_odo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2222 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 4) "'done' expected after this expression" ;  arbExpr(parseState) 
                   )
# 2222 "..\pars.mly"
                 : Ast.SynExpr));
# 8597 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'do_or_odo)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'done_term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2223 "..\pars.mly"
                      (* silent recovery *) arbExpr(parseState) 
                   )
# 2223 "..\pars.mly"
                 : Ast.SynExpr));
# 8610 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2224 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 2) "'do' expected after this expression" ; arbExpr(parseState) 
                   )
# 2224 "..\pars.mly"
                 : Ast.SynExpr));
# 8622 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'done_term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2225 "..\pars.mly"
                      (* silent recovery *) arbExpr(parseState)  
                   )
# 2225 "..\pars.mly"
                 : Ast.SynExpr));
# 8633 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'forLoopBinder)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'do_or_odo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'done_term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2228 "..\pars.mly"
                      let spBind = SequencePointAtForLoop(rhs2 parseState 1 3) in
                             let (a,b) = _2 in Expr_foreach(spBind,SeqExprOnly(false),a,b,_4,union_ranges (rhs parseState 1) (range_of_synexpr _4)) 
                   )
# 2228 "..\pars.mly"
                 : Ast.SynExpr));
# 8648 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'forLoopBinder)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2232 "..\pars.mly"
                      let spBind = SequencePointAtForLoop(rhs2 parseState 1 2) in
                             let (a,b) = _2 in Expr_foreach(spBind,SeqExprOnly(false),a,b,arbExpr(parseState),lhs(parseState)) 
                   )
# 2232 "..\pars.mly"
                 : Ast.SynExpr));
# 8661 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'forLoopBinder)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'do_or_odo)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'done_term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2236 "..\pars.mly"
                      let spBind = SequencePointAtForLoop(rhs2 parseState 1 3) in
                             let (a,b) = _2 in Expr_foreach(spBind,SeqExprOnly(false),a,b,arbExpr(parseState),rhs2 parseState 1 3) 
                   )
# 2236 "..\pars.mly"
                 : Ast.SynExpr));
# 8675 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'forLoopRange)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'do_or_odo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'done_term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2240 "..\pars.mly"
                      let spBind = SequencePointAtForLoop(rhs2 parseState 1 3) in
                             let (a,b,c,d) = _2 in Expr_for(spBind,a,b,c,d,_4,union_ranges (rhs parseState 1) (range_of_synexpr _4)) 
                   )
# 2240 "..\pars.mly"
                 : Ast.SynExpr));
# 8690 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'forLoopRange)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'do_or_odo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2244 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unclosed 'for', e.g. no 'done' found to match this 'for'" ; arbExpr(parseState) 
                   )
# 2244 "..\pars.mly"
                 : Ast.SynExpr));
# 8704 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'forLoopRange)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'do_or_odo)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'done_term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2247 "..\pars.mly"
                      (* silent recovery *) arbExpr(parseState) 
                   )
# 2247 "..\pars.mly"
                 : Ast.SynExpr));
# 8717 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'do_or_odo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'done_term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2250 "..\pars.mly"
                      (* silent recovery *) _4 
                   )
# 2250 "..\pars.mly"
                 : Ast.SynExpr));
# 8730 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'done_term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2265 "..\pars.mly"
                       reportParseErrorAt (rhs parseState 3) "'=' expected"; arbExpr(parseState) 
                   )
# 2265 "..\pars.mly"
                 : Ast.SynExpr));
# 8742 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2269 "..\pars.mly"
                      Comp_yield((_1,not _1),_2, union_ranges (rhs parseState 1) (range_of_synexpr _2)) 
                   )
# 2269 "..\pars.mly"
                 : Ast.SynExpr));
# 8754 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2271 "..\pars.mly"
                      Comp_yieldm((_1,not _1), _2, union_ranges (rhs parseState 1) (range_of_synexpr _2)) 
                   )
# 2271 "..\pars.mly"
                 : Ast.SynExpr));
# 8766 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2274 "..\pars.mly"
                      let spBind = SequencePointAtBinding(rhs2 parseState 1 5) in
                            let m = rhs parseState 1 in
                            Comp_bind(spBind,(_1 = "use"),_2,_4,_7, lhs parseState) 
                   )
# 2274 "..\pars.mly"
                 : Ast.SynExpr));
# 8783 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteDefnBindingsTerminator)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2279 "..\pars.mly"
                      let spBind = SequencePointAtBinding(union_ranges (rhs parseState 1) (range_of_synexpr _4)) in
                            let m = rhs parseState 1 in
                            Comp_bind(spBind,(_1 = "use"),_2,_4,_7, lhs parseState) 
                   )
# 2279 "..\pars.mly"
                 : Ast.SynExpr));
# 8801 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynPat)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteDefnBindingsTerminator)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2284 "..\pars.mly"
                      (* error recovery that allows intellisense when writing incomplete computation expressions *)
                                              let spBind = SequencePointAtBinding(union_ranges (rhs parseState 1) (range_of_synexpr _4)) in
                            let m = rhs parseState 1 in
                            Comp_bind(spBind,(_1 = "use"),_2,_4, (Comp_zero(m)) , lhs parseState) 
                   )
# 2284 "..\pars.mly"
                 : Ast.SynExpr));
# 8819 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2290 "..\pars.mly"
                      let spBind = NoSequencePointAtDoBinding in
                            Comp_bind(spBind,false,Pat_const(Const_unit,range_of_synexpr _2),_2,_5, union_ranges (rhs parseState 1) (range_of_synexpr _5)) 
                   )
# 2290 "..\pars.mly"
                 : Ast.SynExpr));
# 8833 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'hardwhiteDefnBindingsTerminator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2294 "..\pars.mly"
                      Comp_do_bind(_2, union_ranges (rhs parseState 1) (range_of_synexpr _2)) 
                   )
# 2294 "..\pars.mly"
                 : Ast.SynExpr));
# 8845 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'forLoopBinder)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'monadicSingleLineQualifiersThenArrowThenExprR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2297 "..\pars.mly"
                      let spBind = SequencePointAtForLoop(rhs2 parseState 1 2) in
                            let a,b= _2 in Expr_foreach(spBind,SeqExprOnly(true),a,b,_4 (rhs parseState 3),rhs2 parseState 1 3) 
                   )
# 2297 "..\pars.mly"
                 : Ast.SynExpr));
# 8859 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlockR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2301 "..\pars.mly"
                      errorR(Error("The use of '->' in sequence and computation expressions is limited to the form 'for pat in expr -> expr'. Use the syntax 'for ... in ... do ... yield...' to generate elements in more complex sequence expressions",lhs parseState));
                            Comp_yield((true,true),_2, lhs parseState) 
                   )
# 2301 "..\pars.mly"
                 : Ast.SynExpr));
# 8871 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2307 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 ":=" _3 
                   )
# 2307 "..\pars.mly"
                 : Ast.SynExpr));
# 8883 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'declExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2308 "..\pars.mly"
                      mksyn_assign (union_ranges (range_of_synexpr _1) (range_of_synexpr _3)) _1 _3 
                   )
# 2308 "..\pars.mly"
                 : Ast.SynExpr));
# 8895 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2309 "..\pars.mly"
                      Expr_tuple( List.rev _1,lhs(parseState)) 
                   )
# 2309 "..\pars.mly"
                 : Ast.SynExpr));
# 8906 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2310 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 "||" _3 
                   )
# 2310 "..\pars.mly"
                 : Ast.SynExpr));
# 8918 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2311 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 _2 _3 
                   )
# 2311 "..\pars.mly"
                 : Ast.SynExpr));
# 8931 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2312 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 "or" _3 
                   )
# 2312 "..\pars.mly"
                 : Ast.SynExpr));
# 8943 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2313 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 "&" _3 
                   )
# 2313 "..\pars.mly"
                 : Ast.SynExpr));
# 8955 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2314 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 "&&" _3 
                   )
# 2314 "..\pars.mly"
                 : Ast.SynExpr));
# 8967 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2315 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 _2 _3 
                   )
# 2315 "..\pars.mly"
                 : Ast.SynExpr));
# 8980 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2316 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (union_ranges (range_of_synexpr _1) (range_of_synexpr _3)) _1 "=" _3 
                   )
# 2316 "..\pars.mly"
                 : Ast.SynExpr));
# 8992 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2317 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 _2 _3 
                   )
# 2317 "..\pars.mly"
                 : Ast.SynExpr));
# 9005 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2318 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 "$" _3 
                   )
# 2318 "..\pars.mly"
                 : Ast.SynExpr));
# 9017 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2319 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 "<" _3 
                   )
# 2319 "..\pars.mly"
                 : Ast.SynExpr));
# 9029 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2320 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 ">" _3 
                   )
# 2320 "..\pars.mly"
                 : Ast.SynExpr));
# 9041 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2321 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 _2 _3 
                   )
# 2321 "..\pars.mly"
                 : Ast.SynExpr));
# 9054 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2322 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 _2 _3 
                   )
# 2322 "..\pars.mly"
                 : Ast.SynExpr));
# 9067 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2323 "..\pars.mly"
                      Expr_app (ExprAtomicFlag.NonAtomic, mksyn_item (rhs parseState 2) opname_Cons,Expr_tuple ([_1;_3],lhs(parseState)),lhs(parseState)) 
                   )
# 2323 "..\pars.mly"
                 : Ast.SynExpr));
# 9079 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2324 "..\pars.mly"
                      mksyn_infix (rhs parseState 2)  (lhs(parseState)) _1 _2 _3 
                   )
# 2324 "..\pars.mly"
                 : Ast.SynExpr));
# 9092 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2325 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 "-" _3 
                   )
# 2325 "..\pars.mly"
                 : Ast.SynExpr));
# 9104 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2326 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 "*" _3 
                   )
# 2326 "..\pars.mly"
                 : Ast.SynExpr));
# 9116 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2327 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 _2 _3 
                   )
# 2327 "..\pars.mly"
                 : Ast.SynExpr));
# 9129 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2328 "..\pars.mly"
                      mksyn_infix (rhs parseState 2) (lhs(parseState)) _1 _2 _3 
                   )
# 2328 "..\pars.mly"
                 : Ast.SynExpr));
# 9142 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2329 "..\pars.mly"
                      _1 
                   )
# 2329 "..\pars.mly"
                 : Ast.SynExpr));
# 9153 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2333 "..\pars.mly"
                      let con = Const_string (_1,rhs parseState 1) in
                             let arg2 = Expr_const (con,range_of_synconst con (rhs parseState 1))  in
                             arg2 
                   )
# 2333 "..\pars.mly"
                 : 'dynamicArg));
# 9166 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2337 "..\pars.mly"
                      _2 
                   )
# 2337 "..\pars.mly"
                 : 'dynamicArg));
# 9177 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2341 "..\pars.mly"
                      _2 
                   )
# 2341 "..\pars.mly"
                 : 'monadicWhenCondition));
# 9188 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'withPatternClauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2344 "..\pars.mly"
                      rhs parseState 1, _2 
                   )
# 2344 "..\pars.mly"
                 : 'withClauses));
# 9199 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'withPatternClauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2345 "..\pars.mly"
                      rhs parseState 1, _2 
                   )
# 2345 "..\pars.mly"
                 : 'withClauses));
# 9210 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'withPatternClauses)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2346 "..\pars.mly"
                      rhs parseState 1, _2 
                   )
# 2346 "..\pars.mly"
                 : 'withClauses));
# 9222 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternClauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2350 "..\pars.mly"
                      _1 
                   )
# 2350 "..\pars.mly"
                 : 'withPatternClauses));
# 9233 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternClauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2352 "..\pars.mly"
                       _2 
                   )
# 2352 "..\pars.mly"
                 : 'withPatternClauses));
# 9244 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2354 "..\pars.mly"
                       (* silent recovery *)  
                              let mLast = rhs parseState 1 in
                              [], mLast 
                   )
# 2354 "..\pars.mly"
                 : 'withPatternClauses));
# 9256 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2358 "..\pars.mly"
                       (* silent recovery *)  
                              let mLast = rhs parseState 1 in
                              [], mLast 
                   )
# 2358 "..\pars.mly"
                 : 'withPatternClauses));
# 9268 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternGuard)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2365 "..\pars.mly"
                      _1, _2, rhs parseState 1 
                   )
# 2365 "..\pars.mly"
                 : 'patternAndGuard));
# 9280 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternAndGuard)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternResult)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2369 "..\pars.mly"
                      let pat,guard,patm = _1 in 
                            let mLast = range_of_synexpr _2 in 
                            [Clause(pat,guard,_2,patm,SequencePointAtTarget)], mLast  
                   )
# 2369 "..\pars.mly"
                 : 'patternClauses));
# 9294 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternAndGuard)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternResult)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternClauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2373 "..\pars.mly"
                      let pat,guard,patm = _1 in 
                            let clauses,mLast = _4 in 
                            (Clause(pat,guard,_2,patm,SequencePointAtTarget) :: clauses), mLast 
                   )
# 2373 "..\pars.mly"
                 : 'patternClauses));
# 9309 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternAndGuard)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternResult)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2377 "..\pars.mly"
                      let pat,guard,patm = _1 in 
                            let mLast = rhs parseState 3 in 
                            (* silent recovery *)
                            [Clause(pat,guard,_2,patm,SequencePointAtTarget)], mLast  
                   )
# 2377 "..\pars.mly"
                 : 'patternClauses));
# 9324 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternAndGuard)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternResult)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2382 "..\pars.mly"
                      let pat,guard,patm = _1 in 
                            let mLast = range_of_synexpr _2 in 
                            (* silent recovery *)
                            [Clause(pat,guard,_2,patm,SequencePointAtTarget)], mLast 
                   )
# 2382 "..\pars.mly"
                 : 'patternClauses));
# 9339 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2389 "..\pars.mly"
                      Some _2 
                   )
# 2389 "..\pars.mly"
                 : 'patternGuard));
# 9350 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2391 "..\pars.mly"
                      None 
                   )
# 2391 "..\pars.mly"
                 : 'patternGuard));
# 9360 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlockR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2395 "..\pars.mly"
                      _2 
                   )
# 2395 "..\pars.mly"
                 : 'patternResult));
# 9371 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ifExprThen)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ifExprElifs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2399 "..\pars.mly"
                      let exprThen,mThen = _1 in 
                             (fun exprGuard mIf -> 
                                 let mIfToThen = union_ranges mIf mThen in
                                 let mIfToEndOfElseBranch = union_ranges mIf (range_of_synexpr (match _2 with None -> exprThen | Some e -> e)) in
                                 let spIfToThen = SequencePointAtBinding(mIfToThen) in
                                 Expr_cond(exprGuard,exprThen,_2,spIfToThen,mIfToThen,mIfToEndOfElseBranch)) 
                   )
# 2399 "..\pars.mly"
                 : 'ifExprCases));
# 9388 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2407 "..\pars.mly"
                      _2, rhs parseState 1 
                   )
# 2407 "..\pars.mly"
                 : 'ifExprThen));
# 9399 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2408 "..\pars.mly"
                      _3,rhs parseState 1 
                   )
# 2408 "..\pars.mly"
                 : 'ifExprThen));
# 9410 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2409 "..\pars.mly"
                      _3,rhs parseState 1 
                   )
# 2409 "..\pars.mly"
                 : 'ifExprThen));
# 9422 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2413 "..\pars.mly"
                      None 
                   )
# 2413 "..\pars.mly"
                 : 'ifExprElifs));
# 9432 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2415 "..\pars.mly"
                      Some _2 
                   )
# 2415 "..\pars.mly"
                 : 'ifExprElifs));
# 9443 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2417 "..\pars.mly"
                      Some _3 
                   )
# 2417 "..\pars.mly"
                 : 'ifExprElifs));
# 9454 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2419 "..\pars.mly"
                      Some _3 
                   )
# 2419 "..\pars.mly"
                 : 'ifExprElifs));
# 9466 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ifExprCases)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2421 "..\pars.mly"
                      let mElif = rhs parseState 1 in 
                             Some (_3 _2 mElif) 
                   )
# 2421 "..\pars.mly"
                 : 'ifExprElifs));
# 9479 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2426 "..\pars.mly"
                      _3 :: _1 
                   )
# 2426 "..\pars.mly"
                 : 'tupleExpr));
# 9491 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2428 "..\pars.mly"
                      _3 :: _1 :: [] 
                   )
# 2428 "..\pars.mly"
                 : 'tupleExpr));
# 9503 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2432 "..\pars.mly"
                      mksyn_prefix (rhs parseState 1) (union_ranges (rhs parseState 1) (range_of_synexpr _2)) "~-" _2 
                   )
# 2432 "..\pars.mly"
                 : 'minusExpr));
# 9514 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2434 "..\pars.mly"
                      mksyn_prefix (rhs parseState 1) (union_ranges (rhs parseState 1) (range_of_synexpr _2)) ("~"^(_1)) _2 
                   )
# 2434 "..\pars.mly"
                 : 'minusExpr));
# 9526 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2436 "..\pars.mly"
                      mksyn_prefix (rhs parseState 1) (union_ranges (rhs parseState 1) (range_of_synexpr _2)) ("~"^(_1)) _2 
                   )
# 2436 "..\pars.mly"
                 : 'minusExpr));
# 9538 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2438 "..\pars.mly"
                      mksyn_prefix (rhs parseState 1) (union_ranges (rhs parseState 1) (range_of_synexpr _2)) _1 _2 
                   )
# 2438 "..\pars.mly"
                 : 'minusExpr));
# 9550 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2440 "..\pars.mly"
                      mksyn_prefix (rhs parseState 1) (union_ranges (rhs parseState 1) (range_of_synexpr _2)) ("~"^(_1)) _2 
                   )
# 2440 "..\pars.mly"
                 : 'minusExpr));
# 9562 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2442 "..\pars.mly"
                      Expr_addrof(true,_2,rhs parseState 1,union_ranges (rhs parseState 1) (range_of_synexpr _2)) 
                   )
# 2442 "..\pars.mly"
                 : 'minusExpr));
# 9573 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2444 "..\pars.mly"
                      Expr_addrof(false,_2,rhs parseState 1, union_ranges (rhs parseState 1) (range_of_synexpr _2)) 
                   )
# 2444 "..\pars.mly"
                 : 'minusExpr));
# 9584 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExprAfterType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2446 "..\pars.mly"
                      Expr_new(false,_2,_4,union_ranges (rhs parseState 1) (range_of_synexpr _4)) 
                   )
# 2446 "..\pars.mly"
                 : 'minusExpr));
# 9597 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2448 "..\pars.mly"
                      Expr_new(false,_2,arbExpr(parseState),union_ranges (rhs parseState 1) (range_of_syntype _2)) 
                   )
# 2448 "..\pars.mly"
                 : 'minusExpr));
# 9609 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2450 "..\pars.mly"
                      Expr_inferred_upcast(_2,union_ranges (rhs parseState 1) (range_of_synexpr _2)) 
                   )
# 2450 "..\pars.mly"
                 : 'minusExpr));
# 9620 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'minusExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2452 "..\pars.mly"
                      Expr_inferred_downcast(_2,union_ranges (rhs parseState 1) (range_of_synexpr _2))
                   )
# 2452 "..\pars.mly"
                 : 'minusExpr));
# 9631 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2454 "..\pars.mly"
                      _1 
                   )
# 2454 "..\pars.mly"
                 : 'minusExpr));
# 9642 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2458 "..\pars.mly"
                      Expr_app (ExprAtomicFlag.NonAtomic, _1,_2,union_ranges (range_of_synexpr _1) (range_of_synexpr _2))  
                   )
# 2458 "..\pars.mly"
                 : 'appExpr));
# 9654 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2460 "..\pars.mly"
                      let arg,_ = _1 in 
                             arg 
                   )
# 2460 "..\pars.mly"
                 : 'appExpr));
# 9666 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2465 "..\pars.mly"
                      let arg2,hpa2 = _2 in 
                             if hpa2 then reportParseErrorAt (rhs parseState 1) "Successive arguments should be separated by spaces or tupled, and arguments involving function or method applications should be parenthesized";
                             mksyn_prefix (rhs parseState 1) (union_ranges (rhs parseState 1) (range_of_synexpr arg2)) ("~"^(_1)) arg2 
                   )
# 2465 "..\pars.mly"
                 : 'argExpr));
# 9680 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2469 "..\pars.mly"
                      let arg,hpa = _1 in 
                             if hpa then reportParseErrorAt (range_of_synexpr arg) "Successive arguments should be separated by spaces or tupled, and arguments involving function or method applications should be parenthesized";
                             arg 
                   )
# 2469 "..\pars.mly"
                 : 'argExpr));
# 9693 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2476 "..\pars.mly"
                      let arg1,_ = _1 in 
                             let arg2,_ = _3 in 
                             Expr_app (ExprAtomicFlag.Atomic, arg1,arg2,union_ranges (range_of_synexpr arg1) (range_of_synexpr arg2)),true  
                   )
# 2476 "..\pars.mly"
                 : 'atomicExpr));
# 9707 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeArgsActual)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2481 "..\pars.mly"
                      let arg1,_ = _1 in 
                             Expr_tyapp (arg1,_3,lhs(parseState)),false 
                   )
# 2481 "..\pars.mly"
                 : 'atomicExpr));
# 9720 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2485 "..\pars.mly"
                      let arg2,hpa2 = _2 in 
                             mksyn_prefix (rhs parseState 1) (union_ranges (rhs parseState 1) (range_of_synexpr arg2)) _1 arg2,hpa2 
                   )
# 2485 "..\pars.mly"
                 : 'atomicExpr));
# 9733 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExprQualification)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2488 "..\pars.mly"
                      let arg1,hpa1 = _1 in 
                             _3 arg1 (lhs(parseState)) (rhs parseState 2),hpa1 
                   )
# 2488 "..\pars.mly"
                 : 'atomicExpr));
# 9746 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExprQualification)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2491 "..\pars.mly"
                      let arg1 = Expr_id_get(ident("base",rhs parseState 1)) in
                             _3 arg1 (lhs(parseState)) (rhs parseState 2),false 
                   )
# 2491 "..\pars.mly"
                 : 'atomicExpr));
# 9758 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'nameop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2494 "..\pars.mly"
                      Expr_lid_get (true,[_2],rhs parseState 2),false 
                   )
# 2494 "..\pars.mly"
                 : 'atomicExpr));
# 9769 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dynamicArg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2496 "..\pars.mly"
                      let arg1,hpa1 = _1 in
                             mksyn_infix (rhs parseState 2) (lhs(parseState)) arg1 "?" _3, hpa1 
                   )
# 2496 "..\pars.mly"
                 : 'atomicExpr));
# 9782 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'nameop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2499 "..\pars.mly"
                      Expr_id_get (_1),false 
                   )
# 2499 "..\pars.mly"
                 : 'atomicExpr));
# 9793 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'listExprElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2501 "..\pars.mly"
                      MatchPair parseState 1 3; 
                             _2 (lhs(parseState)) false,false 
                   )
# 2501 "..\pars.mly"
                 : 'atomicExpr));
# 9805 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'listExprElements)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2504 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched '['"; 
                             _2 (rhs2 parseState 1 2) false, false 
                   )
# 2504 "..\pars.mly"
                 : 'atomicExpr));
# 9818 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2507 "..\pars.mly"
                      MatchPair parseState 1 3; 
                             (* silent recovery *) 
                             Expr_array_or_list(false,[ ], lhs(parseState)),false  
                   )
# 2507 "..\pars.mly"
                 : 'atomicExpr));
# 9830 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExprAfterType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2511 "..\pars.mly"
                      _1,false 
                   )
# 2511 "..\pars.mly"
                 : 'atomicExpr));
# 9841 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'identop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2515 "..\pars.mly"
                      let idm = rhs parseState 1 in 
                             (fun e lhsm dotm -> mksyn_dot lhsm e _1) 
                   )
# 2515 "..\pars.mly"
                 : 'atomicExprQualification));
# 9853 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2518 "..\pars.mly"
                      (fun e lhsm dotm -> 
                                 reportParseErrorAt dotm "missing qualification after '.'"; 
                                 // Include 'e' in the returned expression but throw it away
                                 Expr_throwaway(e,lhsm)) 
                   )
# 2518 "..\pars.mly"
                 : 'atomicExprQualification));
# 9867 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2523 "..\pars.mly"
                      (fun e lhsm dotm -> 
                                 libraryOnlyWarning (lhs(parseState));
                                 mksyn_dotn lhsm e (fst _1)) 
                   )
# 2523 "..\pars.mly"
                 : 'atomicExprQualification));
# 9880 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int32 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2527 "..\pars.mly"
                      (fun e lhsm dotm -> 
                                 libraryOnlyWarning(lhs(parseState));
                                 Expr_constr_field_get (e,mksyn_constr lhsm opname_Cons,(fst _5),lhsm)) 
                   )
# 2527 "..\pars.mly"
                 : 'atomicExprQualification));
# 9893 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2531 "..\pars.mly"
                      MatchPair parseState 1 3; 
                             (fun e lhsm dotm -> 
                                 ocamlCompatWarning "The expression form 'expr.(expr)' is for use when OCaml compatibility is enabled. In F# code you may use 'expr.[expr]'. A type annotation may be required to indicate the first expression is an array" (lhs(parseState)); 
                                 mksyn_dot_lparen_get lhsm e _2) 
                   )
# 2531 "..\pars.mly"
                 : 'atomicExprQualification));
# 9907 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2536 "..\pars.mly"
                      MatchPair parseState 1 3; 
                             (fun e lhsm dotm -> mksyn_dot_lbrack_get lhsm dotm e _2) 
                   )
# 2536 "..\pars.mly"
                 : 'atomicExprQualification));
# 9919 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'optRange)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2540 "..\pars.mly"
                      MatchPair parseState 1 3; 
                             (fun e lhsm dotm -> mksyn_dot_lbrack_slice_get lhsm dotm e _2) 
                   )
# 2540 "..\pars.mly"
                 : 'atomicExprQualification));
# 9931 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'optRange)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'optRange)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2543 "..\pars.mly"
                      MatchPair parseState 1 5; 
                             (fun e lhsm dotm -> mksyn_dot_lbrack_slice2_get lhsm dotm e _2 _4) 
                   )
# 2543 "..\pars.mly"
                 : 'atomicExprQualification));
# 9944 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'optRange)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'optRange)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'optRange)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2546 "..\pars.mly"
                      MatchPair parseState 1 7; 
                             (fun e lhsm dotm -> mksyn_dot_lbrack_slice3_get lhsm dotm e _2 _4 _6) 
                   )
# 2546 "..\pars.mly"
                 : 'atomicExprQualification));
# 9958 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'optRange)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'optRange)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'optRange)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'optRange)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2549 "..\pars.mly"
                      MatchPair parseState 1 9; 
                             (fun e lhsm dotm -> mksyn_dot_lbrack_slice4_get lhsm dotm e _2 _4 _6 _8) 
                   )
# 2549 "..\pars.mly"
                 : 'atomicExprQualification));
# 9973 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2553 "..\pars.mly"
                      mk_optional (rhs parseState 1) (Some _1), mk_optional (rhs parseState 3) (Some _3) 
                   )
# 2553 "..\pars.mly"
                 : 'optRange));
# 9985 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2554 "..\pars.mly"
                      mk_optional (rhs parseState 1) (Some _1), mk_optional (rhs parseState 2) None 
                   )
# 2554 "..\pars.mly"
                 : 'optRange));
# 9996 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2555 "..\pars.mly"
                      mk_optional (rhs parseState 1) None, mk_optional (rhs parseState 2) (Some _2) 
                   )
# 2555 "..\pars.mly"
                 : 'optRange));
# 10007 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2556 "..\pars.mly"
                      mk_optional (rhs parseState 1) None, mk_optional (rhs parseState 1) None 
                   )
# 2556 "..\pars.mly"
                 : 'optRange));
# 10017 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2562 "..\pars.mly"
                      Expr_const (_1,range_of_synconst _1 (lhs(parseState))) 
                   )
# 2562 "..\pars.mly"
                 : 'atomicExprAfterType));
# 10028 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2564 "..\pars.mly"
                      _1 
                   )
# 2564 "..\pars.mly"
                 : 'atomicExprAfterType));
# 10039 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'braceExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2566 "..\pars.mly"
                      _1 
                   )
# 2566 "..\pars.mly"
                 : 'atomicExprAfterType));
# 10050 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2568 "..\pars.mly"
                      Expr_null(lhs(parseState)) 
                   )
# 2568 "..\pars.mly"
                 : 'atomicExprAfterType));
# 10060 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2570 "..\pars.mly"
                      Expr_const(Const_bool false,lhs(parseState)) 
                   )
# 2570 "..\pars.mly"
                 : 'atomicExprAfterType));
# 10070 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2572 "..\pars.mly"
                      Expr_const(Const_bool true,lhs(parseState)) 
                   )
# 2572 "..\pars.mly"
                 : 'atomicExprAfterType));
# 10080 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'quoteExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2574 "..\pars.mly"
                      _1 
                   )
# 2574 "..\pars.mly"
                 : 'atomicExprAfterType));
# 10091 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arrayExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2576 "..\pars.mly"
                      _1 
                   )
# 2576 "..\pars.mly"
                 : 'atomicExprAfterType));
# 10102 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'beginEndExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2578 "..\pars.mly"
                      _1 
                   )
# 2578 "..\pars.mly"
                 : 'atomicExprAfterType));
# 10113 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2582 "..\pars.mly"
                      Expr_paren(_2,rhs2 parseState 1 3) 
                   )
# 2582 "..\pars.mly"
                 : 'beginEndExpr));
# 10124 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2584 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched 'begin'"; _2 
                   )
# 2584 "..\pars.mly"
                 : 'beginEndExpr));
# 10136 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2586 "..\pars.mly"
                      (* silent recovery *) arbExpr(parseState)  
                   )
# 2586 "..\pars.mly"
                 : 'beginEndExpr));
# 10146 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2588 "..\pars.mly"
                      mksyn_unit (lhs(parseState)) 
                   )
# 2588 "..\pars.mly"
                 : 'beginEndExpr));
# 10156 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * bool)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2592 "..\pars.mly"
                      MatchPair parseState 1 3; 
                             if _1 <> _3 then reportParseErrorAt (rhs parseState 1) ("mismatched quotation, beginning with '"^ fst _1 ^ "'");  
                             (Expr_quote(mksyn_item (lhs(parseState)) (CompileOpName (fst _1)), snd _1, _2,lhs(parseState))) 
                   )
# 2592 "..\pars.mly"
                 : 'quoteExpr));
# 10171 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * bool)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2596 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) ("unmatched '"^fst _1^"'");  
                             // Note: deliberately use this smaller range for the expression: see FSHarp 1.0 bug 3225
                             let mExpr = rhs2 parseState 1 1 in
                             Expr_quote(mksyn_item (lhs(parseState)) (CompileOpName (fst _1)),snd _1, _2,mExpr)  
                   )
# 2596 "..\pars.mly"
                 : 'quoteExpr));
# 10187 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * bool)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2601 "..\pars.mly"
                      MatchPair parseState 1 3; (* silent recovery *) Expr_quote(mksyn_item (lhs(parseState)) (CompileOpName (fst _1)),snd _1, arbExpr(parseState),lhs(parseState))  
                   )
# 2601 "..\pars.mly"
                 : 'quoteExpr));
# 10199 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'listExprElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2605 "..\pars.mly"
                       MatchPair parseState 1 3; _2 (lhs(parseState)) true 
                   )
# 2605 "..\pars.mly"
                 : 'arrayExpr));
# 10210 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'listExprElements)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2607 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched '[|'"; 
                             _2 (rhs2 parseState 1 2) true
                   )
# 2607 "..\pars.mly"
                 : 'arrayExpr));
# 10223 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2610 "..\pars.mly"
                       MatchPair parseState 1 3; (* silent recovery *) Expr_array_or_list(true,[ ], lhs(parseState)) 
                   )
# 2610 "..\pars.mly"
                 : 'arrayExpr));
# 10233 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenExprBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2614 "..\pars.mly"
                      MatchPair parseState 1 3; _2 (rhs2 parseState 1 3) 
                   )
# 2614 "..\pars.mly"
                 : 'parenExpr));
# 10244 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenExprBody)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2616 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched '('"; let lhsm = rhs2 parseState 1 2 in Expr_paren(_2 lhsm,lhsm) 
                   )
# 2616 "..\pars.mly"
                 : 'parenExpr));
# 10256 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2618 "..\pars.mly"
                      MatchPair parseState 1 3; (* silent recovery *) arbExpr(parseState) 
                   )
# 2618 "..\pars.mly"
                 : 'parenExpr));
# 10266 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2620 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched '('"; arbExpr(parseState)  
                   )
# 2620 "..\pars.mly"
                 : 'parenExpr));
# 10277 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2624 "..\pars.mly"
                       (fun m -> Expr_const(Const_unit,m)) 
                   )
# 2624 "..\pars.mly"
                 : 'parenExprBody));
# 10287 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2626 "..\pars.mly"
                       (fun  m -> Expr_typeof(_2,m)) 
                   )
# 2626 "..\pars.mly"
                 : 'parenExprBody));
# 10298 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'staticallyKnownHeadTypars)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'classMemberSpfn)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2628 "..\pars.mly"
                       MatchPair parseState 3 5;  
                              MatchPair parseState 6 8; 
                              (fun m -> Expr_trait_call(_1,_4,_6,m)) 
                   )
# 2628 "..\pars.mly"
                 : 'parenExprBody));
# 10313 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2632 "..\pars.mly"
                      (fun m -> Expr_paren(_1,m)) 
                   )
# 2632 "..\pars.mly"
                 : 'parenExprBody));
# 10324 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inlineAssemblyExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2634 "..\pars.mly"
                      _1 
                   )
# 2634 "..\pars.mly"
                 : 'parenExprBody));
# 10335 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'staticallyKnownHeadTypar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2637 "..\pars.mly"
                      [_1] 
                   )
# 2637 "..\pars.mly"
                 : 'staticallyKnownHeadTypars));
# 10346 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'staticallyKnownHeadTypar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'staticallyKnownHeadTypar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2638 "..\pars.mly"
                      [_2 ; _4 ] 
                   )
# 2638 "..\pars.mly"
                 : 'staticallyKnownHeadTypars));
# 10358 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'braceExprBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2642 "..\pars.mly"
                       MatchPair parseState 1 3; _2 (lhs(parseState)) 
                   )
# 2642 "..\pars.mly"
                 : 'braceExpr));
# 10369 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'braceExprBody)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2644 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched '{'" ; _2 (lhs(parseState)) 
                   )
# 2644 "..\pars.mly"
                 : 'braceExpr));
# 10381 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2646 "..\pars.mly"
                      MatchPair parseState 1 3; (* silent recovery *) arbExpr(parseState)  
                   )
# 2646 "..\pars.mly"
                 : 'braceExpr));
# 10391 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2650 "..\pars.mly"
                       (fun m -> let a,b,c = _1 in Expr_recd(a,b,c,m)) 
                   )
# 2650 "..\pars.mly"
                 : 'braceExprBody));
# 10402 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'objExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2652 "..\pars.mly"
                      _1 
                   )
# 2652 "..\pars.mly"
                 : 'braceExprBody));
# 10413 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'monadicExprInitial)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2654 "..\pars.mly"
                      _1 false 
                   )
# 2654 "..\pars.mly"
                 : 'braceExprBody));
# 10424 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'monadicExprInitial)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2658 "..\pars.mly"
                      (fun lhsm isArray -> Expr_array_or_list_of_seq(isArray, _1 true lhsm,lhsm)) 
                   )
# 2658 "..\pars.mly"
                 : 'listExprElements));
# 10435 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2660 "..\pars.mly"
                      (fun lhsm isArray -> Expr_array_or_list(isArray,[ ], lhsm)) 
                   )
# 2660 "..\pars.mly"
                 : 'listExprElements));
# 10445 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seqExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2664 "..\pars.mly"
                      (fun isArrayOrList lhsm -> Expr_comprehension(isArrayOrList,ref(isArrayOrList),_1,lhsm)) 
                   )
# 2664 "..\pars.mly"
                 : 'monadicExprInitial));
# 10456 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rangeSequenceExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2666 "..\pars.mly"
                      _1 
                   )
# 2666 "..\pars.mly"
                 : 'monadicExprInitial));
# 10467 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2670 "..\pars.mly"
                      deprecatedWithError "use 'expr .. expr' instead" (lhs(parseState)); (fun _ m -> mksyn_infix m m _1 ".." _3) 
                   )
# 2670 "..\pars.mly"
                 : 'rangeSequenceExpr));
# 10479 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2672 "..\pars.mly"
                      (fun _ m -> mksyn_infix m m _1 ".." _3) 
                   )
# 2672 "..\pars.mly"
                 : 'rangeSequenceExpr));
# 10491 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2674 "..\pars.mly"
                      (fun _ m -> mksyn_trifix m ".. .." _1 _3 _5) 
                   )
# 2674 "..\pars.mly"
                 : 'rangeSequenceExpr));
# 10504 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlockR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2682 "..\pars.mly"
                      (fun m -> Comp_yield((true,false),_2,m)) 
                   )
# 2682 "..\pars.mly"
                 : 'monadicSingleLineQualifiersThenArrowThenExprR));
# 10515 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlockR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2684 "..\pars.mly"
                      let mAll = union_ranges (rhs parseState 1) (range_of_synexpr _2) in
                            deprecatedWithError "The expression form '->>' in sequence expressions has been removed from the F# language. Use the syntax 'yield! ...' to generate multiple elements in sequence expressions" mAll;
                            (fun m -> Comp_yieldm((true,false),_2,m)) 
                   )
# 2684 "..\pars.mly"
                 : 'monadicSingleLineQualifiersThenArrowThenExprR));
# 10528 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'forLoopBinder)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'monadicSingleLineQualifiersThenArrowThenExprR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2689 "..\pars.mly"
                      deprecatedWithError "Nested 'for' loops in sequence expressions should be written 'for x in <collection1> do for y in <collection2> do ...yield <result>" (rhs2 parseState 1 2);
                            let spBind = SequencePointAtForLoop(rhs2 parseState 1 2) in
                            let a2,b2= _2 in 
                            (fun m -> 
                                Expr_foreach(spBind,SeqExprOnly(true),a2,b2,_4 m,m)) 
                   )
# 2689 "..\pars.mly"
                 : 'monadicSingleLineQualifiersThenArrowThenExprR));
# 10545 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'monadicWhenCondition)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'monadicSingleLineQualifiersThenArrowThenExprR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2696 "..\pars.mly"
                      let mWhenAndGuard = range_of_synexpr _1 in
                            deprecatedWithError "'when' conditions in sequence expressions have been removed from the F# language. Use 'for x in <collection> do if <condition> then ...yield <result>" mWhenAndGuard;
                            let spWhenAndGuard = SequencePointAtBinding(mWhenAndGuard) in
                            (fun m -> 
                                Expr_cond(_1,_3 m,None,spWhenAndGuard,mWhenAndGuard,m)) 
                   )
# 2696 "..\pars.mly"
                 : 'monadicSingleLineQualifiersThenArrowThenExprR));
# 10562 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2705 "..\pars.mly"
                      (_1, _3) 
                   )
# 2705 "..\pars.mly"
                 : 'forLoopBinder));
# 10574 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rangeSequenceExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2707 "..\pars.mly"
                      (_1, _3 false (rhs parseState 3)) 
                   )
# 2707 "..\pars.mly"
                 : 'forLoopBinder));
# 10586 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2709 "..\pars.mly"
                      (_1, arbExpr(parseState)) 
                   )
# 2709 "..\pars.mly"
                 : 'forLoopBinder));
# 10598 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parenPattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2712 "..\pars.mly"
                      id_of_pat (rhs parseState 1) _1,_3,_4,_5 
                   )
# 2712 "..\pars.mly"
                 : 'forLoopRange));
# 10612 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inlineAssemblyTypeArg)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_curriedArgExprs)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inlineAssemblyReturnTypes)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HASH)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2716 "..\pars.mly"
                      libraryOnlyWarning (lhs(parseState));
                             let s,sm = _2,rhs parseState 2 in
                             (fun m -> Expr_asm (ParseAssemblyCodeInstructions s sm,_3,List.rev _4,_5,m)) 
                   )
# 2716 "..\pars.mly"
                 : 'inlineAssemblyExpr));
# 10629 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_curriedArgExprs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2721 "..\pars.mly"
                      _2 :: _1 
                   )
# 2721 "..\pars.mly"
                 : 'opt_curriedArgExprs));
# 10641 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2722 "..\pars.mly"
                      [] 
                   )
# 2722 "..\pars.mly"
                 : 'opt_curriedArgExprs));
# 10651 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2725 "..\pars.mly"
                      None 
                   )
# 2725 "..\pars.mly"
                 : 'opt_atomicExprAfterType));
# 10661 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExprAfterType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2726 "..\pars.mly"
                      Some(_1) 
                   )
# 2726 "..\pars.mly"
                 : 'opt_atomicExprAfterType));
# 10672 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2729 "..\pars.mly"
                      [] 
                   )
# 2729 "..\pars.mly"
                 : 'opt_inlineAssemblyTypeArg));
# 10682 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2730 "..\pars.mly"
                       MatchPair parseState 2 4; [_3] 
                   )
# 2730 "..\pars.mly"
                 : 'opt_inlineAssemblyTypeArg));
# 10693 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2734 "..\pars.mly"
                      [] 
                   )
# 2734 "..\pars.mly"
                 : 'opt_inlineAssemblyReturnTypes));
# 10703 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2736 "..\pars.mly"
                      [_2] 
                   )
# 2736 "..\pars.mly"
                 : 'opt_inlineAssemblyReturnTypes));
# 10714 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2738 "..\pars.mly"
                       MatchPair parseState 2 3; [] 
                   )
# 2738 "..\pars.mly"
                 : 'opt_inlineAssemblyReturnTypes));
# 10724 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2742 "..\pars.mly"
                      (None,None, []) 
                   )
# 2742 "..\pars.mly"
                 : 'recdExpr));
# 10734 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_atomicExprAfterType)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdExprBindings)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2744 "..\pars.mly"
                      let arg = match _4 with None -> mksyn_unit (lhs(parseState)) | Some e -> e in 
                            (Some(_2,arg,rhs2 parseState 2 4),None, _5) 
                   )
# 2744 "..\pars.mly"
                 : 'recdExpr));
# 10750 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdExprBindings)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2749 "..\pars.mly"
                      match _1 with 
                            | Expr_lid_or_id_get(false,v,m) -> (None,None, (List.frontAndBack v,_3) :: List.rev _4) 
                            | _ -> raiseParseErrorAt (rhs parseState 2) "field bindings must have the form 'id = expr;'" 
                   )
# 2749 "..\pars.mly"
                 : 'recdExpr));
# 10766 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdExprBindings)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2753 "..\pars.mly"
                       (None,Some _1,(List.frontAndBack _3,_5):: List.rev _6) 
                   )
# 2753 "..\pars.mly"
                 : 'recdExpr));
# 10781 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdExprBindings)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2755 "..\pars.mly"
                       (None,Some _1,(List.frontAndBack _3,_5):: List.rev _6) 
                   )
# 2755 "..\pars.mly"
                 : 'recdExpr));
# 10796 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recdExprBindings)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seps)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2758 "..\pars.mly"
                      (List.frontAndBack _3,_5) :: _1 
                   )
# 2758 "..\pars.mly"
                 : 'recdExprBindings));
# 10810 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2759 "..\pars.mly"
                      [] 
                   )
# 2759 "..\pars.mly"
                 : 'recdExprBindings));
# 10820 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'objExprBaseCall)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'objExprBindings)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_objExprInterfaces)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2769 "..\pars.mly"
                      (fun m -> let (a,b) = _1 in Expr_impl(a,b,_2,_4, m)) 
                   )
# 2769 "..\pars.mly"
                 : 'objExpr));
# 10834 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'objExprBaseCall)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'objExprInterfaces)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2771 "..\pars.mly"
                      (fun m -> let (a,b) = _1 in Expr_impl(a,b,[],_3, m)) 
                   )
# 2771 "..\pars.mly"
                 : 'objExpr));
# 10847 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2773 "..\pars.mly"
                      (fun m -> let (a,b) = _2,None in Expr_impl(a,b,[],[], m)) 
                   )
# 2773 "..\pars.mly"
                 : 'objExpr));
# 10858 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExprAfterType)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'baseSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2777 "..\pars.mly"
                      (_2, Some(_4,Some(_5))) 
                   )
# 2777 "..\pars.mly"
                 : 'objExprBaseCall));
# 10872 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_HIGH_PRECEDENCE_APP)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicExprAfterType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2779 "..\pars.mly"
                      (_2, Some(_4,None)) 
                   )
# 2779 "..\pars.mly"
                 : 'objExprBaseCall));
# 10885 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2781 "..\pars.mly"
                      _2,None 
                   )
# 2781 "..\pars.mly"
                 : 'objExprBaseCall));
# 10896 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'objExprBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2786 "..\pars.mly"
                      _1 
                   )
# 2786 "..\pars.mly"
                 : 'opt_objExprBindings));
# 10907 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2787 "..\pars.mly"
                      [] 
                   )
# 2787 "..\pars.mly"
                 : 'opt_objExprBindings));
# 10917 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'localBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2791 "..\pars.mly"
                      let letm = (rhs parseState 1) in
                             (_2 [] None letm) 
                   )
# 2791 "..\pars.mly"
                 : 'objExprBindings));
# 10929 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'localBindings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2794 "..\pars.mly"
                      let letm = (rhs parseState 1) in
                             (_2 [] None letm) 
                   )
# 2794 "..\pars.mly"
                 : 'objExprBindings));
# 10941 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectImplementationBlock)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_end)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2797 "..\pars.mly"
                      _2 |> 
                             (List.choose (function ClassMemberDefn_member_binding(b,m) -> Some b
                                               | ClassMemberDefn_implicit_inherit (_, _, _, m)
                                               | ClassMemberDefn_implicit_ctor (_,_,_, _, m)
                                               | ClassMemberDefn_let_bindings(_,_,_,m)                    
                                               | ClassMemberDefn_slotsig(_,_,m) 
                                               | ClassMemberDefn_interface(_,_,m) 
                                               | ClassMemberDefn_inherit(_,_,m)
                                               | ClassMemberDefn_field(_,m)
                                               | ClassMemberDefn_open(_,m)
                                               | ClassMemberDefn_tycon(_,_,m) -> errorR(Error("This member is not permitted in an object implementation",m)); None)) 
                   )
# 2797 "..\pars.mly"
                 : 'objExprBindings));
# 10963 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'objExprInterface)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_objExprInterfaces)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2810 "..\pars.mly"
                      _1 :: _2 
                   )
# 2810 "..\pars.mly"
                 : 'objExprInterfaces));
# 10975 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2813 "..\pars.mly"
                      [] 
                   )
# 2813 "..\pars.mly"
                 : 'opt_objExprInterfaces));
# 10985 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'objExprInterface)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_objExprInterfaces)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2814 "..\pars.mly"
                      _1 :: _2 
                   )
# 2814 "..\pars.mly"
                 : 'opt_objExprInterfaces));
# 10997 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_objExprInterfaces)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2815 "..\pars.mly"
                      (* silent recovery *) _2 
                   )
# 2815 "..\pars.mly"
                 : 'opt_objExprInterfaces));
# 11008 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'interfaceMember)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_objExprBindings)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_decl_end)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_OBLOCKSEP)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2819 "..\pars.mly"
                      InterfaceImpl(_2, _3, lhs(parseState)) 
                   )
# 2819 "..\pars.mly"
                 : 'objExprInterface));
# 11023 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2822 "..\pars.mly"
                      true 
                   )
# 2822 "..\pars.mly"
                 : 'direction));
# 11033 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2823 "..\pars.mly"
                      false 
                   )
# 2823 "..\pars.mly"
                 : 'direction));
# 11043 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatterns)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlock)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2828 "..\pars.mly"
                      let mAll = union_ranges (rhs parseState 1) (range_of_synexpr _4) in
                            mksyn_fun_match_lambdas false mAll _2 _4 
                   )
# 2828 "..\pars.mly"
                 : 'anonLambdaExpr));
# 11056 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatterns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2831 "..\pars.mly"
                      let mAll = rhs2 parseState 1 3 in
                            mksyn_fun_match_lambdas false mAll _2 (arbExpr(parseState)) 
                   )
# 2831 "..\pars.mly"
                 : 'anonLambdaExpr));
# 11068 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatterns)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typedSeqExprBlockR)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2834 "..\pars.mly"
                      let mAll = union_ranges (rhs parseState 1) (range_of_synexpr _4) in
                            mksyn_fun_match_lambdas false mAll _2 _4 
                   )
# 2834 "..\pars.mly"
                 : 'anonLambdaExpr));
# 11081 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatterns)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2837 "..\pars.mly"
                      reportParseErrorAt (rhs2 parseState 1 3) "missing function body" ;
                            mksyn_fun_match_lambdas false (rhs2 parseState 1 3) _2 (arbExpr(parseState)) 
                   )
# 2837 "..\pars.mly"
                 : 'anonLambdaExpr));
# 11093 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomicPatterns)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2841 "..\pars.mly"
                      reportParseErrorAt (rhs2 parseState 1 3) "missing function body" ;
                            mksyn_fun_match_lambdas false (rhs2 parseState 1 3) _2 (arbExpr(parseState)) 
                   )
# 2841 "..\pars.mly"
                 : 'anonLambdaExpr));
# 11106 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_bar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternClauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2846 "..\pars.mly"
                      let clauses,mLast = _3 in
                             let mAll = union_ranges (rhs parseState 1) mLast in
                             mksyn_match_lambda(false,false,mAll,clauses,NoSequencePointAtInvisibleBinding) 
                   )
# 2846 "..\pars.mly"
                 : 'anonMatchingExpr));
# 11120 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_bar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternClauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2850 "..\pars.mly"
                      let clauses,mLast = _3 in
                             let mAll = union_ranges (rhs parseState 1) mLast in
                             mksyn_match_lambda(false,false,mAll,clauses,NoSequencePointAtInvisibleBinding) 
                   )
# 2850 "..\pars.mly"
                 : 'anonMatchingExpr));
# 11134 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_bar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'patternClauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2854 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "error in 'function' block"; 
                             let clauses,mLast = _3 in
                             let mAll = union_ranges (rhs parseState 1) mLast in
                             mksyn_match_lambda(false,false,mAll,clauses,NoSequencePointAtInvisibleBinding) 
                   )
# 2854 "..\pars.mly"
                 : 'anonMatchingExpr));
# 11149 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2863 "..\pars.mly"
                      _1 
                   )
# 2863 "..\pars.mly"
                 : 'typeWithTypeConstraints));
# 11160 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2865 "..\pars.mly"
                      Type_with_global_constraints(_1, List.rev _3,lhs(parseState)) 
                   )
# 2865 "..\pars.mly"
                 : 'typeWithTypeConstraints));
# 11172 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'topType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2869 "..\pars.mly"
                      _1 
                   )
# 2869 "..\pars.mly"
                 : 'topTypeWithTypeConstraints));
# 11183 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'topType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2871 "..\pars.mly"
                      let ty,arity = _1 in 
                             (* nb. it doesn't matter where the constraints go in the structure of the type. *)
                             Type_with_global_constraints(ty,List.rev _3,lhs(parseState)), arity 
                   )
# 2871 "..\pars.mly"
                 : 'topTypeWithTypeConstraints));
# 11197 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2877 "..\pars.mly"
                      None 
                   )
# 2877 "..\pars.mly"
                 : 'opt_topReturnTypeWithTypeConstraints));
# 11207 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'topTypeWithTypeConstraints)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2879 "..\pars.mly"
                      let ty,arity = _2 in 
                            let arity = (match arity with ValSynInfo([],rmdata)-> rmdata | _ -> SynInfo.unnamedRetVal) in
                            Some ((ty,arity),rhs parseState 2) 
                   )
# 2879 "..\pars.mly"
                 : 'opt_topReturnTypeWithTypeConstraints));
# 11220 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'topTupleType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'topType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2885 "..\pars.mly"
                      let dty,dmdata= _1 in 
                            let rty,(ValSynInfo(dmdatas,rmdata)) = _3 in 
                            Type_fun(dty,rty,lhs(parseState)), (ValSynInfo(dmdata::dmdatas, rmdata)) 
                   )
# 2885 "..\pars.mly"
                 : 'topType));
# 11234 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'topTupleType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2889 "..\pars.mly"
                      let ty,rmdata = _1 in ty, (ValSynInfo([],(match rmdata with [md] -> md | _ -> SynInfo.unnamedRetVal))) 
                   )
# 2889 "..\pars.mly"
                 : 'topType));
# 11245 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'topAppType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'topTupleTypeElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2893 "..\pars.mly"
                      let ty,mdata = _1 in let tys,mdatas = List.unzip _3 in (Type_tuple(List.map (fun ty -> (false,ty)) (ty ::tys), lhs(parseState))),(mdata :: mdatas) 
                   )
# 2893 "..\pars.mly"
                 : 'topTupleType));
# 11257 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'topAppType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2895 "..\pars.mly"
                      let ty,mdata = _1 in ty,[mdata] 
                   )
# 2895 "..\pars.mly"
                 : 'topTupleType));
# 11268 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'topAppType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'topTupleTypeElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2898 "..\pars.mly"
                      _1 :: _3 
                   )
# 2898 "..\pars.mly"
                 : 'topTupleTypeElements));
# 11280 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'topAppType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2899 "..\pars.mly"
                      [_1] 
                   )
# 2899 "..\pars.mly"
                 : 'topTupleTypeElements));
# 11291 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2904 "..\pars.mly"
                      match _2 with 
                            | Type_lid([id],_) -> _4,ArgSynInfo(_1,false,Some id)
                            | _ -> raiseParseErrorAt (rhs parseState 2) "syntax error in labelled type argument"  
                   )
# 2904 "..\pars.mly"
                 : 'topAppType));
# 11306 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributes)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2908 "..\pars.mly"
                      _5,ArgSynInfo(_1,true,Some _3) 
                   )
# 2908 "..\pars.mly"
                 : 'topAppType));
# 11319 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributes)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2910 "..\pars.mly"
                      (_2,ArgSynInfo(_1,false,None)) 
                   )
# 2910 "..\pars.mly"
                 : 'topAppType));
# 11331 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2912 "..\pars.mly"
                      match _1 with 
                            | Type_lid([id],_) -> _3,ArgSynInfo([],false,Some id)
                            | _ -> raiseParseErrorAt (rhs parseState 2) "syntax error in labelled type argument"  
                   )
# 2912 "..\pars.mly"
                 : 'topAppType));
# 11345 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2916 "..\pars.mly"
                      _4,ArgSynInfo([],true,Some _2) 
                   )
# 2916 "..\pars.mly"
                 : 'topAppType));
# 11357 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2918 "..\pars.mly"
                      _1,ArgSynInfo([],false,None) 
                   )
# 2918 "..\pars.mly"
                 : 'topAppType));
# 11368 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2922 "..\pars.mly"
                      deprecatedWithError "OCaml-style polymorphic record fields are deprecated and will be removed in a future release of the language. Consider using an interface type with a generic method instead" (lhs(parseState));
                             Type_forall(TyparDecl([],_1),_3,lhs(parseState)) 
                   )
# 2922 "..\pars.mly"
                 : 'polyType));
# 11381 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2924 "..\pars.mly"
                      _1 
                   )
# 2924 "..\pars.mly"
                 : 'polyType));
# 11392 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2927 "..\pars.mly"
                      Type_fun(_1,_3,lhs(parseState)) 
                   )
# 2927 "..\pars.mly"
                 : Ast.SynType));
# 11404 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2928 "..\pars.mly"
                      _1 
                   )
# 2928 "..\pars.mly"
                 : Ast.SynType));
# 11415 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleOrQuotTypeElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2932 "..\pars.mly"
                      Type_tuple((false,_1) :: _3,lhs(parseState)) 
                   )
# 2932 "..\pars.mly"
                 : 'tupleType));
# 11427 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleOrQuotTypeElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2935 "..\pars.mly"
                      if _1 <> "/" then reportParseErrorAt (rhs parseState 1) "Unexpected infix operator in type expression";
                           Type_tuple((true, Type_dimensionless (lhs(parseState))):: _2, lhs(parseState)) 
                   )
# 2935 "..\pars.mly"
                 : 'tupleType));
# 11440 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleOrQuotTypeElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2939 "..\pars.mly"
                      if _2 <> "/" then reportParseErrorAt (rhs parseState 1) "Unexpected infix operator in type expression";
                             Type_tuple((true,_1) :: _3, lhs(parseState)) 
                   )
# 2939 "..\pars.mly"
                 : 'tupleType));
# 11454 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2941 "..\pars.mly"
                      _1 
                   )
# 2941 "..\pars.mly"
                 : 'tupleType));
# 11465 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleOrQuotTypeElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2944 "..\pars.mly"
                      (false,_1) :: _3 
                   )
# 2944 "..\pars.mly"
                 : 'tupleOrQuotTypeElements));
# 11477 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleOrQuotTypeElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2946 "..\pars.mly"
                      if _2 <> "/" then reportParseErrorAt (rhs parseState 1) "Unexpected infix operator in type expression";
                             (true,_1) :: _3 
                   )
# 2946 "..\pars.mly"
                 : 'tupleOrQuotTypeElements));
# 11491 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2948 "..\pars.mly"
                      [(false,_1)] 
                   )
# 2948 "..\pars.mly"
                 : 'tupleOrQuotTypeElements));
# 11502 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleTypeElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2951 "..\pars.mly"
                      _1 :: _3 
                   )
# 2951 "..\pars.mly"
                 : 'tupleTypeElements));
# 11514 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2952 "..\pars.mly"
                      [_1] 
                   )
# 2952 "..\pars.mly"
                 : 'tupleTypeElements));
# 11525 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2956 "..\pars.mly"
                      Type_lid(_1, lhs(parseState)) 
                   )
# 2956 "..\pars.mly"
                 : 'appTypeCon));
# 11536 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2959 "..\pars.mly"
                      Type_var(_1, lhs(parseState)) 
                   )
# 2959 "..\pars.mly"
                 : 'appTypeCon));
# 11547 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appTypeCon)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int32 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2963 "..\pars.mly"
                      if _2 = "^-" then Type_power(_1, -(fst _3), lhs(parseState))
                            else Type_power(_1, fst _3, lhs(parseState)) 
                   )
# 2963 "..\pars.mly"
                 : 'appTypeConPower));
# 11561 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appTypeCon)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2966 "..\pars.mly"
                      _1 
                   )
# 2966 "..\pars.mly"
                 : 'appTypeConPower));
# 11572 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arrayTypeSuffix)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2970 "..\pars.mly"
                       Type_arr(_2,_1,lhs(parseState)) 
                   )
# 2970 "..\pars.mly"
                 : 'appType));
# 11584 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arrayTypeSuffix)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2972 "..\pars.mly"
                       Type_arr(_3,_1,lhs(parseState)) 
                   )
# 2972 "..\pars.mly"
                 : 'appType));
# 11596 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appTypeConPower)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2974 "..\pars.mly"
                      Type_app(_2,[_1],true,lhs(parseState)) 
                   )
# 2974 "..\pars.mly"
                 : 'appType));
# 11608 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2976 "..\pars.mly"
                      deprecatedWithError "The use of 'typ lazy' as a type is deprecated. Use 'Lazy<typ>' instead" (rhs parseState 2);
                             Type_lazy(_1,lhs(parseState)) 
                   )
# 2976 "..\pars.mly"
                 : 'appType));
# 11620 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'appTypePrexifArguments)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'appTypeConPower)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2979 "..\pars.mly"
                      ocamlCompatWarning "The syntax '(typ,...,typ) ident' for multi-argument generic type instantiations is only recommended if OCaml compatibility is enabled. Consider using 'ident<typ,...,typ>' instead" (lhs(parseState)); 
                             MatchPair parseState 1 3; 
                             Type_app(_4,_2, true, lhs(parseState)) 
                   )
# 2979 "..\pars.mly"
                 : 'appType));
# 11634 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'powerType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2983 "..\pars.mly"
                      _1 
                   )
# 2983 "..\pars.mly"
                 : 'appType));
# 11645 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2985 "..\pars.mly"
                       let tp,typ = _1,_3 in 
                              let m = lhs(parseState) in 
                              Type_with_global_constraints(Type_var (tp, rhs parseState 1), [WhereTyparSubtypeOfType(tp,typ,m)],m)  
                   )
# 2985 "..\pars.mly"
                 : 'appType));
# 11659 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2989 "..\pars.mly"
                       MatchPair parseState 1 3; mksyn_anon_constraint _3 (lhs(parseState)) 
                   )
# 2989 "..\pars.mly"
                 : 'appType));
# 11670 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2993 "..\pars.mly"
                       MatchPair parseState 1 2; 1 
                   )
# 2993 "..\pars.mly"
                 : 'arrayTypeSuffix));
# 11680 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2995 "..\pars.mly"
                       MatchPair parseState 1 3; 2 
                   )
# 2995 "..\pars.mly"
                 : 'arrayTypeSuffix));
# 11690 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2997 "..\pars.mly"
                       MatchPair parseState 1 4; 3 
                   )
# 2997 "..\pars.mly"
                 : 'arrayTypeSuffix));
# 11700 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 2999 "..\pars.mly"
                       MatchPair parseState 1 5; 4 
                   )
# 2999 "..\pars.mly"
                 : 'arrayTypeSuffix));
# 11710 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeListElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3002 "..\pars.mly"
                      _1 :: _3 :: List.rev _4 
                   )
# 3002 "..\pars.mly"
                 : 'appTypePrexifArguments));
# 11723 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeListElements)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3005 "..\pars.mly"
                      _3 :: _1 
                   )
# 3005 "..\pars.mly"
                 : 'typeListElements));
# 11735 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3006 "..\pars.mly"
                      [] 
                   )
# 3006 "..\pars.mly"
                 : 'typeListElements));
# 11745 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3010 "..\pars.mly"
                      _1 
                   )
# 3010 "..\pars.mly"
                 : 'powerType));
# 11756 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomType)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int32 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3012 "..\pars.mly"
                      if _2 <> "^" && _2 <> "^-" then reportParseErrorAt (rhs parseState 2) "Unexpected infix operator in type expression";
                            if _2 = "^-" then Type_power(_1, - (fst _3), lhs(parseState))
                            else Type_power(_1, fst _3, lhs(parseState)) 
                   )
# 3012 "..\pars.mly"
                 : 'powerType));
# 11771 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomType)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int32 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3016 "..\pars.mly"
                      if _2 <> "^" then reportParseErrorAt (rhs parseState 2) "Unexpected infix operator in type expression";
                            Type_power(_1, - (fst _4), lhs(parseState)) 
                   )
# 3016 "..\pars.mly"
                 : 'powerType));
# 11785 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3021 "..\pars.mly"
                      mksyn_anon_constraint _2 (lhs(parseState)) 
                   )
# 3021 "..\pars.mly"
                 : 'atomType));
# 11796 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appTypeConPower)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3023 "..\pars.mly"
                      _1 
                   )
# 3023 "..\pars.mly"
                 : 'atomType));
# 11807 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3025 "..\pars.mly"
                      Type_anon (lhs(parseState)) 
                   )
# 3025 "..\pars.mly"
                 : 'atomType));
# 11817 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3027 "..\pars.mly"
                       MatchPair parseState 1 3; _2 
                   )
# 3027 "..\pars.mly"
                 : 'atomType));
# 11828 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3029 "..\pars.mly"
                      reportParseErrorAt (rhs parseState 1) "unmatched '('" ; _2 
                   )
# 3029 "..\pars.mly"
                 : 'atomType));
# 11840 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3031 "..\pars.mly"
                      if fst _1 <> 1 then reportParseErrorAt (rhs parseState 1) "Unexpected integer literal in type expression";
                             Type_dimensionless (lhs(parseState))
                           
                   )
# 3031 "..\pars.mly"
                 : 'atomType));
# 11853 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3035 "..\pars.mly"
                      (* silent recovery *) Type_anon (lhs(parseState)) 
                   )
# 3035 "..\pars.mly"
                 : 'atomType));
# 11863 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'appTypeCon)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3037 "..\pars.mly"
                      Type_app(_1,_2,false,lhs(parseState)) 
                   )
# 3037 "..\pars.mly"
                 : 'atomType));
# 11875 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3039 "..\pars.mly"
                      Type_proj_then_app(_1,_3,[],lhs(parseState)) 
                   )
# 3039 "..\pars.mly"
                 : 'atomType));
# 11887 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atomType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3041 "..\pars.mly"
                      Type_proj_then_app(_1,_3,_4,lhs(parseState)) 
                   )
# 3041 "..\pars.mly"
                 : 'atomType));
# 11900 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeArgsActual)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3046 "..\pars.mly"
                      _1 
                   )
# 3046 "..\pars.mly"
                 : 'typeArgs));
# 11911 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeArgsActual)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3048 "..\pars.mly"
                      _2 
                   )
# 3048 "..\pars.mly"
                 : 'typeArgs));
# 11922 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3052 "..\pars.mly"
                      [] 
                   )
# 3052 "..\pars.mly"
                 : 'typeArgsActual));
# 11932 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3054 "..\pars.mly"
                      [_2] 
                   )
# 3054 "..\pars.mly"
                 : 'typeArgsActual));
# 11943 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.SynType)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeListElements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3056 "..\pars.mly"
                      _2 :: _4 :: List.rev _5 
                   )
# 3056 "..\pars.mly"
                 : 'typeArgsActual));
# 11956 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'measure)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3060 "..\pars.mly"
                      _2 
                   )
# 3060 "..\pars.mly"
                 : 'measurearg));
# 11967 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3062 "..\pars.mly"
                      Measure_Anon (lhs(parseState)) 
                   )
# 3062 "..\pars.mly"
                 : 'measurearg));
# 11977 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3066 "..\pars.mly"
                      Measure_Con(_1, lhs(parseState)) 
                   )
# 3066 "..\pars.mly"
                 : 'measureatom));
# 11988 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3069 "..\pars.mly"
                      Measure_Var(_1, lhs(parseState)) 
                   )
# 3069 "..\pars.mly"
                 : 'measureatom));
# 11999 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'measure)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3072 "..\pars.mly"
                      _2 
                   )
# 3072 "..\pars.mly"
                 : 'measureatom));
# 12010 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'measureatom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3076 "..\pars.mly"
                      _1 
                   )
# 3076 "..\pars.mly"
                 : 'measurepower));
# 12021 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'measureatom)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int32 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3079 "..\pars.mly"
                      if _2 <> "^" && _2 <> "^-" then reportParseErrorAt (rhs parseState 2) "Unexpected infix operator in unit-of-measure expression. Legal operators are '*', '/' and '^'";
                            if _2 = "^-" then Measure_Power(_1, - (fst _3), lhs(parseState))
                            else Measure_Power(_1, fst _3, lhs(parseState)) 
                   )
# 3079 "..\pars.mly"
                 : 'measurepower));
# 12036 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'measureatom)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int32 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3084 "..\pars.mly"
                      if _2 <> "^" then reportParseErrorAt (rhs parseState 2) "Unexpected infix operator in unit-of-measure expression. Legal operators are '*', '/' and '^'";
                            Measure_Power(_1, - (fst _4), lhs(parseState)) 
                   )
# 3084 "..\pars.mly"
                 : 'measurepower));
# 12050 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int32 * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3088 "..\pars.mly"
                      if fst _1 <> 1 then reportParseErrorAt (rhs parseState 1) "Unexpected integer literal in unit-of-measure expression";
                            Measure_One 
                   )
# 3088 "..\pars.mly"
                 : 'measurepower));
# 12062 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'measurepower)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3093 "..\pars.mly"
                      [_1] 
                   )
# 3093 "..\pars.mly"
                 : 'measureseq));
# 12073 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'measurepower)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'measureseq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3095 "..\pars.mly"
                      _1 :: _2 
                   )
# 3095 "..\pars.mly"
                 : 'measureseq));
# 12085 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'measureseq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3099 "..\pars.mly"
                      Measure_Seq(_1, lhs(parseState)) 
                   )
# 3099 "..\pars.mly"
                 : 'measure));
# 12096 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'measure)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'measure)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3101 "..\pars.mly"
                      Measure_Prod(_1, _3, lhs(parseState)) 
                   )
# 3101 "..\pars.mly"
                 : 'measure));
# 12108 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'measure)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'measure)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3103 "..\pars.mly"
                      if _2 <> "*" && _2 <> "/" then reportParseErrorAt (rhs parseState 2) "Unexpected infix operator in unit-of-measure expression. Legal operators are '*', '/' and '^'";
                           if _2 = "*" then Measure_Prod(_1, _3, lhs(parseState))
                           else Measure_Quot(_1, _3, lhs(parseState)) 
                   )
# 3103 "..\pars.mly"
                 : 'measure));
# 12123 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'measure)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3107 "..\pars.mly"
                      if _1 <> "/" then reportParseErrorAt (rhs parseState 1) "Unexpected operator in unit-of-measure expression. Legal operators are '*', '/' and '^'";
                            Measure_Quot(Measure_One, _2, lhs(parseState)) 
                   )
# 3107 "..\pars.mly"
                 : 'measure));
# 12136 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3112 "..\pars.mly"
                       let id = mksyn_id (lhs(parseState)) (_2).idText in
                             Typar(id ,NoStaticReq,false) 
                   )
# 3112 "..\pars.mly"
                 : 'typar));
# 12148 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'staticallyKnownHeadTypar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3121 "..\pars.mly"
                      _1 
                   )
# 3121 "..\pars.mly"
                 : 'typar));
# 12159 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3125 "..\pars.mly"
                       if _1 <> "^" then reportParseErrorAt (rhs parseState 1) "syntax error: unexpeced type paramter specification";
                            Typar(_2,HeadTypeStaticReq,false) 
                   )
# 3125 "..\pars.mly"
                 : 'staticallyKnownHeadTypar));
# 12172 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3132 "..\pars.mly"
                      ident(_1,rhs parseState 1) 
                   )
# 3132 "..\pars.mly"
                 : Ast.ident));
# 12183 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3136 "..\pars.mly"
                      [_1] 
                   )
# 3136 "..\pars.mly"
                 : 'path));
# 12194 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3138 "..\pars.mly"
                      (* silent recovery *) _1 @ [_3] 
                   )
# 3138 "..\pars.mly"
                 : 'path));
# 12206 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3140 "..\pars.mly"
                      (* silent recovery *) _1  
                   )
# 3140 "..\pars.mly"
                 : 'path));
# 12217 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'operatorName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3144 "..\pars.mly"
                       MatchPair parseState 1 3; 
                             ident(CompileOpName _2,rhs parseState 2) 
                   )
# 3144 "..\pars.mly"
                 : 'opname));
# 12229 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3147 "..\pars.mly"
                       MatchPair parseState 1 1; 
                             ident(CompileOpName "*",rhs parseState 1) 
                   )
# 3147 "..\pars.mly"
                 : 'opname));
# 12240 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'barNames)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3152 "..\pars.mly"
                      let text = ("|"^String.concat "|" (List.rev _2) ^ "|") in
                            ident(text,rhs2 parseState 2 3) 
                   )
# 3152 "..\pars.mly"
                 : 'opname));
# 12252 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'barNames)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3156 "..\pars.mly"
                      let text = ("|"^String.concat "|" (List.rev _2) ^ "|_|" ) in
                            ident(text,rhs2 parseState 2 5) 
                   )
# 3156 "..\pars.mly"
                 : 'opname));
# 12264 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3160 "..\pars.mly"
                      _1 
                   )
# 3160 "..\pars.mly"
                 : 'operatorName));
# 12275 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3161 "..\pars.mly"
                      _1 
                   )
# 3161 "..\pars.mly"
                 : 'operatorName));
# 12286 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3162 "..\pars.mly"
                      _1 
                   )
# 3162 "..\pars.mly"
                 : 'operatorName));
# 12297 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3163 "..\pars.mly"
                      _1 
                   )
# 3163 "..\pars.mly"
                 : 'operatorName));
# 12308 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3164 "..\pars.mly"
                      _1 
                   )
# 3164 "..\pars.mly"
                 : 'operatorName));
# 12319 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3165 "..\pars.mly"
                      _1 
                   )
# 3165 "..\pars.mly"
                 : 'operatorName));
# 12330 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3166 "..\pars.mly"
                      _1 
                   )
# 3166 "..\pars.mly"
                 : 'operatorName));
# 12341 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3167 "..\pars.mly"
                      _1 
                   )
# 3167 "..\pars.mly"
                 : 'operatorName));
# 12352 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3168 "..\pars.mly"
                      "$" 
                   )
# 3168 "..\pars.mly"
                 : 'operatorName));
# 12362 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3169 "..\pars.mly"
                      _1 
                   )
# 3169 "..\pars.mly"
                 : 'operatorName));
# 12373 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3170 "..\pars.mly"
                      "-" 
                   )
# 3170 "..\pars.mly"
                 : 'operatorName));
# 12383 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3171 "..\pars.mly"
                      "*" 
                   )
# 3171 "..\pars.mly"
                 : 'operatorName));
# 12393 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3172 "..\pars.mly"
                      "=" 
                   )
# 3172 "..\pars.mly"
                 : 'operatorName));
# 12403 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3173 "..\pars.mly"
                      "or" 
                   )
# 3173 "..\pars.mly"
                 : 'operatorName));
# 12413 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3174 "..\pars.mly"
                      "<" 
                   )
# 3174 "..\pars.mly"
                 : 'operatorName));
# 12423 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3175 "..\pars.mly"
                      ">" 
                   )
# 3175 "..\pars.mly"
                 : 'operatorName));
# 12433 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3176 "..\pars.mly"
                      "?" 
                   )
# 3176 "..\pars.mly"
                 : 'operatorName));
# 12443 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3177 "..\pars.mly"
                      "&" 
                   )
# 3177 "..\pars.mly"
                 : 'operatorName));
# 12453 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3178 "..\pars.mly"
                      "&&" 
                   )
# 3178 "..\pars.mly"
                 : 'operatorName));
# 12463 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3179 "..\pars.mly"
                      "||" 
                   )
# 3179 "..\pars.mly"
                 : 'operatorName));
# 12473 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3180 "..\pars.mly"
                      ":=" 
                   )
# 3180 "..\pars.mly"
                 : 'operatorName));
# 12483 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3182 "..\pars.mly"
                      if _1 <> ".[]" then 
                                  deprecatedOperator (lhs(parseState)); 
                             _1 
                   )
# 3182 "..\pars.mly"
                 : 'operatorName));
# 12496 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3185 "..\pars.mly"
                      _1 
                   )
# 3185 "..\pars.mly"
                 : 'operatorName));
# 12507 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3186 "..\pars.mly"
                      _1 
                   )
# 3186 "..\pars.mly"
                 : 'operatorName));
# 12518 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3187 "..\pars.mly"
                      (* deprecatedOperator (lhs(parseState)); *) ".." 
                   )
# 3187 "..\pars.mly"
                 : 'operatorName));
# 12528 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3188 "..\pars.mly"
                      (* deprecatedOperator (lhs(parseState)); *) ".. .." 
                   )
# 3188 "..\pars.mly"
                 : 'operatorName));
# 12538 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * bool)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3190 "..\pars.mly"
                      if _1 <> _2 then reportParseErrorAt (rhs parseState 1) ("mismatched quotation operator name, beginning with '"^fst _1^"'");  
                             fst _1 
                   )
# 3190 "..\pars.mly"
                 : 'operatorName));
# 12551 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3195 "..\pars.mly"
                      if not (String.isUpper _1) then reportParseErrorAt (rhs parseState 1) ("active pattern case identifiers must begin with an uppercase letter");  
                             _1 
                   )
# 3195 "..\pars.mly"
                 : 'barName));
# 12563 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'barName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3200 "..\pars.mly"
                      [_2] 
                   )
# 3200 "..\pars.mly"
                 : 'barNames));
# 12574 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'barNames)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'barName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3202 "..\pars.mly"
                      _3 :: _1 
                   )
# 3202 "..\pars.mly"
                 : 'barNames));
# 12586 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3206 "..\pars.mly"
                      _1 
                   )
# 3206 "..\pars.mly"
                 : 'identop));
# 12597 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opname)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3208 "..\pars.mly"
                      _1 
                   )
# 3208 "..\pars.mly"
                 : 'identop));
# 12608 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3213 "..\pars.mly"
                      [_1] 
                   )
# 3213 "..\pars.mly"
                 : 'pathop));
# 12619 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opname)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3215 "..\pars.mly"
                      [_1] 
                   )
# 3215 "..\pars.mly"
                 : 'pathop));
# 12630 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'pathop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3217 "..\pars.mly"
                      _1 :: _3 
                   )
# 3217 "..\pars.mly"
                 : 'pathop));
# 12642 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3219 "..\pars.mly"
                      (* silent recovery *) [_1] 
                   )
# 3219 "..\pars.mly"
                 : 'pathop));
# 12653 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'identop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3224 "..\pars.mly"
                      _1 
                   )
# 3224 "..\pars.mly"
                 : 'nameop));
# 12664 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3227 "..\pars.mly"
                      
                   )
# 3227 "..\pars.mly"
                 : 'top_sep));
# 12674 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3228 "..\pars.mly"
                      
                   )
# 3228 "..\pars.mly"
                 : 'top_sep));
# 12684 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3229 "..\pars.mly"
                      
                   )
# 3229 "..\pars.mly"
                 : 'top_sep));
# 12694 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_sep)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3232 "..\pars.mly"
                      
                   )
# 3232 "..\pars.mly"
                 : 'top_seps));
# 12705 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_sep)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3233 "..\pars.mly"
                      
                   )
# 3233 "..\pars.mly"
                 : 'top_seps));
# 12717 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3236 "..\pars.mly"
                      
                   )
# 3236 "..\pars.mly"
                 : 'itop_sep));
# 12727 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3237 "..\pars.mly"
                      
                   )
# 3237 "..\pars.mly"
                 : 'itop_sep));
# 12737 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'itop_sep)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3240 "..\pars.mly"
                      
                   )
# 3240 "..\pars.mly"
                 : 'itop_seps));
# 12748 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'itop_sep)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'itop_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3241 "..\pars.mly"
                      
                   )
# 3241 "..\pars.mly"
                 : 'itop_seps));
# 12760 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'itop_sep)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_itop_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3244 "..\pars.mly"
                      
                   )
# 3244 "..\pars.mly"
                 : 'opt_itop_seps));
# 12772 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3245 "..\pars.mly"
                      
                   )
# 3245 "..\pars.mly"
                 : 'opt_itop_seps));
# 12782 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_sep)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_top_seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3248 "..\pars.mly"
                      
                   )
# 3248 "..\pars.mly"
                 : 'opt_top_seps));
# 12794 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3249 "..\pars.mly"
                      
                   )
# 3249 "..\pars.mly"
                 : 'opt_top_seps));
# 12804 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3252 "..\pars.mly"
                      
                   )
# 3252 "..\pars.mly"
                 : 'seps));
# 12814 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3253 "..\pars.mly"
                      
                   )
# 3253 "..\pars.mly"
                 : 'seps));
# 12824 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3254 "..\pars.mly"
                      
                   )
# 3254 "..\pars.mly"
                 : 'seps));
# 12834 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3255 "..\pars.mly"
                      
                   )
# 3255 "..\pars.mly"
                 : 'seps));
# 12844 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3260 "..\pars.mly"
                      
                   )
# 3260 "..\pars.mly"
                 : 'decl_end));
# 12854 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3262 "..\pars.mly"
                      (* reportParseWarningAt (rhs parseState 2) "this 'end' token is not needed in #light syntax and should  be omitted. A future release of the language may require this";  *)  
                   )
# 3262 "..\pars.mly"
                 : 'decl_end));
# 12864 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3264 "..\pars.mly"
                   )
# 3264 "..\pars.mly"
                 : 'decl_end));
# 12873 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3269 "..\pars.mly"
                   )
# 3269 "..\pars.mly"
                 : 'opt_decl_end));
# 12882 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3271 "..\pars.mly"
                      (* reportParseWarningAt (rhs parseState 2) "this 'end' token is not needed in #light syntax and should be omitted. A future release of the language may require this";   *)  
                   )
# 3271 "..\pars.mly"
                 : 'opt_decl_end));
# 12892 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3273 "..\pars.mly"
                   )
# 3273 "..\pars.mly"
                 : 'opt_decl_end));
# 12901 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3275 "..\pars.mly"
                   )
# 3275 "..\pars.mly"
                 : 'opt_decl_end));
# 12910 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3278 "..\pars.mly"
                      
                   )
# 3278 "..\pars.mly"
                 : 'opt_ODECLEND));
# 12920 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3279 "..\pars.mly"
                      
                   )
# 3279 "..\pars.mly"
                 : 'opt_ODECLEND));
# 12930 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3282 "..\pars.mly"
                      deprecatedWithError "No '=' symbol should follow a 'namespace' declaration" (lhs(parseState)) 
                   )
# 3282 "..\pars.mly"
                 : 'deprecated_opt_equals));
# 12940 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3283 "..\pars.mly"
                       
                   )
# 3283 "..\pars.mly"
                 : 'deprecated_opt_equals));
# 12950 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3286 "..\pars.mly"
                      
                   )
# 3286 "..\pars.mly"
                 : 'opt_OBLOCKSEP));
# 12960 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3287 "..\pars.mly"
                      
                   )
# 3287 "..\pars.mly"
                 : 'opt_OBLOCKSEP));
# 12970 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3290 "..\pars.mly"
                      
                   )
# 3290 "..\pars.mly"
                 : 'opt_seps));
# 12981 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3291 "..\pars.mly"
                      
                   )
# 3291 "..\pars.mly"
                 : 'opt_seps));
# 12991 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3294 "..\pars.mly"
                      true 
                   )
# 3294 "..\pars.mly"
                 : 'opt_rec));
# 13001 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3295 "..\pars.mly"
                      false 
                   )
# 3295 "..\pars.mly"
                 : 'opt_rec));
# 13011 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3298 "..\pars.mly"
                      
                   )
# 3298 "..\pars.mly"
                 : 'opt_bar));
# 13021 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3299 "..\pars.mly"
                      
                   )
# 3299 "..\pars.mly"
                 : 'opt_bar));
# 13031 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3302 "..\pars.mly"
                      true 
                   )
# 3302 "..\pars.mly"
                 : 'opt_inline));
# 13041 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3303 "..\pars.mly"
                      false 
                   )
# 3303 "..\pars.mly"
                 : 'opt_inline));
# 13051 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3306 "..\pars.mly"
                      true 
                   )
# 3306 "..\pars.mly"
                 : 'opt_mutable));
# 13061 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3307 "..\pars.mly"
                      false 
                   )
# 3307 "..\pars.mly"
                 : 'opt_mutable));
# 13071 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3310 "..\pars.mly"
                      
                   )
# 3310 "..\pars.mly"
                 : 'do_or_odo));
# 13081 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3311 "..\pars.mly"
                      
                   )
# 3311 "..\pars.mly"
                 : 'do_or_odo));
# 13091 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3314 "..\pars.mly"
                      
                   )
# 3314 "..\pars.mly"
                 : 'done_term));
# 13101 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3315 "..\pars.mly"
                      
                   )
# 3315 "..\pars.mly"
                 : 'done_term));
# 13111 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3318 "..\pars.mly"
                      ocamlCompatWarning "The syntax 'module ... = struct .. end' is deprecated unless OCaml compatibility is enabled. Consider using 'module ... = begin .. end'" (lhs(parseState)); 
                   )
# 3318 "..\pars.mly"
                 : 'structOrBegin));
# 13121 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3319 "..\pars.mly"
                      
                   )
# 3319 "..\pars.mly"
                 : 'structOrBegin));
# 13131 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3322 "..\pars.mly"
                      ocamlCompatWarning "The syntax 'module ... : sig .. end' is deprecated unless OCaml compatibility is enabled. Consider using 'module ... = begin .. end'" (lhs(parseState)); 
                   )
# 3322 "..\pars.mly"
                 : 'sigOrBegin));
# 13141 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3323 "..\pars.mly"
                      
                   )
# 3323 "..\pars.mly"
                 : 'sigOrBegin));
# 13151 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3326 "..\pars.mly"
                      ocamlCompatWarning "The syntax 'module ... : sig .. end' is deprecated unless OCaml compatibility is enabled. Consider using 'module ... = begin .. end'" (lhs(parseState)); 
                   )
# 3326 "..\pars.mly"
                 : 'colonOrEquals));
# 13161 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3327 "..\pars.mly"
                      
                   )
# 3327 "..\pars.mly"
                 : 'colonOrEquals));
# 13171 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3330 "..\pars.mly"
                   )
# 3330 "..\pars.mly"
                 : 'opt_HASH));
# 13180 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3333 "..\pars.mly"
                      
                   )
# 3333 "..\pars.mly"
                 : 'opt_HIGH_PRECEDENCE_APP));
# 13190 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3334 "..\pars.mly"
                      
                   )
# 3334 "..\pars.mly"
                 : 'opt_HIGH_PRECEDENCE_APP));
# 13200 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3337 "..\pars.mly"
                      
                   )
# 3337 "..\pars.mly"
                 : 'opt_HIGH_PRECEDENCE_TYAPP));
# 13210 "pars.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 3338 "..\pars.mly"
                      
                   )
# 3338 "..\pars.mly"
                 : 'opt_HIGH_PRECEDENCE_TYAPP));
|]
# 13221 "pars.fs"
let tables () : Internal.Utilities.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Internal.Utilities.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 183;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let signatureFile lexer lexbuf : Ast.ParsedSigFile =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let implementationFile lexer lexbuf : Ast.ParsedImplFile =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
let interaction lexer lexbuf : Ast.interaction =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 4))
